/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Jellyfin.Api.Client;
using Jellyfin.Api.Api;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Test
{
    /// <summary>
    ///  Class for testing ConfigurationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ConfigurationApiTests
    {
        private ConfigurationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ConfigurationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ConfigurationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ConfigurationApi
            //Assert.IsInstanceOf(typeof(ConfigurationApi), instance);
        }

        
        /// <summary>
        /// Test GetConfiguration
        /// </summary>
        [Test]
        public void GetConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetConfiguration();
            //Assert.IsInstanceOf(typeof(ServerConfiguration), response, "response is ServerConfiguration");
        }
        
        /// <summary>
        /// Test GetDefaultMetadataOptions
        /// </summary>
        [Test]
        public void GetDefaultMetadataOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetDefaultMetadataOptions();
            //Assert.IsInstanceOf(typeof(MetadataOptions), response, "response is MetadataOptions");
        }
        
        /// <summary>
        /// Test GetNamedConfiguration
        /// </summary>
        [Test]
        public void GetNamedConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //var response = instance.GetNamedConfiguration(key);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test UpdateConfiguration
        /// </summary>
        [Test]
        public void UpdateConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //instance.UpdateConfiguration(UNKNOWN_BASE_TYPE);
            
        }
        
        /// <summary>
        /// Test UpdateMediaEncoderPath
        /// </summary>
        [Test]
        public void UpdateMediaEncoderPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //instance.UpdateMediaEncoderPath(UNKNOWN_BASE_TYPE);
            
        }
        
        /// <summary>
        /// Test UpdateNamedConfiguration
        /// </summary>
        [Test]
        public void UpdateNamedConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //instance.UpdateNamedConfiguration(key);
            
        }
        
    }

}
