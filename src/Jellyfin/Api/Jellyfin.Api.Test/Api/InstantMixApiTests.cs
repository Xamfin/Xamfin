/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Jellyfin.Api.Client;
using Jellyfin.Api.Api;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Test
{
    /// <summary>
    ///  Class for testing InstantMixApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class InstantMixApiTests
    {
        private InstantMixApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new InstantMixApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of InstantMixApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' InstantMixApi
            //Assert.IsInstanceOf(typeof(InstantMixApi), instance);
        }

        
        /// <summary>
        /// Test GetInstantMixFromAlbum
        /// </summary>
        [Test]
        public void GetInstantMixFromAlbumTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //Guid? userId = null;
            //int? limit = null;
            //List<ItemFields> fields = null;
            //bool? enableImages = null;
            //bool? enableUserData = null;
            //int? imageTypeLimit = null;
            //List<ImageType> enableImageTypes = null;
            //var response = instance.GetInstantMixFromAlbum(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
        /// <summary>
        /// Test GetInstantMixFromArtists
        /// </summary>
        [Test]
        public void GetInstantMixFromArtistsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //Guid? userId = null;
            //int? limit = null;
            //List<ItemFields> fields = null;
            //bool? enableImages = null;
            //bool? enableUserData = null;
            //int? imageTypeLimit = null;
            //List<ImageType> enableImageTypes = null;
            //var response = instance.GetInstantMixFromArtists(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
        /// <summary>
        /// Test GetInstantMixFromArtists2
        /// </summary>
        [Test]
        public void GetInstantMixFromArtists2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //Guid? userId = null;
            //int? limit = null;
            //List<ItemFields> fields = null;
            //bool? enableImages = null;
            //bool? enableUserData = null;
            //int? imageTypeLimit = null;
            //List<ImageType> enableImageTypes = null;
            //var response = instance.GetInstantMixFromArtists2(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
        /// <summary>
        /// Test GetInstantMixFromItem
        /// </summary>
        [Test]
        public void GetInstantMixFromItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //Guid? userId = null;
            //int? limit = null;
            //List<ItemFields> fields = null;
            //bool? enableImages = null;
            //bool? enableUserData = null;
            //int? imageTypeLimit = null;
            //List<ImageType> enableImageTypes = null;
            //var response = instance.GetInstantMixFromItem(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
        /// <summary>
        /// Test GetInstantMixFromMusicGenreById
        /// </summary>
        [Test]
        public void GetInstantMixFromMusicGenreByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //Guid? userId = null;
            //int? limit = null;
            //List<ItemFields> fields = null;
            //bool? enableImages = null;
            //bool? enableUserData = null;
            //int? imageTypeLimit = null;
            //List<ImageType> enableImageTypes = null;
            //var response = instance.GetInstantMixFromMusicGenreById(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
        /// <summary>
        /// Test GetInstantMixFromMusicGenreById2
        /// </summary>
        [Test]
        public void GetInstantMixFromMusicGenreById2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //Guid? userId = null;
            //int? limit = null;
            //List<ItemFields> fields = null;
            //bool? enableImages = null;
            //bool? enableUserData = null;
            //int? imageTypeLimit = null;
            //List<ImageType> enableImageTypes = null;
            //var response = instance.GetInstantMixFromMusicGenreById2(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
        /// <summary>
        /// Test GetInstantMixFromMusicGenreByName
        /// </summary>
        [Test]
        public void GetInstantMixFromMusicGenreByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Guid? userId = null;
            //int? limit = null;
            //List<ItemFields> fields = null;
            //bool? enableImages = null;
            //bool? enableUserData = null;
            //int? imageTypeLimit = null;
            //List<ImageType> enableImageTypes = null;
            //var response = instance.GetInstantMixFromMusicGenreByName(name, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
        /// <summary>
        /// Test GetInstantMixFromPlaylist
        /// </summary>
        [Test]
        public void GetInstantMixFromPlaylistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //Guid? userId = null;
            //int? limit = null;
            //List<ItemFields> fields = null;
            //bool? enableImages = null;
            //bool? enableUserData = null;
            //int? imageTypeLimit = null;
            //List<ImageType> enableImageTypes = null;
            //var response = instance.GetInstantMixFromPlaylist(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
        /// <summary>
        /// Test GetInstantMixFromSong
        /// </summary>
        [Test]
        public void GetInstantMixFromSongTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //Guid? userId = null;
            //int? limit = null;
            //List<ItemFields> fields = null;
            //bool? enableImages = null;
            //bool? enableUserData = null;
            //int? imageTypeLimit = null;
            //List<ImageType> enableImageTypes = null;
            //var response = instance.GetInstantMixFromSong(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
    }

}
