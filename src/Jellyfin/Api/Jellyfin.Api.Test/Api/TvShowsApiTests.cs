/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Jellyfin.Api.Client;
using Jellyfin.Api.Api;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Test
{
    /// <summary>
    ///  Class for testing TvShowsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TvShowsApiTests
    {
        private TvShowsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TvShowsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TvShowsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' TvShowsApi
            //Assert.IsInstanceOf(typeof(TvShowsApi), instance);
        }

        
        /// <summary>
        /// Test GetEpisodes
        /// </summary>
        [Test]
        public void GetEpisodesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid seriesId = null;
            //Guid? userId = null;
            //List<ItemFields> fields = null;
            //int? season = null;
            //Guid? seasonId = null;
            //bool? isMissing = null;
            //string adjacentTo = null;
            //Guid? startItemId = null;
            //int? startIndex = null;
            //int? limit = null;
            //bool? enableImages = null;
            //int? imageTypeLimit = null;
            //List<ImageType> enableImageTypes = null;
            //bool? enableUserData = null;
            //string sortBy = null;
            //var response = instance.GetEpisodes(seriesId, userId, fields, season, seasonId, isMissing, adjacentTo, startItemId, startIndex, limit, enableImages, imageTypeLimit, enableImageTypes, enableUserData, sortBy);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
        /// <summary>
        /// Test GetNextUp
        /// </summary>
        [Test]
        public void GetNextUpTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? userId = null;
            //int? startIndex = null;
            //int? limit = null;
            //List<ItemFields> fields = null;
            //string seriesId = null;
            //Guid? parentId = null;
            //bool? enableImges = null;
            //int? imageTypeLimit = null;
            //List<ImageType> enableImageTypes = null;
            //bool? enableUserData = null;
            //bool? enableTotalRecordCount = null;
            //bool? disableFirstEpisode = null;
            //var response = instance.GetNextUp(userId, startIndex, limit, fields, seriesId, parentId, enableImges, imageTypeLimit, enableImageTypes, enableUserData, enableTotalRecordCount, disableFirstEpisode);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
        /// <summary>
        /// Test GetSeasons
        /// </summary>
        [Test]
        public void GetSeasonsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid seriesId = null;
            //Guid? userId = null;
            //List<ItemFields> fields = null;
            //bool? isSpecialSeason = null;
            //bool? isMissing = null;
            //string adjacentTo = null;
            //bool? enableImages = null;
            //int? imageTypeLimit = null;
            //List<ImageType> enableImageTypes = null;
            //bool? enableUserData = null;
            //var response = instance.GetSeasons(seriesId, userId, fields, isSpecialSeason, isMissing, adjacentTo, enableImages, imageTypeLimit, enableImageTypes, enableUserData);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
        /// <summary>
        /// Test GetUpcomingEpisodes
        /// </summary>
        [Test]
        public void GetUpcomingEpisodesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? userId = null;
            //int? startIndex = null;
            //int? limit = null;
            //List<ItemFields> fields = null;
            //Guid? parentId = null;
            //bool? enableImges = null;
            //int? imageTypeLimit = null;
            //List<ImageType> enableImageTypes = null;
            //bool? enableUserData = null;
            //var response = instance.GetUpcomingEpisodes(userId, startIndex, limit, fields, parentId, enableImges, imageTypeLimit, enableImageTypes, enableUserData);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
    }

}
