/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Jellyfin.Api.Client;
using Jellyfin.Api.Api;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Test
{
    /// <summary>
    ///  Class for testing ImageApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ImageApiTests
    {
        private ImageApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ImageApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ImageApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ImageApi
            //Assert.IsInstanceOf(typeof(ImageApi), instance);
        }

        
        /// <summary>
        /// Test DeleteItemImage
        /// </summary>
        [Test]
        public void DeleteItemImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //ImageType imageType = null;
            //int? imageIndex = null;
            //instance.DeleteItemImage(itemId, imageType, imageIndex);
            
        }
        
        /// <summary>
        /// Test DeleteItemImageByIndex
        /// </summary>
        [Test]
        public void DeleteItemImageByIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //ImageType imageType = null;
            //int imageIndex = null;
            //instance.DeleteItemImageByIndex(itemId, imageType, imageIndex);
            
        }
        
        /// <summary>
        /// Test DeleteUserImage
        /// </summary>
        [Test]
        public void DeleteUserImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //ImageType imageType = null;
            //int? index = null;
            //instance.DeleteUserImage(userId, imageType, index);
            
        }
        
        /// <summary>
        /// Test DeleteUserImageByIndex
        /// </summary>
        [Test]
        public void DeleteUserImageByIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //ImageType imageType = null;
            //int index = null;
            //instance.DeleteUserImageByIndex(userId, imageType, index);
            
        }
        
        /// <summary>
        /// Test GetArtistImage
        /// </summary>
        [Test]
        public void GetArtistImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ImageType imageType = null;
            //int imageIndex = null;
            //string tag = null;
            //ImageFormat? format = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //var response = instance.GetArtistImage(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetGenreImage
        /// </summary>
        [Test]
        public void GetGenreImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ImageType imageType = null;
            //string tag = null;
            //ImageFormat? format = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //int? imageIndex = null;
            //var response = instance.GetGenreImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetGenreImageByIndex
        /// </summary>
        [Test]
        public void GetGenreImageByIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ImageType imageType = null;
            //int imageIndex = null;
            //string tag = null;
            //ImageFormat? format = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //var response = instance.GetGenreImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetItemImage
        /// </summary>
        [Test]
        public void GetItemImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //ImageType imageType = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //string tag = null;
            //bool? cropWhitespace = null;
            //ImageFormat? format = null;
            //bool? addPlayedIndicator = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //int? imageIndex = null;
            //var response = instance.GetItemImage(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetItemImage2
        /// </summary>
        [Test]
        public void GetItemImage2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //ImageType imageType = null;
            //int maxWidth = null;
            //int maxHeight = null;
            //string tag = null;
            //ImageFormat format = null;
            //double percentPlayed = null;
            //int unplayedCount = null;
            //int imageIndex = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //var response = instance.GetItemImage2(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetItemImageByIndex
        /// </summary>
        [Test]
        public void GetItemImageByIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //ImageType imageType = null;
            //int imageIndex = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //string tag = null;
            //bool? cropWhitespace = null;
            //ImageFormat? format = null;
            //bool? addPlayedIndicator = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //var response = instance.GetItemImageByIndex(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetItemImageInfos
        /// </summary>
        [Test]
        public void GetItemImageInfosTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //var response = instance.GetItemImageInfos(itemId);
            //Assert.IsInstanceOf(typeof(List<ImageInfo>), response, "response is List<ImageInfo>");
        }
        
        /// <summary>
        /// Test GetMusicGenreImage
        /// </summary>
        [Test]
        public void GetMusicGenreImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ImageType imageType = null;
            //string tag = null;
            //ImageFormat? format = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //int? imageIndex = null;
            //var response = instance.GetMusicGenreImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetMusicGenreImageByIndex
        /// </summary>
        [Test]
        public void GetMusicGenreImageByIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ImageType imageType = null;
            //int imageIndex = null;
            //string tag = null;
            //ImageFormat? format = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //var response = instance.GetMusicGenreImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetPersonImage
        /// </summary>
        [Test]
        public void GetPersonImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ImageType imageType = null;
            //string tag = null;
            //ImageFormat? format = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //int? imageIndex = null;
            //var response = instance.GetPersonImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetPersonImageByIndex
        /// </summary>
        [Test]
        public void GetPersonImageByIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ImageType imageType = null;
            //int imageIndex = null;
            //string tag = null;
            //ImageFormat? format = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //var response = instance.GetPersonImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetStudioImage
        /// </summary>
        [Test]
        public void GetStudioImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ImageType imageType = null;
            //string tag = null;
            //ImageFormat? format = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //int? imageIndex = null;
            //var response = instance.GetStudioImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetStudioImageByIndex
        /// </summary>
        [Test]
        public void GetStudioImageByIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ImageType imageType = null;
            //int imageIndex = null;
            //string tag = null;
            //ImageFormat? format = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //var response = instance.GetStudioImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetUserImage
        /// </summary>
        [Test]
        public void GetUserImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //ImageType imageType = null;
            //string tag = null;
            //ImageFormat? format = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //int? imageIndex = null;
            //var response = instance.GetUserImage(userId, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetUserImageByIndex
        /// </summary>
        [Test]
        public void GetUserImageByIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //ImageType imageType = null;
            //int imageIndex = null;
            //string tag = null;
            //ImageFormat? format = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //var response = instance.GetUserImageByIndex(userId, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test HeadArtistImage
        /// </summary>
        [Test]
        public void HeadArtistImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ImageType imageType = null;
            //int imageIndex = null;
            //string tag = null;
            //ImageFormat? format = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //var response = instance.HeadArtistImage(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test HeadGenreImage
        /// </summary>
        [Test]
        public void HeadGenreImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ImageType imageType = null;
            //string tag = null;
            //ImageFormat? format = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //int? imageIndex = null;
            //var response = instance.HeadGenreImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test HeadGenreImageByIndex
        /// </summary>
        [Test]
        public void HeadGenreImageByIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ImageType imageType = null;
            //int imageIndex = null;
            //string tag = null;
            //ImageFormat? format = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //var response = instance.HeadGenreImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test HeadItemImage
        /// </summary>
        [Test]
        public void HeadItemImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //ImageType imageType = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //string tag = null;
            //bool? cropWhitespace = null;
            //ImageFormat? format = null;
            //bool? addPlayedIndicator = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //int? imageIndex = null;
            //var response = instance.HeadItemImage(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test HeadItemImage2
        /// </summary>
        [Test]
        public void HeadItemImage2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //ImageType imageType = null;
            //int maxWidth = null;
            //int maxHeight = null;
            //string tag = null;
            //ImageFormat format = null;
            //double percentPlayed = null;
            //int unplayedCount = null;
            //int imageIndex = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //var response = instance.HeadItemImage2(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test HeadItemImageByIndex
        /// </summary>
        [Test]
        public void HeadItemImageByIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //ImageType imageType = null;
            //int imageIndex = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //string tag = null;
            //bool? cropWhitespace = null;
            //ImageFormat? format = null;
            //bool? addPlayedIndicator = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //var response = instance.HeadItemImageByIndex(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test HeadMusicGenreImage
        /// </summary>
        [Test]
        public void HeadMusicGenreImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ImageType imageType = null;
            //string tag = null;
            //ImageFormat? format = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //int? imageIndex = null;
            //var response = instance.HeadMusicGenreImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test HeadMusicGenreImageByIndex
        /// </summary>
        [Test]
        public void HeadMusicGenreImageByIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ImageType imageType = null;
            //int imageIndex = null;
            //string tag = null;
            //ImageFormat? format = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //var response = instance.HeadMusicGenreImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test HeadPersonImage
        /// </summary>
        [Test]
        public void HeadPersonImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ImageType imageType = null;
            //string tag = null;
            //ImageFormat? format = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //int? imageIndex = null;
            //var response = instance.HeadPersonImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test HeadPersonImageByIndex
        /// </summary>
        [Test]
        public void HeadPersonImageByIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ImageType imageType = null;
            //int imageIndex = null;
            //string tag = null;
            //ImageFormat? format = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //var response = instance.HeadPersonImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test HeadStudioImage
        /// </summary>
        [Test]
        public void HeadStudioImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ImageType imageType = null;
            //string tag = null;
            //ImageFormat? format = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //int? imageIndex = null;
            //var response = instance.HeadStudioImage(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test HeadStudioImageByIndex
        /// </summary>
        [Test]
        public void HeadStudioImageByIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ImageType imageType = null;
            //int imageIndex = null;
            //string tag = null;
            //ImageFormat? format = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //var response = instance.HeadStudioImageByIndex(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test HeadUserImage
        /// </summary>
        [Test]
        public void HeadUserImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //ImageType imageType = null;
            //string tag = null;
            //ImageFormat? format = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //int? imageIndex = null;
            //var response = instance.HeadUserImage(userId, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test HeadUserImageByIndex
        /// </summary>
        [Test]
        public void HeadUserImageByIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //ImageType imageType = null;
            //int imageIndex = null;
            //string tag = null;
            //ImageFormat? format = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //double? percentPlayed = null;
            //int? unplayedCount = null;
            //int? width = null;
            //int? height = null;
            //int? quality = null;
            //int? fillWidth = null;
            //int? fillHeight = null;
            //bool? cropWhitespace = null;
            //bool? addPlayedIndicator = null;
            //int? blur = null;
            //string backgroundColor = null;
            //string foregroundLayer = null;
            //var response = instance.HeadUserImageByIndex(userId, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test PostUserImage
        /// </summary>
        [Test]
        public void PostUserImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //ImageType imageType = null;
            //int? index = null;
            //System.IO.Stream body = null;
            //instance.PostUserImage(userId, imageType, index, body);
            
        }
        
        /// <summary>
        /// Test PostUserImageByIndex
        /// </summary>
        [Test]
        public void PostUserImageByIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //ImageType imageType = null;
            //int index = null;
            //System.IO.Stream body = null;
            //instance.PostUserImageByIndex(userId, imageType, index, body);
            
        }
        
        /// <summary>
        /// Test SetItemImage
        /// </summary>
        [Test]
        public void SetItemImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //ImageType imageType = null;
            //System.IO.Stream body = null;
            //instance.SetItemImage(itemId, imageType, body);
            
        }
        
        /// <summary>
        /// Test SetItemImageByIndex
        /// </summary>
        [Test]
        public void SetItemImageByIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //ImageType imageType = null;
            //int imageIndex = null;
            //System.IO.Stream body = null;
            //instance.SetItemImageByIndex(itemId, imageType, imageIndex, body);
            
        }
        
        /// <summary>
        /// Test UpdateItemImageIndex
        /// </summary>
        [Test]
        public void UpdateItemImageIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //ImageType imageType = null;
            //int imageIndex = null;
            //int newIndex = null;
            //instance.UpdateItemImageIndex(itemId, imageType, imageIndex, newIndex);
            
        }
        
    }

}
