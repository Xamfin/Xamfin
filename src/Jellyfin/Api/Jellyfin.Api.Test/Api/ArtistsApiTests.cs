/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Jellyfin.Api.Client;
using Jellyfin.Api.Api;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Test
{
    /// <summary>
    ///  Class for testing ArtistsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ArtistsApiTests
    {
        private ArtistsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ArtistsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ArtistsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ArtistsApi
            //Assert.IsInstanceOf(typeof(ArtistsApi), instance);
        }

        
        /// <summary>
        /// Test GetAlbumArtists
        /// </summary>
        [Test]
        public void GetAlbumArtistsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //double? minCommunityRating = null;
            //int? startIndex = null;
            //int? limit = null;
            //string searchTerm = null;
            //Guid? parentId = null;
            //List<ItemFields> fields = null;
            //List<string> excludeItemTypes = null;
            //List<string> includeItemTypes = null;
            //List<ItemFilter> filters = null;
            //bool? isFavorite = null;
            //List<string> mediaTypes = null;
            //List<string> genres = null;
            //List<Guid> genreIds = null;
            //List<string> officialRatings = null;
            //List<string> tags = null;
            //List<int> years = null;
            //bool? enableUserData = null;
            //int? imageTypeLimit = null;
            //List<ImageType> enableImageTypes = null;
            //string person = null;
            //List<Guid> personIds = null;
            //List<string> personTypes = null;
            //List<string> studios = null;
            //List<Guid> studioIds = null;
            //Guid? userId = null;
            //string nameStartsWithOrGreater = null;
            //string nameStartsWith = null;
            //string nameLessThan = null;
            //bool? enableImages = null;
            //bool? enableTotalRecordCount = null;
            //var response = instance.GetAlbumArtists(minCommunityRating, startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, genres, genreIds, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
        /// <summary>
        /// Test GetArtistByName
        /// </summary>
        [Test]
        public void GetArtistByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Guid? userId = null;
            //var response = instance.GetArtistByName(name, userId);
            //Assert.IsInstanceOf(typeof(BaseItemDto), response, "response is BaseItemDto");
        }
        
        /// <summary>
        /// Test GetArtists
        /// </summary>
        [Test]
        public void GetArtistsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //double? minCommunityRating = null;
            //int? startIndex = null;
            //int? limit = null;
            //string searchTerm = null;
            //Guid? parentId = null;
            //List<ItemFields> fields = null;
            //List<string> excludeItemTypes = null;
            //List<string> includeItemTypes = null;
            //List<ItemFilter> filters = null;
            //bool? isFavorite = null;
            //List<string> mediaTypes = null;
            //List<string> genres = null;
            //List<Guid> genreIds = null;
            //List<string> officialRatings = null;
            //List<string> tags = null;
            //List<int> years = null;
            //bool? enableUserData = null;
            //int? imageTypeLimit = null;
            //List<ImageType> enableImageTypes = null;
            //string person = null;
            //List<Guid> personIds = null;
            //List<string> personTypes = null;
            //List<string> studios = null;
            //List<Guid> studioIds = null;
            //Guid? userId = null;
            //string nameStartsWithOrGreater = null;
            //string nameStartsWith = null;
            //string nameLessThan = null;
            //bool? enableImages = null;
            //bool? enableTotalRecordCount = null;
            //var response = instance.GetArtists(minCommunityRating, startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, genres, genreIds, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
    }

}
