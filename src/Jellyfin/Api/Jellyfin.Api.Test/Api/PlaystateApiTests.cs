/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Jellyfin.Api.Client;
using Jellyfin.Api.Api;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Test
{
    /// <summary>
    ///  Class for testing PlaystateApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PlaystateApiTests
    {
        private PlaystateApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PlaystateApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PlaystateApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' PlaystateApi
            //Assert.IsInstanceOf(typeof(PlaystateApi), instance);
        }

        
        /// <summary>
        /// Test MarkPlayedItem
        /// </summary>
        [Test]
        public void MarkPlayedItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //Guid itemId = null;
            //DateTime? datePlayed = null;
            //var response = instance.MarkPlayedItem(userId, itemId, datePlayed);
            //Assert.IsInstanceOf(typeof(UserItemDataDto), response, "response is UserItemDataDto");
        }
        
        /// <summary>
        /// Test MarkUnplayedItem
        /// </summary>
        [Test]
        public void MarkUnplayedItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //Guid itemId = null;
            //var response = instance.MarkUnplayedItem(userId, itemId);
            //Assert.IsInstanceOf(typeof(UserItemDataDto), response, "response is UserItemDataDto");
        }
        
        /// <summary>
        /// Test OnPlaybackProgress
        /// </summary>
        [Test]
        public void OnPlaybackProgressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //Guid itemId = null;
            //string mediaSourceId = null;
            //long? positionTicks = null;
            //int? audioStreamIndex = null;
            //int? subtitleStreamIndex = null;
            //int? volumeLevel = null;
            //PlayMethod? playMethod = null;
            //string liveStreamId = null;
            //string playSessionId = null;
            //RepeatMode? repeatMode = null;
            //bool? isPaused = null;
            //bool? isMuted = null;
            //instance.OnPlaybackProgress(userId, itemId, mediaSourceId, positionTicks, audioStreamIndex, subtitleStreamIndex, volumeLevel, playMethod, liveStreamId, playSessionId, repeatMode, isPaused, isMuted);
            
        }
        
        /// <summary>
        /// Test OnPlaybackStart
        /// </summary>
        [Test]
        public void OnPlaybackStartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //Guid itemId = null;
            //string mediaSourceId = null;
            //int? audioStreamIndex = null;
            //int? subtitleStreamIndex = null;
            //PlayMethod? playMethod = null;
            //string liveStreamId = null;
            //string playSessionId = null;
            //bool? canSeek = null;
            //instance.OnPlaybackStart(userId, itemId, mediaSourceId, audioStreamIndex, subtitleStreamIndex, playMethod, liveStreamId, playSessionId, canSeek);
            
        }
        
        /// <summary>
        /// Test OnPlaybackStopped
        /// </summary>
        [Test]
        public void OnPlaybackStoppedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //Guid itemId = null;
            //string mediaSourceId = null;
            //string nextMediaType = null;
            //long? positionTicks = null;
            //string liveStreamId = null;
            //string playSessionId = null;
            //instance.OnPlaybackStopped(userId, itemId, mediaSourceId, nextMediaType, positionTicks, liveStreamId, playSessionId);
            
        }
        
        /// <summary>
        /// Test PingPlaybackSession
        /// </summary>
        [Test]
        public void PingPlaybackSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string playSessionId = null;
            //instance.PingPlaybackSession(playSessionId);
            
        }
        
        /// <summary>
        /// Test ReportPlaybackProgress
        /// </summary>
        [Test]
        public void ReportPlaybackProgressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //instance.ReportPlaybackProgress(UNKNOWN_BASE_TYPE);
            
        }
        
        /// <summary>
        /// Test ReportPlaybackStart
        /// </summary>
        [Test]
        public void ReportPlaybackStartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //instance.ReportPlaybackStart(UNKNOWN_BASE_TYPE);
            
        }
        
        /// <summary>
        /// Test ReportPlaybackStopped
        /// </summary>
        [Test]
        public void ReportPlaybackStoppedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //instance.ReportPlaybackStopped(UNKNOWN_BASE_TYPE);
            
        }
        
    }

}
