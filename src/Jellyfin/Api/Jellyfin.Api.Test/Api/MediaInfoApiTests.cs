/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Jellyfin.Api.Client;
using Jellyfin.Api.Api;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Test
{
    /// <summary>
    ///  Class for testing MediaInfoApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MediaInfoApiTests
    {
        private MediaInfoApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MediaInfoApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MediaInfoApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' MediaInfoApi
            //Assert.IsInstanceOf(typeof(MediaInfoApi), instance);
        }

        
        /// <summary>
        /// Test CloseLiveStream
        /// </summary>
        [Test]
        public void CloseLiveStreamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string liveStreamId = null;
            //instance.CloseLiveStream(liveStreamId);
            
        }
        
        /// <summary>
        /// Test GetBitrateTestBytes
        /// </summary>
        [Test]
        public void GetBitrateTestBytesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? size = null;
            //var response = instance.GetBitrateTestBytes(size);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetPlaybackInfo
        /// </summary>
        [Test]
        public void GetPlaybackInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //Guid userId = null;
            //var response = instance.GetPlaybackInfo(itemId, userId);
            //Assert.IsInstanceOf(typeof(PlaybackInfoResponse), response, "response is PlaybackInfoResponse");
        }
        
        /// <summary>
        /// Test GetPostedPlaybackInfo
        /// </summary>
        [Test]
        public void GetPostedPlaybackInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //Guid? userId = null;
            //int? maxStreamingBitrate = null;
            //long? startTimeTicks = null;
            //int? audioStreamIndex = null;
            //int? subtitleStreamIndex = null;
            //int? maxAudioChannels = null;
            //string mediaSourceId = null;
            //string liveStreamId = null;
            //bool? autoOpenLiveStream = null;
            //bool? enableDirectPlay = null;
            //bool? enableDirectStream = null;
            //bool? enableTranscoding = null;
            //bool? allowVideoStreamCopy = null;
            //bool? allowAudioStreamCopy = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.GetPostedPlaybackInfo(itemId, userId, maxStreamingBitrate, startTimeTicks, audioStreamIndex, subtitleStreamIndex, maxAudioChannels, mediaSourceId, liveStreamId, autoOpenLiveStream, enableDirectPlay, enableDirectStream, enableTranscoding, allowVideoStreamCopy, allowAudioStreamCopy, UNKNOWN_BASE_TYPE);
            //Assert.IsInstanceOf(typeof(PlaybackInfoResponse), response, "response is PlaybackInfoResponse");
        }
        
        /// <summary>
        /// Test OpenLiveStream
        /// </summary>
        [Test]
        public void OpenLiveStreamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string openToken = null;
            //Guid? userId = null;
            //string playSessionId = null;
            //int? maxStreamingBitrate = null;
            //long? startTimeTicks = null;
            //int? audioStreamIndex = null;
            //int? subtitleStreamIndex = null;
            //int? maxAudioChannels = null;
            //Guid? itemId = null;
            //bool? enableDirectPlay = null;
            //bool? enableDirectStream = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.OpenLiveStream(openToken, userId, playSessionId, maxStreamingBitrate, startTimeTicks, audioStreamIndex, subtitleStreamIndex, maxAudioChannels, itemId, enableDirectPlay, enableDirectStream, UNKNOWN_BASE_TYPE);
            //Assert.IsInstanceOf(typeof(LiveStreamResponse), response, "response is LiveStreamResponse");
        }
        
    }

}
