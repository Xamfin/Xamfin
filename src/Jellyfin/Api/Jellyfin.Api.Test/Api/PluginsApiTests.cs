/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Jellyfin.Api.Client;
using Jellyfin.Api.Api;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Test
{
    /// <summary>
    ///  Class for testing PluginsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PluginsApiTests
    {
        private PluginsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PluginsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PluginsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' PluginsApi
            //Assert.IsInstanceOf(typeof(PluginsApi), instance);
        }

        
        /// <summary>
        /// Test DisablePlugin
        /// </summary>
        [Test]
        public void DisablePluginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid pluginId = null;
            //Version version = null;
            //instance.DisablePlugin(pluginId, version);
            
        }
        
        /// <summary>
        /// Test EnablePlugin
        /// </summary>
        [Test]
        public void EnablePluginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid pluginId = null;
            //Version version = null;
            //instance.EnablePlugin(pluginId, version);
            
        }
        
        /// <summary>
        /// Test GetPluginConfiguration
        /// </summary>
        [Test]
        public void GetPluginConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid pluginId = null;
            //var response = instance.GetPluginConfiguration(pluginId);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetPluginImage
        /// </summary>
        [Test]
        public void GetPluginImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid pluginId = null;
            //Version version = null;
            //var response = instance.GetPluginImage(pluginId, version);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetPluginManifest
        /// </summary>
        [Test]
        public void GetPluginManifestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid pluginId = null;
            //instance.GetPluginManifest(pluginId);
            
        }
        
        /// <summary>
        /// Test GetPlugins
        /// </summary>
        [Test]
        public void GetPluginsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPlugins();
            //Assert.IsInstanceOf(typeof(List<PluginInfo>), response, "response is List<PluginInfo>");
        }
        
        /// <summary>
        /// Test UninstallPlugin
        /// </summary>
        [Test]
        public void UninstallPluginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid pluginId = null;
            //instance.UninstallPlugin(pluginId);
            
        }
        
        /// <summary>
        /// Test UninstallPluginByVersion
        /// </summary>
        [Test]
        public void UninstallPluginByVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid pluginId = null;
            //Version version = null;
            //instance.UninstallPluginByVersion(pluginId, version);
            
        }
        
        /// <summary>
        /// Test UpdatePluginConfiguration
        /// </summary>
        [Test]
        public void UpdatePluginConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid pluginId = null;
            //instance.UpdatePluginConfiguration(pluginId);
            
        }
        
        /// <summary>
        /// Test UpdatePluginSecurityInfo
        /// </summary>
        [Test]
        public void UpdatePluginSecurityInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //instance.UpdatePluginSecurityInfo(UNKNOWN_BASE_TYPE);
            
        }
        
    }

}
