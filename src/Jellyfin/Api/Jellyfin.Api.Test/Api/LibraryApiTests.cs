/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Jellyfin.Api.Client;
using Jellyfin.Api.Api;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Test
{
    /// <summary>
    ///  Class for testing LibraryApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class LibraryApiTests
    {
        private LibraryApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new LibraryApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of LibraryApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' LibraryApi
            //Assert.IsInstanceOf(typeof(LibraryApi), instance);
        }

        
        /// <summary>
        /// Test DeleteItem
        /// </summary>
        [Test]
        public void DeleteItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //instance.DeleteItem(itemId);
            
        }
        
        /// <summary>
        /// Test DeleteItems
        /// </summary>
        [Test]
        public void DeleteItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<Guid> ids = null;
            //instance.DeleteItems(ids);
            
        }
        
        /// <summary>
        /// Test GetAncestors
        /// </summary>
        [Test]
        public void GetAncestorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //Guid? userId = null;
            //var response = instance.GetAncestors(itemId, userId);
            //Assert.IsInstanceOf(typeof(List<BaseItemDto>), response, "response is List<BaseItemDto>");
        }
        
        /// <summary>
        /// Test GetCriticReviews
        /// </summary>
        [Test]
        public void GetCriticReviewsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string itemId = null;
            //var response = instance.GetCriticReviews(itemId);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
        /// <summary>
        /// Test GetDownload
        /// </summary>
        [Test]
        public void GetDownloadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //var response = instance.GetDownload(itemId);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetFile
        /// </summary>
        [Test]
        public void GetFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //var response = instance.GetFile(itemId);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetItemCounts
        /// </summary>
        [Test]
        public void GetItemCountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? userId = null;
            //bool? isFavorite = null;
            //var response = instance.GetItemCounts(userId, isFavorite);
            //Assert.IsInstanceOf(typeof(ItemCounts), response, "response is ItemCounts");
        }
        
        /// <summary>
        /// Test GetLibraryOptionsInfo
        /// </summary>
        [Test]
        public void GetLibraryOptionsInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string libraryContentType = null;
            //bool? isNewLibrary = null;
            //var response = instance.GetLibraryOptionsInfo(libraryContentType, isNewLibrary);
            //Assert.IsInstanceOf(typeof(LibraryOptionsResultDto), response, "response is LibraryOptionsResultDto");
        }
        
        /// <summary>
        /// Test GetMediaFolders
        /// </summary>
        [Test]
        public void GetMediaFoldersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? isHidden = null;
            //var response = instance.GetMediaFolders(isHidden);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
        /// <summary>
        /// Test GetPhysicalPaths
        /// </summary>
        [Test]
        public void GetPhysicalPathsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPhysicalPaths();
            //Assert.IsInstanceOf(typeof(List<string>), response, "response is List<string>");
        }
        
        /// <summary>
        /// Test GetSimilarAlbums
        /// </summary>
        [Test]
        public void GetSimilarAlbumsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //List<Guid> excludeArtistIds = null;
            //Guid? userId = null;
            //int? limit = null;
            //List<ItemFields> fields = null;
            //var response = instance.GetSimilarAlbums(itemId, excludeArtistIds, userId, limit, fields);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
        /// <summary>
        /// Test GetSimilarArtists
        /// </summary>
        [Test]
        public void GetSimilarArtistsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //List<Guid> excludeArtistIds = null;
            //Guid? userId = null;
            //int? limit = null;
            //List<ItemFields> fields = null;
            //var response = instance.GetSimilarArtists(itemId, excludeArtistIds, userId, limit, fields);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
        /// <summary>
        /// Test GetSimilarItems
        /// </summary>
        [Test]
        public void GetSimilarItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //List<Guid> excludeArtistIds = null;
            //Guid? userId = null;
            //int? limit = null;
            //List<ItemFields> fields = null;
            //var response = instance.GetSimilarItems(itemId, excludeArtistIds, userId, limit, fields);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
        /// <summary>
        /// Test GetSimilarMovies
        /// </summary>
        [Test]
        public void GetSimilarMoviesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //List<Guid> excludeArtistIds = null;
            //Guid? userId = null;
            //int? limit = null;
            //List<ItemFields> fields = null;
            //var response = instance.GetSimilarMovies(itemId, excludeArtistIds, userId, limit, fields);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
        /// <summary>
        /// Test GetSimilarShows
        /// </summary>
        [Test]
        public void GetSimilarShowsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //List<Guid> excludeArtistIds = null;
            //Guid? userId = null;
            //int? limit = null;
            //List<ItemFields> fields = null;
            //var response = instance.GetSimilarShows(itemId, excludeArtistIds, userId, limit, fields);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
        /// <summary>
        /// Test GetSimilarTrailers
        /// </summary>
        [Test]
        public void GetSimilarTrailersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //List<Guid> excludeArtistIds = null;
            //Guid? userId = null;
            //int? limit = null;
            //List<ItemFields> fields = null;
            //var response = instance.GetSimilarTrailers(itemId, excludeArtistIds, userId, limit, fields);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
        /// <summary>
        /// Test GetThemeMedia
        /// </summary>
        [Test]
        public void GetThemeMediaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //Guid? userId = null;
            //bool? inheritFromParent = null;
            //var response = instance.GetThemeMedia(itemId, userId, inheritFromParent);
            //Assert.IsInstanceOf(typeof(AllThemeMediaResult), response, "response is AllThemeMediaResult");
        }
        
        /// <summary>
        /// Test GetThemeSongs
        /// </summary>
        [Test]
        public void GetThemeSongsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //Guid? userId = null;
            //bool? inheritFromParent = null;
            //var response = instance.GetThemeSongs(itemId, userId, inheritFromParent);
            //Assert.IsInstanceOf(typeof(ThemeMediaResult), response, "response is ThemeMediaResult");
        }
        
        /// <summary>
        /// Test GetThemeVideos
        /// </summary>
        [Test]
        public void GetThemeVideosTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //Guid? userId = null;
            //bool? inheritFromParent = null;
            //var response = instance.GetThemeVideos(itemId, userId, inheritFromParent);
            //Assert.IsInstanceOf(typeof(ThemeMediaResult), response, "response is ThemeMediaResult");
        }
        
        /// <summary>
        /// Test PostAddedMovies
        /// </summary>
        [Test]
        public void PostAddedMoviesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tmdbId = null;
            //string imdbId = null;
            //instance.PostAddedMovies(tmdbId, imdbId);
            
        }
        
        /// <summary>
        /// Test PostAddedSeries
        /// </summary>
        [Test]
        public void PostAddedSeriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tvdbId = null;
            //instance.PostAddedSeries(tvdbId);
            
        }
        
        /// <summary>
        /// Test PostUpdatedMedia
        /// </summary>
        [Test]
        public void PostUpdatedMediaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //instance.PostUpdatedMedia(UNKNOWN_BASE_TYPE);
            
        }
        
        /// <summary>
        /// Test PostUpdatedMovies
        /// </summary>
        [Test]
        public void PostUpdatedMoviesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tmdbId = null;
            //string imdbId = null;
            //instance.PostUpdatedMovies(tmdbId, imdbId);
            
        }
        
        /// <summary>
        /// Test PostUpdatedSeries
        /// </summary>
        [Test]
        public void PostUpdatedSeriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tvdbId = null;
            //instance.PostUpdatedSeries(tvdbId);
            
        }
        
        /// <summary>
        /// Test RefreshLibrary
        /// </summary>
        [Test]
        public void RefreshLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.RefreshLibrary();
            
        }
        
    }

}
