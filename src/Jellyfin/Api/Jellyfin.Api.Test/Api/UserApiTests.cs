/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Jellyfin.Api.Client;
using Jellyfin.Api.Api;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Test
{
    /// <summary>
    ///  Class for testing UserApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UserApiTests
    {
        private UserApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UserApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UserApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' UserApi
            //Assert.IsInstanceOf(typeof(UserApi), instance);
        }

        
        /// <summary>
        /// Test AuthenticateUser
        /// </summary>
        [Test]
        public void AuthenticateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //string pw = null;
            //string password = null;
            //var response = instance.AuthenticateUser(userId, pw, password);
            //Assert.IsInstanceOf(typeof(AuthenticationResult), response, "response is AuthenticationResult");
        }
        
        /// <summary>
        /// Test AuthenticateUserByName
        /// </summary>
        [Test]
        public void AuthenticateUserByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.AuthenticateUserByName(UNKNOWN_BASE_TYPE);
            //Assert.IsInstanceOf(typeof(AuthenticationResult), response, "response is AuthenticationResult");
        }
        
        /// <summary>
        /// Test AuthenticateWithQuickConnect
        /// </summary>
        [Test]
        public void AuthenticateWithQuickConnectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.AuthenticateWithQuickConnect(UNKNOWN_BASE_TYPE);
            //Assert.IsInstanceOf(typeof(AuthenticationResult), response, "response is AuthenticationResult");
        }
        
        /// <summary>
        /// Test CreateUserByName
        /// </summary>
        [Test]
        public void CreateUserByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.CreateUserByName(UNKNOWN_BASE_TYPE);
            //Assert.IsInstanceOf(typeof(UserDto), response, "response is UserDto");
        }
        
        /// <summary>
        /// Test DeleteUser
        /// </summary>
        [Test]
        public void DeleteUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //instance.DeleteUser(userId);
            
        }
        
        /// <summary>
        /// Test ForgotPassword
        /// </summary>
        [Test]
        public void ForgotPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.ForgotPassword(UNKNOWN_BASE_TYPE);
            //Assert.IsInstanceOf(typeof(ForgotPasswordResult), response, "response is ForgotPasswordResult");
        }
        
        /// <summary>
        /// Test ForgotPasswordPin
        /// </summary>
        [Test]
        public void ForgotPasswordPinTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.ForgotPasswordPin(UNKNOWN_BASE_TYPE);
            //Assert.IsInstanceOf(typeof(PinRedeemResult), response, "response is PinRedeemResult");
        }
        
        /// <summary>
        /// Test GetCurrentUser
        /// </summary>
        [Test]
        public void GetCurrentUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCurrentUser();
            //Assert.IsInstanceOf(typeof(UserDto), response, "response is UserDto");
        }
        
        /// <summary>
        /// Test GetPublicUsers
        /// </summary>
        [Test]
        public void GetPublicUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPublicUsers();
            //Assert.IsInstanceOf(typeof(List<UserDto>), response, "response is List<UserDto>");
        }
        
        /// <summary>
        /// Test GetUserById
        /// </summary>
        [Test]
        public void GetUserByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //var response = instance.GetUserById(userId);
            //Assert.IsInstanceOf(typeof(UserDto), response, "response is UserDto");
        }
        
        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Test]
        public void GetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? isHidden = null;
            //bool? isDisabled = null;
            //var response = instance.GetUsers(isHidden, isDisabled);
            //Assert.IsInstanceOf(typeof(List<UserDto>), response, "response is List<UserDto>");
        }
        
        /// <summary>
        /// Test UpdateUser
        /// </summary>
        [Test]
        public void UpdateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //instance.UpdateUser(userId, UNKNOWN_BASE_TYPE);
            
        }
        
        /// <summary>
        /// Test UpdateUserConfiguration
        /// </summary>
        [Test]
        public void UpdateUserConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //instance.UpdateUserConfiguration(userId, UNKNOWN_BASE_TYPE);
            
        }
        
        /// <summary>
        /// Test UpdateUserEasyPassword
        /// </summary>
        [Test]
        public void UpdateUserEasyPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //instance.UpdateUserEasyPassword(userId, UNKNOWN_BASE_TYPE);
            
        }
        
        /// <summary>
        /// Test UpdateUserPassword
        /// </summary>
        [Test]
        public void UpdateUserPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //instance.UpdateUserPassword(userId, UNKNOWN_BASE_TYPE);
            
        }
        
        /// <summary>
        /// Test UpdateUserPolicy
        /// </summary>
        [Test]
        public void UpdateUserPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //instance.UpdateUserPolicy(userId, UNKNOWN_BASE_TYPE);
            
        }
        
    }

}
