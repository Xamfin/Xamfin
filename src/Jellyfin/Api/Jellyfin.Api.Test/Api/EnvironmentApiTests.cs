/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Jellyfin.Api.Client;
using Jellyfin.Api.Api;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Test
{
    /// <summary>
    ///  Class for testing EnvironmentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class EnvironmentApiTests
    {
        private EnvironmentApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new EnvironmentApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of EnvironmentApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' EnvironmentApi
            //Assert.IsInstanceOf(typeof(EnvironmentApi), instance);
        }

        
        /// <summary>
        /// Test GetDefaultDirectoryBrowser
        /// </summary>
        [Test]
        public void GetDefaultDirectoryBrowserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetDefaultDirectoryBrowser();
            //Assert.IsInstanceOf(typeof(DefaultDirectoryBrowserInfoDto), response, "response is DefaultDirectoryBrowserInfoDto");
        }
        
        /// <summary>
        /// Test GetDirectoryContents
        /// </summary>
        [Test]
        public void GetDirectoryContentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //bool? includeFiles = null;
            //bool? includeDirectories = null;
            //var response = instance.GetDirectoryContents(path, includeFiles, includeDirectories);
            //Assert.IsInstanceOf(typeof(List<FileSystemEntryInfo>), response, "response is List<FileSystemEntryInfo>");
        }
        
        /// <summary>
        /// Test GetDrives
        /// </summary>
        [Test]
        public void GetDrivesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetDrives();
            //Assert.IsInstanceOf(typeof(List<FileSystemEntryInfo>), response, "response is List<FileSystemEntryInfo>");
        }
        
        /// <summary>
        /// Test GetNetworkShares
        /// </summary>
        [Test]
        public void GetNetworkSharesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetNetworkShares();
            //Assert.IsInstanceOf(typeof(List<FileSystemEntryInfo>), response, "response is List<FileSystemEntryInfo>");
        }
        
        /// <summary>
        /// Test GetParentPath
        /// </summary>
        [Test]
        public void GetParentPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //var response = instance.GetParentPath(path);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test ValidatePath
        /// </summary>
        [Test]
        public void ValidatePathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //instance.ValidatePath(UNKNOWN_BASE_TYPE);
            
        }
        
    }

}
