/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Jellyfin.Api.Client;
using Jellyfin.Api.Api;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Test
{
    /// <summary>
    ///  Class for testing DlnaServerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DlnaServerApiTests
    {
        private DlnaServerApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DlnaServerApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DlnaServerApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' DlnaServerApi
            //Assert.IsInstanceOf(typeof(DlnaServerApi), instance);
        }

        
        /// <summary>
        /// Test GetConnectionManager
        /// </summary>
        [Test]
        public void GetConnectionManagerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serverId = null;
            //var response = instance.GetConnectionManager(serverId);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetConnectionManager2
        /// </summary>
        [Test]
        public void GetConnectionManager2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serverId = null;
            //var response = instance.GetConnectionManager2(serverId);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetConnectionManager3
        /// </summary>
        [Test]
        public void GetConnectionManager3Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serverId = null;
            //var response = instance.GetConnectionManager3(serverId);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetContentDirectory
        /// </summary>
        [Test]
        public void GetContentDirectoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serverId = null;
            //var response = instance.GetContentDirectory(serverId);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetContentDirectory2
        /// </summary>
        [Test]
        public void GetContentDirectory2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serverId = null;
            //var response = instance.GetContentDirectory2(serverId);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetContentDirectory3
        /// </summary>
        [Test]
        public void GetContentDirectory3Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serverId = null;
            //var response = instance.GetContentDirectory3(serverId);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetDescriptionXml
        /// </summary>
        [Test]
        public void GetDescriptionXmlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serverId = null;
            //var response = instance.GetDescriptionXml(serverId);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetDescriptionXml2
        /// </summary>
        [Test]
        public void GetDescriptionXml2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serverId = null;
            //var response = instance.GetDescriptionXml2(serverId);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetIcon
        /// </summary>
        [Test]
        public void GetIconTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fileName = null;
            //var response = instance.GetIcon(fileName);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetIconId
        /// </summary>
        [Test]
        public void GetIconIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serverId = null;
            //string fileName = null;
            //var response = instance.GetIconId(serverId, fileName);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetMediaReceiverRegistrar
        /// </summary>
        [Test]
        public void GetMediaReceiverRegistrarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serverId = null;
            //var response = instance.GetMediaReceiverRegistrar(serverId);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetMediaReceiverRegistrar2
        /// </summary>
        [Test]
        public void GetMediaReceiverRegistrar2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serverId = null;
            //var response = instance.GetMediaReceiverRegistrar2(serverId);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetMediaReceiverRegistrar3
        /// </summary>
        [Test]
        public void GetMediaReceiverRegistrar3Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serverId = null;
            //var response = instance.GetMediaReceiverRegistrar3(serverId);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test ProcessConnectionManagerControlRequest
        /// </summary>
        [Test]
        public void ProcessConnectionManagerControlRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serverId = null;
            //var response = instance.ProcessConnectionManagerControlRequest(serverId);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test ProcessContentDirectoryControlRequest
        /// </summary>
        [Test]
        public void ProcessContentDirectoryControlRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serverId = null;
            //var response = instance.ProcessContentDirectoryControlRequest(serverId);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test ProcessMediaReceiverRegistrarControlRequest
        /// </summary>
        [Test]
        public void ProcessMediaReceiverRegistrarControlRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serverId = null;
            //var response = instance.ProcessMediaReceiverRegistrarControlRequest(serverId);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
    }

}
