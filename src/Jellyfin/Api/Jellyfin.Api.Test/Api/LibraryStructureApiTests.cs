/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Jellyfin.Api.Client;
using Jellyfin.Api.Api;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Test
{
    /// <summary>
    ///  Class for testing LibraryStructureApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class LibraryStructureApiTests
    {
        private LibraryStructureApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new LibraryStructureApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of LibraryStructureApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' LibraryStructureApi
            //Assert.IsInstanceOf(typeof(LibraryStructureApi), instance);
        }

        
        /// <summary>
        /// Test AddMediaPath
        /// </summary>
        [Test]
        public void AddMediaPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //bool? refreshLibrary = null;
            //instance.AddMediaPath(UNKNOWN_BASE_TYPE, refreshLibrary);
            
        }
        
        /// <summary>
        /// Test AddVirtualFolder
        /// </summary>
        [Test]
        public void AddVirtualFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //CollectionTypeOptions? collectionType = null;
            //List<string> paths = null;
            //bool? refreshLibrary = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //instance.AddVirtualFolder(name, collectionType, paths, refreshLibrary, UNKNOWN_BASE_TYPE);
            
        }
        
        /// <summary>
        /// Test GetVirtualFolders
        /// </summary>
        [Test]
        public void GetVirtualFoldersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetVirtualFolders();
            //Assert.IsInstanceOf(typeof(List<VirtualFolderInfo>), response, "response is List<VirtualFolderInfo>");
        }
        
        /// <summary>
        /// Test RemoveMediaPath
        /// </summary>
        [Test]
        public void RemoveMediaPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string path = null;
            //bool? refreshLibrary = null;
            //instance.RemoveMediaPath(name, path, refreshLibrary);
            
        }
        
        /// <summary>
        /// Test RemoveVirtualFolder
        /// </summary>
        [Test]
        public void RemoveVirtualFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //bool? refreshLibrary = null;
            //instance.RemoveVirtualFolder(name, refreshLibrary);
            
        }
        
        /// <summary>
        /// Test RenameVirtualFolder
        /// </summary>
        [Test]
        public void RenameVirtualFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string newName = null;
            //bool? refreshLibrary = null;
            //instance.RenameVirtualFolder(name, newName, refreshLibrary);
            
        }
        
        /// <summary>
        /// Test UpdateLibraryOptions
        /// </summary>
        [Test]
        public void UpdateLibraryOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //instance.UpdateLibraryOptions(UNKNOWN_BASE_TYPE);
            
        }
        
        /// <summary>
        /// Test UpdateMediaPath
        /// </summary>
        [Test]
        public void UpdateMediaPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //instance.UpdateMediaPath(UNKNOWN_BASE_TYPE);
            
        }
        
    }

}
