/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Jellyfin.Api.Client;
using Jellyfin.Api.Api;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Test
{
    /// <summary>
    ///  Class for testing SubtitleApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SubtitleApiTests
    {
        private SubtitleApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SubtitleApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SubtitleApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' SubtitleApi
            //Assert.IsInstanceOf(typeof(SubtitleApi), instance);
        }

        
        /// <summary>
        /// Test DeleteSubtitle
        /// </summary>
        [Test]
        public void DeleteSubtitleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //int index = null;
            //instance.DeleteSubtitle(itemId, index);
            
        }
        
        /// <summary>
        /// Test DownloadRemoteSubtitles
        /// </summary>
        [Test]
        public void DownloadRemoteSubtitlesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //string subtitleId = null;
            //instance.DownloadRemoteSubtitles(itemId, subtitleId);
            
        }
        
        /// <summary>
        /// Test GetFallbackFont
        /// </summary>
        [Test]
        public void GetFallbackFontTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.GetFallbackFont(name);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetFallbackFontList
        /// </summary>
        [Test]
        public void GetFallbackFontListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetFallbackFontList();
            //Assert.IsInstanceOf(typeof(List<FontFile>), response, "response is List<FontFile>");
        }
        
        /// <summary>
        /// Test GetRemoteSubtitles
        /// </summary>
        [Test]
        public void GetRemoteSubtitlesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetRemoteSubtitles(id);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetSubtitle
        /// </summary>
        [Test]
        public void GetSubtitleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid routeItemId = null;
            //string routeMediaSourceId = null;
            //int routeIndex = null;
            //string routeFormat = null;
            //Guid? itemId = null;
            //string mediaSourceId = null;
            //int? index = null;
            //string format = null;
            //long? endPositionTicks = null;
            //bool? copyTimestamps = null;
            //bool? addVttTimeMap = null;
            //long? startPositionTicks = null;
            //var response = instance.GetSubtitle(routeItemId, routeMediaSourceId, routeIndex, routeFormat, itemId, mediaSourceId, index, format, endPositionTicks, copyTimestamps, addVttTimeMap, startPositionTicks);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetSubtitlePlaylist
        /// </summary>
        [Test]
        public void GetSubtitlePlaylistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //int index = null;
            //string mediaSourceId = null;
            //int segmentLength = null;
            //var response = instance.GetSubtitlePlaylist(itemId, index, mediaSourceId, segmentLength);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetSubtitleWithTicks
        /// </summary>
        [Test]
        public void GetSubtitleWithTicksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid routeItemId = null;
            //string routeMediaSourceId = null;
            //int routeIndex = null;
            //long routeStartPositionTicks = null;
            //string routeFormat = null;
            //Guid? itemId = null;
            //string mediaSourceId = null;
            //int? index = null;
            //long? startPositionTicks = null;
            //string format = null;
            //long? endPositionTicks = null;
            //bool? copyTimestamps = null;
            //bool? addVttTimeMap = null;
            //var response = instance.GetSubtitleWithTicks(routeItemId, routeMediaSourceId, routeIndex, routeStartPositionTicks, routeFormat, itemId, mediaSourceId, index, startPositionTicks, format, endPositionTicks, copyTimestamps, addVttTimeMap);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test SearchRemoteSubtitles
        /// </summary>
        [Test]
        public void SearchRemoteSubtitlesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //string language = null;
            //bool? isPerfectMatch = null;
            //var response = instance.SearchRemoteSubtitles(itemId, language, isPerfectMatch);
            //Assert.IsInstanceOf(typeof(List<RemoteSubtitleInfo>), response, "response is List<RemoteSubtitleInfo>");
        }
        
        /// <summary>
        /// Test UploadSubtitle
        /// </summary>
        [Test]
        public void UploadSubtitleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //instance.UploadSubtitle(itemId, UNKNOWN_BASE_TYPE);
            
        }
        
    }

}
