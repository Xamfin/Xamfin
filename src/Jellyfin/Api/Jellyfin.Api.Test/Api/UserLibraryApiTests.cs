/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Jellyfin.Api.Client;
using Jellyfin.Api.Api;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Test
{
    /// <summary>
    ///  Class for testing UserLibraryApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UserLibraryApiTests
    {
        private UserLibraryApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UserLibraryApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UserLibraryApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' UserLibraryApi
            //Assert.IsInstanceOf(typeof(UserLibraryApi), instance);
        }

        
        /// <summary>
        /// Test DeleteUserItemRating
        /// </summary>
        [Test]
        public void DeleteUserItemRatingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //Guid itemId = null;
            //var response = instance.DeleteUserItemRating(userId, itemId);
            //Assert.IsInstanceOf(typeof(UserItemDataDto), response, "response is UserItemDataDto");
        }
        
        /// <summary>
        /// Test GetIntros
        /// </summary>
        [Test]
        public void GetIntrosTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //Guid itemId = null;
            //var response = instance.GetIntros(userId, itemId);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
        /// <summary>
        /// Test GetItem
        /// </summary>
        [Test]
        public void GetItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //Guid itemId = null;
            //var response = instance.GetItem(userId, itemId);
            //Assert.IsInstanceOf(typeof(BaseItemDto), response, "response is BaseItemDto");
        }
        
        /// <summary>
        /// Test GetLatestMedia
        /// </summary>
        [Test]
        public void GetLatestMediaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //Guid? parentId = null;
            //List<ItemFields> fields = null;
            //List<string> includeItemTypes = null;
            //bool? isPlayed = null;
            //bool? enableImages = null;
            //int? imageTypeLimit = null;
            //List<ImageType> enableImageTypes = null;
            //bool? enableUserData = null;
            //int? limit = null;
            //bool? groupItems = null;
            //var response = instance.GetLatestMedia(userId, parentId, fields, includeItemTypes, isPlayed, enableImages, imageTypeLimit, enableImageTypes, enableUserData, limit, groupItems);
            //Assert.IsInstanceOf(typeof(List<BaseItemDto>), response, "response is List<BaseItemDto>");
        }
        
        /// <summary>
        /// Test GetLocalTrailers
        /// </summary>
        [Test]
        public void GetLocalTrailersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //Guid itemId = null;
            //var response = instance.GetLocalTrailers(userId, itemId);
            //Assert.IsInstanceOf(typeof(List<BaseItemDto>), response, "response is List<BaseItemDto>");
        }
        
        /// <summary>
        /// Test GetRootFolder
        /// </summary>
        [Test]
        public void GetRootFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //var response = instance.GetRootFolder(userId);
            //Assert.IsInstanceOf(typeof(BaseItemDto), response, "response is BaseItemDto");
        }
        
        /// <summary>
        /// Test GetSpecialFeatures
        /// </summary>
        [Test]
        public void GetSpecialFeaturesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //Guid itemId = null;
            //var response = instance.GetSpecialFeatures(userId, itemId);
            //Assert.IsInstanceOf(typeof(List<BaseItemDto>), response, "response is List<BaseItemDto>");
        }
        
        /// <summary>
        /// Test MarkFavoriteItem
        /// </summary>
        [Test]
        public void MarkFavoriteItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //Guid itemId = null;
            //var response = instance.MarkFavoriteItem(userId, itemId);
            //Assert.IsInstanceOf(typeof(UserItemDataDto), response, "response is UserItemDataDto");
        }
        
        /// <summary>
        /// Test UnmarkFavoriteItem
        /// </summary>
        [Test]
        public void UnmarkFavoriteItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //Guid itemId = null;
            //var response = instance.UnmarkFavoriteItem(userId, itemId);
            //Assert.IsInstanceOf(typeof(UserItemDataDto), response, "response is UserItemDataDto");
        }
        
        /// <summary>
        /// Test UpdateUserItemRating
        /// </summary>
        [Test]
        public void UpdateUserItemRatingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //Guid itemId = null;
            //bool? likes = null;
            //var response = instance.UpdateUserItemRating(userId, itemId, likes);
            //Assert.IsInstanceOf(typeof(UserItemDataDto), response, "response is UserItemDataDto");
        }
        
    }

}
