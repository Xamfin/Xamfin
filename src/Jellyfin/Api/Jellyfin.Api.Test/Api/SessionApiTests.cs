/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Jellyfin.Api.Client;
using Jellyfin.Api.Api;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Test
{
    /// <summary>
    ///  Class for testing SessionApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SessionApiTests
    {
        private SessionApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SessionApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SessionApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' SessionApi
            //Assert.IsInstanceOf(typeof(SessionApi), instance);
        }

        
        /// <summary>
        /// Test AddUserToSession
        /// </summary>
        [Test]
        public void AddUserToSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //Guid userId = null;
            //instance.AddUserToSession(sessionId, userId);
            
        }
        
        /// <summary>
        /// Test DisplayContent
        /// </summary>
        [Test]
        public void DisplayContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //string itemType = null;
            //string itemId = null;
            //string itemName = null;
            //instance.DisplayContent(sessionId, itemType, itemId, itemName);
            
        }
        
        /// <summary>
        /// Test GetAuthProviders
        /// </summary>
        [Test]
        public void GetAuthProvidersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAuthProviders();
            //Assert.IsInstanceOf(typeof(List<NameIdPair>), response, "response is List<NameIdPair>");
        }
        
        /// <summary>
        /// Test GetPasswordResetProviders
        /// </summary>
        [Test]
        public void GetPasswordResetProvidersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPasswordResetProviders();
            //Assert.IsInstanceOf(typeof(List<NameIdPair>), response, "response is List<NameIdPair>");
        }
        
        /// <summary>
        /// Test GetSessions
        /// </summary>
        [Test]
        public void GetSessionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? controllableByUserId = null;
            //string deviceId = null;
            //int? activeWithinSeconds = null;
            //var response = instance.GetSessions(controllableByUserId, deviceId, activeWithinSeconds);
            //Assert.IsInstanceOf(typeof(List<SessionInfo>), response, "response is List<SessionInfo>");
        }
        
        /// <summary>
        /// Test Play
        /// </summary>
        [Test]
        public void PlayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //PlayCommand playCommand = null;
            //List<Guid> itemIds = null;
            //long? startPositionTicks = null;
            //string mediaSourceId = null;
            //int? audioStreamIndex = null;
            //int? subtitleStreamIndex = null;
            //int? startIndex = null;
            //instance.Play(sessionId, playCommand, itemIds, startPositionTicks, mediaSourceId, audioStreamIndex, subtitleStreamIndex, startIndex);
            
        }
        
        /// <summary>
        /// Test PostCapabilities
        /// </summary>
        [Test]
        public void PostCapabilitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string> playableMediaTypes = null;
            //List<GeneralCommandType> supportedCommands = null;
            //bool? supportsMediaControl = null;
            //bool? supportsSync = null;
            //bool? supportsPersistentIdentifier = null;
            //instance.PostCapabilities(id, playableMediaTypes, supportedCommands, supportsMediaControl, supportsSync, supportsPersistentIdentifier);
            
        }
        
        /// <summary>
        /// Test PostFullCapabilities
        /// </summary>
        [Test]
        public void PostFullCapabilitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //string id = null;
            //instance.PostFullCapabilities(UNKNOWN_BASE_TYPE, id);
            
        }
        
        /// <summary>
        /// Test RemoveUserFromSession
        /// </summary>
        [Test]
        public void RemoveUserFromSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //Guid userId = null;
            //instance.RemoveUserFromSession(sessionId, userId);
            
        }
        
        /// <summary>
        /// Test ReportSessionEnded
        /// </summary>
        [Test]
        public void ReportSessionEndedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.ReportSessionEnded();
            
        }
        
        /// <summary>
        /// Test ReportViewing
        /// </summary>
        [Test]
        public void ReportViewingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string itemId = null;
            //string sessionId = null;
            //instance.ReportViewing(itemId, sessionId);
            
        }
        
        /// <summary>
        /// Test SendFullGeneralCommand
        /// </summary>
        [Test]
        public void SendFullGeneralCommandTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //instance.SendFullGeneralCommand(sessionId, UNKNOWN_BASE_TYPE);
            
        }
        
        /// <summary>
        /// Test SendGeneralCommand
        /// </summary>
        [Test]
        public void SendGeneralCommandTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //GeneralCommandType command = null;
            //instance.SendGeneralCommand(sessionId, command);
            
        }
        
        /// <summary>
        /// Test SendMessageCommand
        /// </summary>
        [Test]
        public void SendMessageCommandTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //instance.SendMessageCommand(sessionId, UNKNOWN_BASE_TYPE);
            
        }
        
        /// <summary>
        /// Test SendPlaystateCommand
        /// </summary>
        [Test]
        public void SendPlaystateCommandTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //PlaystateCommand command = null;
            //long? seekPositionTicks = null;
            //string controllingUserId = null;
            //instance.SendPlaystateCommand(sessionId, command, seekPositionTicks, controllingUserId);
            
        }
        
        /// <summary>
        /// Test SendSystemCommand
        /// </summary>
        [Test]
        public void SendSystemCommandTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionId = null;
            //GeneralCommandType command = null;
            //instance.SendSystemCommand(sessionId, command);
            
        }
        
    }

}
