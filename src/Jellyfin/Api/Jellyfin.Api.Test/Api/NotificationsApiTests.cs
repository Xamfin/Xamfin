/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Jellyfin.Api.Client;
using Jellyfin.Api.Api;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Test
{
    /// <summary>
    ///  Class for testing NotificationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class NotificationsApiTests
    {
        private NotificationsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new NotificationsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of NotificationsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' NotificationsApi
            //Assert.IsInstanceOf(typeof(NotificationsApi), instance);
        }

        
        /// <summary>
        /// Test CreateAdminNotification
        /// </summary>
        [Test]
        public void CreateAdminNotificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //instance.CreateAdminNotification(UNKNOWN_BASE_TYPE);
            
        }
        
        /// <summary>
        /// Test GetNotificationServices
        /// </summary>
        [Test]
        public void GetNotificationServicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetNotificationServices();
            //Assert.IsInstanceOf(typeof(List<NameIdPair>), response, "response is List<NameIdPair>");
        }
        
        /// <summary>
        /// Test GetNotificationTypes
        /// </summary>
        [Test]
        public void GetNotificationTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetNotificationTypes();
            //Assert.IsInstanceOf(typeof(List<NotificationTypeInfo>), response, "response is List<NotificationTypeInfo>");
        }
        
        /// <summary>
        /// Test GetNotifications
        /// </summary>
        [Test]
        public void GetNotificationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.GetNotifications(userId);
            //Assert.IsInstanceOf(typeof(NotificationResultDto), response, "response is NotificationResultDto");
        }
        
        /// <summary>
        /// Test GetNotificationsSummary
        /// </summary>
        [Test]
        public void GetNotificationsSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.GetNotificationsSummary(userId);
            //Assert.IsInstanceOf(typeof(NotificationsSummaryDto), response, "response is NotificationsSummaryDto");
        }
        
        /// <summary>
        /// Test SetRead
        /// </summary>
        [Test]
        public void SetReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //instance.SetRead(userId);
            
        }
        
        /// <summary>
        /// Test SetUnread
        /// </summary>
        [Test]
        public void SetUnreadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //instance.SetUnread(userId);
            
        }
        
    }

}
