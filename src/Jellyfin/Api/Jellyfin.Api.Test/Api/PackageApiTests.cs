/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Jellyfin.Api.Client;
using Jellyfin.Api.Api;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Test
{
    /// <summary>
    ///  Class for testing PackageApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PackageApiTests
    {
        private PackageApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PackageApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PackageApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' PackageApi
            //Assert.IsInstanceOf(typeof(PackageApi), instance);
        }

        
        /// <summary>
        /// Test CancelPackageInstallation
        /// </summary>
        [Test]
        public void CancelPackageInstallationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid packageId = null;
            //instance.CancelPackageInstallation(packageId);
            
        }
        
        /// <summary>
        /// Test GetPackageInfo
        /// </summary>
        [Test]
        public void GetPackageInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Guid? assemblyGuid = null;
            //var response = instance.GetPackageInfo(name, assemblyGuid);
            //Assert.IsInstanceOf(typeof(PackageInfo), response, "response is PackageInfo");
        }
        
        /// <summary>
        /// Test GetPackages
        /// </summary>
        [Test]
        public void GetPackagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPackages();
            //Assert.IsInstanceOf(typeof(List<PackageInfo>), response, "response is List<PackageInfo>");
        }
        
        /// <summary>
        /// Test GetRepositories
        /// </summary>
        [Test]
        public void GetRepositoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetRepositories();
            //Assert.IsInstanceOf(typeof(List<RepositoryInfo>), response, "response is List<RepositoryInfo>");
        }
        
        /// <summary>
        /// Test InstallPackage
        /// </summary>
        [Test]
        public void InstallPackageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Guid? assemblyGuid = null;
            //string version = null;
            //string repositoryUrl = null;
            //instance.InstallPackage(name, assemblyGuid, version, repositoryUrl);
            
        }
        
        /// <summary>
        /// Test SetRepositories
        /// </summary>
        [Test]
        public void SetRepositoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<RepositoryInfo> repositoryInfo = null;
            //instance.SetRepositories(repositoryInfo);
            
        }
        
    }

}
