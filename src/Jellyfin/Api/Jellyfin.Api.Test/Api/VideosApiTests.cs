/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Jellyfin.Api.Client;
using Jellyfin.Api.Api;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Test
{
    /// <summary>
    ///  Class for testing VideosApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class VideosApiTests
    {
        private VideosApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new VideosApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of VideosApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' VideosApi
            //Assert.IsInstanceOf(typeof(VideosApi), instance);
        }

        
        /// <summary>
        /// Test DeleteAlternateSources
        /// </summary>
        [Test]
        public void DeleteAlternateSourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //instance.DeleteAlternateSources(itemId);
            
        }
        
        /// <summary>
        /// Test GetAdditionalPart
        /// </summary>
        [Test]
        public void GetAdditionalPartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //Guid? userId = null;
            //var response = instance.GetAdditionalPart(itemId, userId);
            //Assert.IsInstanceOf(typeof(BaseItemDtoQueryResult), response, "response is BaseItemDtoQueryResult");
        }
        
        /// <summary>
        /// Test GetVideoStream
        /// </summary>
        [Test]
        public void GetVideoStreamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //string container = null;
            //bool? _static = null;
            //string _params = null;
            //string tag = null;
            //string deviceProfileId = null;
            //string playSessionId = null;
            //string segmentContainer = null;
            //int? segmentLength = null;
            //int? minSegments = null;
            //string mediaSourceId = null;
            //string deviceId = null;
            //string audioCodec = null;
            //bool? enableAutoStreamCopy = null;
            //bool? allowVideoStreamCopy = null;
            //bool? allowAudioStreamCopy = null;
            //bool? breakOnNonKeyFrames = null;
            //int? audioSampleRate = null;
            //int? maxAudioBitDepth = null;
            //int? audioBitRate = null;
            //int? audioChannels = null;
            //int? maxAudioChannels = null;
            //string profile = null;
            //string level = null;
            //float? framerate = null;
            //float? maxFramerate = null;
            //bool? copyTimestamps = null;
            //long? startTimeTicks = null;
            //int? width = null;
            //int? height = null;
            //int? videoBitRate = null;
            //int? subtitleStreamIndex = null;
            //SubtitleDeliveryMethod? subtitleMethod = null;
            //int? maxRefFrames = null;
            //int? maxVideoBitDepth = null;
            //bool? requireAvc = null;
            //bool? deInterlace = null;
            //bool? requireNonAnamorphic = null;
            //int? transcodingMaxAudioChannels = null;
            //int? cpuCoreLimit = null;
            //string liveStreamId = null;
            //bool? enableMpegtsM2TsMode = null;
            //string videoCodec = null;
            //string subtitleCodec = null;
            //string transcodeReasons = null;
            //int? audioStreamIndex = null;
            //int? videoStreamIndex = null;
            //EncodingContext? context = null;
            //Dictionary<string, string> streamOptions = null;
            //var response = instance.GetVideoStream(itemId, container, _static, _params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetVideoStreamByContainer
        /// </summary>
        [Test]
        public void GetVideoStreamByContainerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //string container = null;
            //bool? _static = null;
            //string _params = null;
            //string tag = null;
            //string deviceProfileId = null;
            //string playSessionId = null;
            //string segmentContainer = null;
            //int? segmentLength = null;
            //int? minSegments = null;
            //string mediaSourceId = null;
            //string deviceId = null;
            //string audioCodec = null;
            //bool? enableAutoStreamCopy = null;
            //bool? allowVideoStreamCopy = null;
            //bool? allowAudioStreamCopy = null;
            //bool? breakOnNonKeyFrames = null;
            //int? audioSampleRate = null;
            //int? maxAudioBitDepth = null;
            //int? audioBitRate = null;
            //int? audioChannels = null;
            //int? maxAudioChannels = null;
            //string profile = null;
            //string level = null;
            //float? framerate = null;
            //float? maxFramerate = null;
            //bool? copyTimestamps = null;
            //long? startTimeTicks = null;
            //int? width = null;
            //int? height = null;
            //int? videoBitRate = null;
            //int? subtitleStreamIndex = null;
            //SubtitleDeliveryMethod? subtitleMethod = null;
            //int? maxRefFrames = null;
            //int? maxVideoBitDepth = null;
            //bool? requireAvc = null;
            //bool? deInterlace = null;
            //bool? requireNonAnamorphic = null;
            //int? transcodingMaxAudioChannels = null;
            //int? cpuCoreLimit = null;
            //string liveStreamId = null;
            //bool? enableMpegtsM2TsMode = null;
            //string videoCodec = null;
            //string subtitleCodec = null;
            //string transcodeReasons = null;
            //int? audioStreamIndex = null;
            //int? videoStreamIndex = null;
            //EncodingContext? context = null;
            //Dictionary<string, string> streamOptions = null;
            //var response = instance.GetVideoStreamByContainer(itemId, container, _static, _params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test HeadVideoStream
        /// </summary>
        [Test]
        public void HeadVideoStreamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //string container = null;
            //bool? _static = null;
            //string _params = null;
            //string tag = null;
            //string deviceProfileId = null;
            //string playSessionId = null;
            //string segmentContainer = null;
            //int? segmentLength = null;
            //int? minSegments = null;
            //string mediaSourceId = null;
            //string deviceId = null;
            //string audioCodec = null;
            //bool? enableAutoStreamCopy = null;
            //bool? allowVideoStreamCopy = null;
            //bool? allowAudioStreamCopy = null;
            //bool? breakOnNonKeyFrames = null;
            //int? audioSampleRate = null;
            //int? maxAudioBitDepth = null;
            //int? audioBitRate = null;
            //int? audioChannels = null;
            //int? maxAudioChannels = null;
            //string profile = null;
            //string level = null;
            //float? framerate = null;
            //float? maxFramerate = null;
            //bool? copyTimestamps = null;
            //long? startTimeTicks = null;
            //int? width = null;
            //int? height = null;
            //int? videoBitRate = null;
            //int? subtitleStreamIndex = null;
            //SubtitleDeliveryMethod? subtitleMethod = null;
            //int? maxRefFrames = null;
            //int? maxVideoBitDepth = null;
            //bool? requireAvc = null;
            //bool? deInterlace = null;
            //bool? requireNonAnamorphic = null;
            //int? transcodingMaxAudioChannels = null;
            //int? cpuCoreLimit = null;
            //string liveStreamId = null;
            //bool? enableMpegtsM2TsMode = null;
            //string videoCodec = null;
            //string subtitleCodec = null;
            //string transcodeReasons = null;
            //int? audioStreamIndex = null;
            //int? videoStreamIndex = null;
            //EncodingContext? context = null;
            //Dictionary<string, string> streamOptions = null;
            //var response = instance.HeadVideoStream(itemId, container, _static, _params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test HeadVideoStreamByContainer
        /// </summary>
        [Test]
        public void HeadVideoStreamByContainerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid itemId = null;
            //string container = null;
            //bool? _static = null;
            //string _params = null;
            //string tag = null;
            //string deviceProfileId = null;
            //string playSessionId = null;
            //string segmentContainer = null;
            //int? segmentLength = null;
            //int? minSegments = null;
            //string mediaSourceId = null;
            //string deviceId = null;
            //string audioCodec = null;
            //bool? enableAutoStreamCopy = null;
            //bool? allowVideoStreamCopy = null;
            //bool? allowAudioStreamCopy = null;
            //bool? breakOnNonKeyFrames = null;
            //int? audioSampleRate = null;
            //int? maxAudioBitDepth = null;
            //int? audioBitRate = null;
            //int? audioChannels = null;
            //int? maxAudioChannels = null;
            //string profile = null;
            //string level = null;
            //float? framerate = null;
            //float? maxFramerate = null;
            //bool? copyTimestamps = null;
            //long? startTimeTicks = null;
            //int? width = null;
            //int? height = null;
            //int? videoBitRate = null;
            //int? subtitleStreamIndex = null;
            //SubtitleDeliveryMethod? subtitleMethod = null;
            //int? maxRefFrames = null;
            //int? maxVideoBitDepth = null;
            //bool? requireAvc = null;
            //bool? deInterlace = null;
            //bool? requireNonAnamorphic = null;
            //int? transcodingMaxAudioChannels = null;
            //int? cpuCoreLimit = null;
            //string liveStreamId = null;
            //bool? enableMpegtsM2TsMode = null;
            //string videoCodec = null;
            //string subtitleCodec = null;
            //string transcodeReasons = null;
            //int? audioStreamIndex = null;
            //int? videoStreamIndex = null;
            //EncodingContext? context = null;
            //Dictionary<string, string> streamOptions = null;
            //var response = instance.HeadVideoStreamByContainer(itemId, container, _static, _params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test MergeVersions
        /// </summary>
        [Test]
        public void MergeVersionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<Guid> ids = null;
            //instance.MergeVersions(ids);
            
        }
        
    }

}
