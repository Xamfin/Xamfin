/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Jellyfin.Api.Client;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get person by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <returns>BaseItemDto</returns>
        BaseItemDto GetPerson (string name, Guid? userId = default(Guid?));

        /// <summary>
        /// Get person by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <returns>ApiResponse of BaseItemDto</returns>
        ApiResponse<BaseItemDto> GetPersonWithHttpInfo (string name, Guid? userId = default(Guid?));
        /// <summary>
        /// Gets all persons.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="searchTerm">The search term. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. userId is required. (optional)</param>
        /// <param name="enableUserData">Optional, include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="excludePersonTypes">Optional. If specified results will be filtered to exclude those containing the specified PersonType. Allows multiple, comma-delimited. (optional)</param>
        /// <param name="personTypes">Optional. If specified results will be filtered to include only those containing the specified PersonType. Allows multiple, comma-delimited. (optional)</param>
        /// <param name="appearsInItemId">Optional. If specified, person results will be filtered on items related to said persons. (optional)</param>
        /// <param name="userId">User id. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output. (optional, default to true)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetPersons (int? limit = default(int?), string searchTerm = default(string), List<ItemFields> fields = default(List<ItemFields>), List<ItemFilter> filters = default(List<ItemFilter>), bool? isFavorite = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<string> excludePersonTypes = default(List<string>), List<string> personTypes = default(List<string>), Guid? appearsInItemId = default(Guid?), Guid? userId = default(Guid?), bool? enableImages = default(bool?));

        /// <summary>
        /// Gets all persons.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="searchTerm">The search term. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. userId is required. (optional)</param>
        /// <param name="enableUserData">Optional, include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="excludePersonTypes">Optional. If specified results will be filtered to exclude those containing the specified PersonType. Allows multiple, comma-delimited. (optional)</param>
        /// <param name="personTypes">Optional. If specified results will be filtered to include only those containing the specified PersonType. Allows multiple, comma-delimited. (optional)</param>
        /// <param name="appearsInItemId">Optional. If specified, person results will be filtered on items related to said persons. (optional)</param>
        /// <param name="userId">User id. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output. (optional, default to true)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetPersonsWithHttpInfo (int? limit = default(int?), string searchTerm = default(string), List<ItemFields> fields = default(List<ItemFields>), List<ItemFilter> filters = default(List<ItemFilter>), bool? isFavorite = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<string> excludePersonTypes = default(List<string>), List<string> personTypes = default(List<string>), Guid? appearsInItemId = default(Guid?), Guid? userId = default(Guid?), bool? enableImages = default(bool?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get person by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDto</returns>
        System.Threading.Tasks.Task<BaseItemDto> GetPersonAsync (string name, Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get person by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDto>> GetPersonWithHttpInfoAsync (string name, Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets all persons.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="searchTerm">The search term. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. userId is required. (optional)</param>
        /// <param name="enableUserData">Optional, include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="excludePersonTypes">Optional. If specified results will be filtered to exclude those containing the specified PersonType. Allows multiple, comma-delimited. (optional)</param>
        /// <param name="personTypes">Optional. If specified results will be filtered to include only those containing the specified PersonType. Allows multiple, comma-delimited. (optional)</param>
        /// <param name="appearsInItemId">Optional. If specified, person results will be filtered on items related to said persons. (optional)</param>
        /// <param name="userId">User id. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetPersonsAsync (int? limit = default(int?), string searchTerm = default(string), List<ItemFields> fields = default(List<ItemFields>), List<ItemFilter> filters = default(List<ItemFilter>), bool? isFavorite = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<string> excludePersonTypes = default(List<string>), List<string> personTypes = default(List<string>), Guid? appearsInItemId = default(Guid?), Guid? userId = default(Guid?), bool? enableImages = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all persons.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="searchTerm">The search term. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. userId is required. (optional)</param>
        /// <param name="enableUserData">Optional, include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="excludePersonTypes">Optional. If specified results will be filtered to exclude those containing the specified PersonType. Allows multiple, comma-delimited. (optional)</param>
        /// <param name="personTypes">Optional. If specified results will be filtered to include only those containing the specified PersonType. Allows multiple, comma-delimited. (optional)</param>
        /// <param name="appearsInItemId">Optional. If specified, person results will be filtered on items related to said persons. (optional)</param>
        /// <param name="userId">User id. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetPersonsWithHttpInfoAsync (int? limit = default(int?), string searchTerm = default(string), List<ItemFields> fields = default(List<ItemFields>), List<ItemFilter> filters = default(List<ItemFilter>), bool? isFavorite = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<string> excludePersonTypes = default(List<string>), List<string> personTypes = default(List<string>), Guid? appearsInItemId = default(Guid?), Guid? userId = default(Guid?), bool? enableImages = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PersonsApi : IPersonsApi
    {
        private Jellyfin.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PersonsApi(String basePath)
        {
            this.Configuration = new Jellyfin.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonsApi"/> class
        /// </summary>
        /// <returns></returns>
        public PersonsApi()
        {
            this.Configuration = Jellyfin.Api.Client.Configuration.Default;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PersonsApi(Jellyfin.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Jellyfin.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Jellyfin.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Jellyfin.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get person by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <returns>BaseItemDto</returns>
        public BaseItemDto GetPerson (string name, Guid? userId = default(Guid?))
        {
             ApiResponse<BaseItemDto> localVarResponse = GetPersonWithHttpInfo(name, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get person by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <returns>ApiResponse of BaseItemDto</returns>
        public ApiResponse<BaseItemDto> GetPersonWithHttpInfo (string name, Guid? userId = default(Guid?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PersonsApi->GetPerson");

            var localVarPath = "/Persons/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDto)));
        }

        /// <summary>
        /// Get person by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDto</returns>
        public async System.Threading.Tasks.Task<BaseItemDto> GetPersonAsync (string name, Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDto> localVarResponse = await GetPersonWithHttpInfoAsync(name, userId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get person by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDto>> GetPersonWithHttpInfoAsync (string name, Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PersonsApi->GetPerson");

            var localVarPath = "/Persons/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDto)));
        }

        /// <summary>
        /// Gets all persons. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="searchTerm">The search term. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. userId is required. (optional)</param>
        /// <param name="enableUserData">Optional, include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="excludePersonTypes">Optional. If specified results will be filtered to exclude those containing the specified PersonType. Allows multiple, comma-delimited. (optional)</param>
        /// <param name="personTypes">Optional. If specified results will be filtered to include only those containing the specified PersonType. Allows multiple, comma-delimited. (optional)</param>
        /// <param name="appearsInItemId">Optional. If specified, person results will be filtered on items related to said persons. (optional)</param>
        /// <param name="userId">User id. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output. (optional, default to true)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetPersons (int? limit = default(int?), string searchTerm = default(string), List<ItemFields> fields = default(List<ItemFields>), List<ItemFilter> filters = default(List<ItemFilter>), bool? isFavorite = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<string> excludePersonTypes = default(List<string>), List<string> personTypes = default(List<string>), Guid? appearsInItemId = default(Guid?), Guid? userId = default(Guid?), bool? enableImages = default(bool?))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetPersonsWithHttpInfo(limit, searchTerm, fields, filters, isFavorite, enableUserData, imageTypeLimit, enableImageTypes, excludePersonTypes, personTypes, appearsInItemId, userId, enableImages);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all persons. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="searchTerm">The search term. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. userId is required. (optional)</param>
        /// <param name="enableUserData">Optional, include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="excludePersonTypes">Optional. If specified results will be filtered to exclude those containing the specified PersonType. Allows multiple, comma-delimited. (optional)</param>
        /// <param name="personTypes">Optional. If specified results will be filtered to include only those containing the specified PersonType. Allows multiple, comma-delimited. (optional)</param>
        /// <param name="appearsInItemId">Optional. If specified, person results will be filtered on items related to said persons. (optional)</param>
        /// <param name="userId">User id. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output. (optional, default to true)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetPersonsWithHttpInfo (int? limit = default(int?), string searchTerm = default(string), List<ItemFields> fields = default(List<ItemFields>), List<ItemFilter> filters = default(List<ItemFilter>), bool? isFavorite = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<string> excludePersonTypes = default(List<string>), List<string> personTypes = default(List<string>), Guid? appearsInItemId = default(Guid?), Guid? userId = default(Guid?), bool? enableImages = default(bool?))
        {

            var localVarPath = "/Persons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "filters", filters)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isFavorite", isFavorite)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter
            if (excludePersonTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "excludePersonTypes", excludePersonTypes)); // query parameter
            if (personTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "personTypes", personTypes)); // query parameter
            if (appearsInItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appearsInItemId", appearsInItemId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPersons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets all persons. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="searchTerm">The search term. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. userId is required. (optional)</param>
        /// <param name="enableUserData">Optional, include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="excludePersonTypes">Optional. If specified results will be filtered to exclude those containing the specified PersonType. Allows multiple, comma-delimited. (optional)</param>
        /// <param name="personTypes">Optional. If specified results will be filtered to include only those containing the specified PersonType. Allows multiple, comma-delimited. (optional)</param>
        /// <param name="appearsInItemId">Optional. If specified, person results will be filtered on items related to said persons. (optional)</param>
        /// <param name="userId">User id. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetPersonsAsync (int? limit = default(int?), string searchTerm = default(string), List<ItemFields> fields = default(List<ItemFields>), List<ItemFilter> filters = default(List<ItemFilter>), bool? isFavorite = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<string> excludePersonTypes = default(List<string>), List<string> personTypes = default(List<string>), Guid? appearsInItemId = default(Guid?), Guid? userId = default(Guid?), bool? enableImages = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetPersonsWithHttpInfoAsync(limit, searchTerm, fields, filters, isFavorite, enableUserData, imageTypeLimit, enableImageTypes, excludePersonTypes, personTypes, appearsInItemId, userId, enableImages, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all persons. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="searchTerm">The search term. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. userId is required. (optional)</param>
        /// <param name="enableUserData">Optional, include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="excludePersonTypes">Optional. If specified results will be filtered to exclude those containing the specified PersonType. Allows multiple, comma-delimited. (optional)</param>
        /// <param name="personTypes">Optional. If specified results will be filtered to include only those containing the specified PersonType. Allows multiple, comma-delimited. (optional)</param>
        /// <param name="appearsInItemId">Optional. If specified, person results will be filtered on items related to said persons. (optional)</param>
        /// <param name="userId">User id. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetPersonsWithHttpInfoAsync (int? limit = default(int?), string searchTerm = default(string), List<ItemFields> fields = default(List<ItemFields>), List<ItemFilter> filters = default(List<ItemFilter>), bool? isFavorite = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<string> excludePersonTypes = default(List<string>), List<string> personTypes = default(List<string>), Guid? appearsInItemId = default(Guid?), Guid? userId = default(Guid?), bool? enableImages = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Persons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "filters", filters)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isFavorite", isFavorite)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter
            if (excludePersonTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "excludePersonTypes", excludePersonTypes)); // query parameter
            if (personTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "personTypes", personTypes)); // query parameter
            if (appearsInItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appearsInItemId", appearsInItemId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPersons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

    }
}
