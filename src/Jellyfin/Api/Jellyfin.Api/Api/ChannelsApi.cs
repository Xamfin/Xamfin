/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Jellyfin.Api.Client;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get all channel features.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ChannelFeatures&gt;</returns>
        List<ChannelFeatures> GetAllChannelFeatures ();

        /// <summary>
        /// Get all channel features.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ChannelFeatures&gt;</returns>
        ApiResponse<List<ChannelFeatures>> GetAllChannelFeaturesWithHttpInfo ();
        /// <summary>
        /// Get channel features.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel id.</param>
        /// <returns>ChannelFeatures</returns>
        ChannelFeatures GetChannelFeatures (Guid channelId);

        /// <summary>
        /// Get channel features.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel id.</param>
        /// <returns>ApiResponse of ChannelFeatures</returns>
        ApiResponse<ChannelFeatures> GetChannelFeaturesWithHttpInfo (Guid channelId);
        /// <summary>
        /// Get channel items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel Id.</param>
        /// <param name="folderId">Optional. Folder Id. (optional)</param>
        /// <param name="userId">Optional. User Id. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="sortOrder">Optional. Sort Order - Ascending,Descending. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetChannelItems (Guid channelId, Guid? folderId = default(Guid?), Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<SortOrder> sortOrder = default(List<SortOrder>), List<ItemFilter> filters = default(List<ItemFilter>), List<string> sortBy = default(List<string>), List<ItemFields> fields = default(List<ItemFields>));

        /// <summary>
        /// Get channel items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel Id.</param>
        /// <param name="folderId">Optional. Folder Id. (optional)</param>
        /// <param name="userId">Optional. User Id. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="sortOrder">Optional. Sort Order - Ascending,Descending. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetChannelItemsWithHttpInfo (Guid channelId, Guid? folderId = default(Guid?), Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<SortOrder> sortOrder = default(List<SortOrder>), List<ItemFilter> filters = default(List<ItemFilter>), List<string> sortBy = default(List<string>), List<ItemFields> fields = default(List<ItemFields>));
        /// <summary>
        /// Gets available channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id to filter by. Use System.Guid.Empty to not filter by user. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="supportsLatestItems">Optional. Filter by channels that support getting latest items. (optional)</param>
        /// <param name="supportsMediaDeletion">Optional. Filter by channels that support media deletion. (optional)</param>
        /// <param name="isFavorite">Optional. Filter by channels that are favorite. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetChannels (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), bool? supportsLatestItems = default(bool?), bool? supportsMediaDeletion = default(bool?), bool? isFavorite = default(bool?));

        /// <summary>
        /// Gets available channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id to filter by. Use System.Guid.Empty to not filter by user. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="supportsLatestItems">Optional. Filter by channels that support getting latest items. (optional)</param>
        /// <param name="supportsMediaDeletion">Optional. Filter by channels that support media deletion. (optional)</param>
        /// <param name="isFavorite">Optional. Filter by channels that are favorite. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetChannelsWithHttpInfo (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), bool? supportsLatestItems = default(bool?), bool? supportsMediaDeletion = default(bool?), bool? isFavorite = default(bool?));
        /// <summary>
        /// Gets latest channel items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User Id. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="channelIds">Optional. Specify one or more channel id&#39;s, comma delimited. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetLatestChannelItems (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFilter> filters = default(List<ItemFilter>), List<ItemFields> fields = default(List<ItemFields>), List<Guid> channelIds = default(List<Guid>));

        /// <summary>
        /// Gets latest channel items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User Id. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="channelIds">Optional. Specify one or more channel id&#39;s, comma delimited. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetLatestChannelItemsWithHttpInfo (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFilter> filters = default(List<ItemFilter>), List<ItemFields> fields = default(List<ItemFields>), List<Guid> channelIds = default(List<Guid>));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get all channel features.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ChannelFeatures&gt;</returns>
        System.Threading.Tasks.Task<List<ChannelFeatures>> GetAllChannelFeaturesAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all channel features.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ChannelFeatures&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChannelFeatures>>> GetAllChannelFeaturesWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get channel features.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ChannelFeatures</returns>
        System.Threading.Tasks.Task<ChannelFeatures> GetChannelFeaturesAsync (Guid channelId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get channel features.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ChannelFeatures)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelFeatures>> GetChannelFeaturesWithHttpInfoAsync (Guid channelId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get channel items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel Id.</param>
        /// <param name="folderId">Optional. Folder Id. (optional)</param>
        /// <param name="userId">Optional. User Id. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="sortOrder">Optional. Sort Order - Ascending,Descending. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetChannelItemsAsync (Guid channelId, Guid? folderId = default(Guid?), Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<SortOrder> sortOrder = default(List<SortOrder>), List<ItemFilter> filters = default(List<ItemFilter>), List<string> sortBy = default(List<string>), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get channel items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel Id.</param>
        /// <param name="folderId">Optional. Folder Id. (optional)</param>
        /// <param name="userId">Optional. User Id. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="sortOrder">Optional. Sort Order - Ascending,Descending. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetChannelItemsWithHttpInfoAsync (Guid channelId, Guid? folderId = default(Guid?), Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<SortOrder> sortOrder = default(List<SortOrder>), List<ItemFilter> filters = default(List<ItemFilter>), List<string> sortBy = default(List<string>), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets available channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id to filter by. Use System.Guid.Empty to not filter by user. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="supportsLatestItems">Optional. Filter by channels that support getting latest items. (optional)</param>
        /// <param name="supportsMediaDeletion">Optional. Filter by channels that support media deletion. (optional)</param>
        /// <param name="isFavorite">Optional. Filter by channels that are favorite. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetChannelsAsync (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), bool? supportsLatestItems = default(bool?), bool? supportsMediaDeletion = default(bool?), bool? isFavorite = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets available channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id to filter by. Use System.Guid.Empty to not filter by user. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="supportsLatestItems">Optional. Filter by channels that support getting latest items. (optional)</param>
        /// <param name="supportsMediaDeletion">Optional. Filter by channels that support media deletion. (optional)</param>
        /// <param name="isFavorite">Optional. Filter by channels that are favorite. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetChannelsWithHttpInfoAsync (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), bool? supportsLatestItems = default(bool?), bool? supportsMediaDeletion = default(bool?), bool? isFavorite = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets latest channel items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User Id. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="channelIds">Optional. Specify one or more channel id&#39;s, comma delimited. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetLatestChannelItemsAsync (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFilter> filters = default(List<ItemFilter>), List<ItemFields> fields = default(List<ItemFields>), List<Guid> channelIds = default(List<Guid>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets latest channel items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User Id. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="channelIds">Optional. Specify one or more channel id&#39;s, comma delimited. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetLatestChannelItemsWithHttpInfoAsync (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFilter> filters = default(List<ItemFilter>), List<ItemFields> fields = default(List<ItemFields>), List<Guid> channelIds = default(List<Guid>), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChannelsApi : IChannelsApi
    {
        private Jellyfin.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChannelsApi(String basePath)
        {
            this.Configuration = new Jellyfin.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ChannelsApi()
        {
            this.Configuration = Jellyfin.Api.Client.Configuration.Default;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChannelsApi(Jellyfin.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Jellyfin.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Jellyfin.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Jellyfin.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get all channel features. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ChannelFeatures&gt;</returns>
        public List<ChannelFeatures> GetAllChannelFeatures ()
        {
             ApiResponse<List<ChannelFeatures>> localVarResponse = GetAllChannelFeaturesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all channel features. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ChannelFeatures&gt;</returns>
        public ApiResponse<List<ChannelFeatures>> GetAllChannelFeaturesWithHttpInfo ()
        {

            var localVarPath = "/Channels/Features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllChannelFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChannelFeatures>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ChannelFeatures>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChannelFeatures>)));
        }

        /// <summary>
        /// Get all channel features. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ChannelFeatures&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChannelFeatures>> GetAllChannelFeaturesAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<ChannelFeatures>> localVarResponse = await GetAllChannelFeaturesWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all channel features. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ChannelFeatures&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ChannelFeatures>>> GetAllChannelFeaturesWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Channels/Features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllChannelFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChannelFeatures>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ChannelFeatures>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChannelFeatures>)));
        }

        /// <summary>
        /// Get channel features. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel id.</param>
        /// <returns>ChannelFeatures</returns>
        public ChannelFeatures GetChannelFeatures (Guid channelId)
        {
             ApiResponse<ChannelFeatures> localVarResponse = GetChannelFeaturesWithHttpInfo(channelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get channel features. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel id.</param>
        /// <returns>ApiResponse of ChannelFeatures</returns>
        public ApiResponse<ChannelFeatures> GetChannelFeaturesWithHttpInfo (Guid channelId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->GetChannelFeatures");

            var localVarPath = "/Channels/{channelId}/Features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelId != null) localVarPathParams.Add("channelId", this.Configuration.ApiClient.ParameterToString(channelId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChannelFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelFeatures>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ChannelFeatures) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelFeatures)));
        }

        /// <summary>
        /// Get channel features. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ChannelFeatures</returns>
        public async System.Threading.Tasks.Task<ChannelFeatures> GetChannelFeaturesAsync (Guid channelId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ChannelFeatures> localVarResponse = await GetChannelFeaturesWithHttpInfoAsync(channelId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get channel features. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ChannelFeatures)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChannelFeatures>> GetChannelFeaturesWithHttpInfoAsync (Guid channelId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->GetChannelFeatures");

            var localVarPath = "/Channels/{channelId}/Features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelId != null) localVarPathParams.Add("channelId", this.Configuration.ApiClient.ParameterToString(channelId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChannelFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelFeatures>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ChannelFeatures) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelFeatures)));
        }

        /// <summary>
        /// Get channel items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel Id.</param>
        /// <param name="folderId">Optional. Folder Id. (optional)</param>
        /// <param name="userId">Optional. User Id. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="sortOrder">Optional. Sort Order - Ascending,Descending. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetChannelItems (Guid channelId, Guid? folderId = default(Guid?), Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<SortOrder> sortOrder = default(List<SortOrder>), List<ItemFilter> filters = default(List<ItemFilter>), List<string> sortBy = default(List<string>), List<ItemFields> fields = default(List<ItemFields>))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetChannelItemsWithHttpInfo(channelId, folderId, userId, startIndex, limit, sortOrder, filters, sortBy, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get channel items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel Id.</param>
        /// <param name="folderId">Optional. Folder Id. (optional)</param>
        /// <param name="userId">Optional. User Id. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="sortOrder">Optional. Sort Order - Ascending,Descending. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetChannelItemsWithHttpInfo (Guid channelId, Guid? folderId = default(Guid?), Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<SortOrder> sortOrder = default(List<SortOrder>), List<ItemFilter> filters = default(List<ItemFilter>), List<string> sortBy = default(List<string>), List<ItemFields> fields = default(List<ItemFields>))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->GetChannelItems");

            var localVarPath = "/Channels/{channelId}/Items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelId != null) localVarPathParams.Add("channelId", this.Configuration.ApiClient.ParameterToString(channelId)); // path parameter
            if (folderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "folderId", folderId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortOrder", sortOrder)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "filters", filters)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChannelItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Get channel items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel Id.</param>
        /// <param name="folderId">Optional. Folder Id. (optional)</param>
        /// <param name="userId">Optional. User Id. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="sortOrder">Optional. Sort Order - Ascending,Descending. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetChannelItemsAsync (Guid channelId, Guid? folderId = default(Guid?), Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<SortOrder> sortOrder = default(List<SortOrder>), List<ItemFilter> filters = default(List<ItemFilter>), List<string> sortBy = default(List<string>), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetChannelItemsWithHttpInfoAsync(channelId, folderId, userId, startIndex, limit, sortOrder, filters, sortBy, fields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get channel items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel Id.</param>
        /// <param name="folderId">Optional. Folder Id. (optional)</param>
        /// <param name="userId">Optional. User Id. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="sortOrder">Optional. Sort Order - Ascending,Descending. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetChannelItemsWithHttpInfoAsync (Guid channelId, Guid? folderId = default(Guid?), Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<SortOrder> sortOrder = default(List<SortOrder>), List<ItemFilter> filters = default(List<ItemFilter>), List<string> sortBy = default(List<string>), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->GetChannelItems");

            var localVarPath = "/Channels/{channelId}/Items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelId != null) localVarPathParams.Add("channelId", this.Configuration.ApiClient.ParameterToString(channelId)); // path parameter
            if (folderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "folderId", folderId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortOrder", sortOrder)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "filters", filters)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChannelItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets available channels. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id to filter by. Use System.Guid.Empty to not filter by user. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="supportsLatestItems">Optional. Filter by channels that support getting latest items. (optional)</param>
        /// <param name="supportsMediaDeletion">Optional. Filter by channels that support media deletion. (optional)</param>
        /// <param name="isFavorite">Optional. Filter by channels that are favorite. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetChannels (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), bool? supportsLatestItems = default(bool?), bool? supportsMediaDeletion = default(bool?), bool? isFavorite = default(bool?))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetChannelsWithHttpInfo(userId, startIndex, limit, supportsLatestItems, supportsMediaDeletion, isFavorite);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets available channels. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id to filter by. Use System.Guid.Empty to not filter by user. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="supportsLatestItems">Optional. Filter by channels that support getting latest items. (optional)</param>
        /// <param name="supportsMediaDeletion">Optional. Filter by channels that support media deletion. (optional)</param>
        /// <param name="isFavorite">Optional. Filter by channels that are favorite. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetChannelsWithHttpInfo (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), bool? supportsLatestItems = default(bool?), bool? supportsMediaDeletion = default(bool?), bool? isFavorite = default(bool?))
        {

            var localVarPath = "/Channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (supportsLatestItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "supportsLatestItems", supportsLatestItems)); // query parameter
            if (supportsMediaDeletion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "supportsMediaDeletion", supportsMediaDeletion)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isFavorite", isFavorite)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets available channels. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id to filter by. Use System.Guid.Empty to not filter by user. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="supportsLatestItems">Optional. Filter by channels that support getting latest items. (optional)</param>
        /// <param name="supportsMediaDeletion">Optional. Filter by channels that support media deletion. (optional)</param>
        /// <param name="isFavorite">Optional. Filter by channels that are favorite. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetChannelsAsync (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), bool? supportsLatestItems = default(bool?), bool? supportsMediaDeletion = default(bool?), bool? isFavorite = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetChannelsWithHttpInfoAsync(userId, startIndex, limit, supportsLatestItems, supportsMediaDeletion, isFavorite, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets available channels. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id to filter by. Use System.Guid.Empty to not filter by user. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="supportsLatestItems">Optional. Filter by channels that support getting latest items. (optional)</param>
        /// <param name="supportsMediaDeletion">Optional. Filter by channels that support media deletion. (optional)</param>
        /// <param name="isFavorite">Optional. Filter by channels that are favorite. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetChannelsWithHttpInfoAsync (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), bool? supportsLatestItems = default(bool?), bool? supportsMediaDeletion = default(bool?), bool? isFavorite = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (supportsLatestItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "supportsLatestItems", supportsLatestItems)); // query parameter
            if (supportsMediaDeletion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "supportsMediaDeletion", supportsMediaDeletion)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isFavorite", isFavorite)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets latest channel items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User Id. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="channelIds">Optional. Specify one or more channel id&#39;s, comma delimited. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetLatestChannelItems (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFilter> filters = default(List<ItemFilter>), List<ItemFields> fields = default(List<ItemFields>), List<Guid> channelIds = default(List<Guid>))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetLatestChannelItemsWithHttpInfo(userId, startIndex, limit, filters, fields, channelIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets latest channel items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User Id. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="channelIds">Optional. Specify one or more channel id&#39;s, comma delimited. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetLatestChannelItemsWithHttpInfo (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFilter> filters = default(List<ItemFilter>), List<ItemFields> fields = default(List<ItemFields>), List<Guid> channelIds = default(List<Guid>))
        {

            var localVarPath = "/Channels/Items/Latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "filters", filters)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (channelIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "channelIds", channelIds)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLatestChannelItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets latest channel items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User Id. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="channelIds">Optional. Specify one or more channel id&#39;s, comma delimited. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetLatestChannelItemsAsync (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFilter> filters = default(List<ItemFilter>), List<ItemFields> fields = default(List<ItemFields>), List<Guid> channelIds = default(List<Guid>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetLatestChannelItemsWithHttpInfoAsync(userId, startIndex, limit, filters, fields, channelIds, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets latest channel items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User Id. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="channelIds">Optional. Specify one or more channel id&#39;s, comma delimited. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetLatestChannelItemsWithHttpInfoAsync (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFilter> filters = default(List<ItemFilter>), List<ItemFields> fields = default(List<ItemFields>), List<Guid> channelIds = default(List<Guid>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Channels/Items/Latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "filters", filters)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (channelIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "channelIds", channelIds)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLatestChannelItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

    }
}
