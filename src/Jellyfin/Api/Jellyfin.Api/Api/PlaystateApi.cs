/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Jellyfin.Api.Client;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlaystateApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Marks an item as played for user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="datePlayed">Optional. The date the item was played. (optional)</param>
        /// <returns>UserItemDataDto</returns>
        UserItemDataDto MarkPlayedItem (Guid userId, Guid itemId, DateTime? datePlayed = default(DateTime?));

        /// <summary>
        /// Marks an item as played for user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="datePlayed">Optional. The date the item was played. (optional)</param>
        /// <returns>ApiResponse of UserItemDataDto</returns>
        ApiResponse<UserItemDataDto> MarkPlayedItemWithHttpInfo (Guid userId, Guid itemId, DateTime? datePlayed = default(DateTime?));
        /// <summary>
        /// Marks an item as unplayed for user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <returns>UserItemDataDto</returns>
        UserItemDataDto MarkUnplayedItem (Guid userId, Guid itemId);

        /// <summary>
        /// Marks an item as unplayed for user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <returns>ApiResponse of UserItemDataDto</returns>
        ApiResponse<UserItemDataDto> MarkUnplayedItemWithHttpInfo (Guid userId, Guid itemId);
        /// <summary>
        /// Reports a user&#39;s playback progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="positionTicks">Optional. The current position, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="volumeLevel">Scale of 0-100. (optional)</param>
        /// <param name="playMethod">The play method. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="repeatMode">The repeat mode. (optional)</param>
        /// <param name="isPaused">Indicates if the player is paused. (optional, default to false)</param>
        /// <param name="isMuted">Indicates if the player is muted. (optional, default to false)</param>
        /// <returns></returns>
        void OnPlaybackProgress (Guid userId, Guid itemId, string mediaSourceId = default(string), long? positionTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? volumeLevel = default(int?), PlayMethod? playMethod = default(PlayMethod?), string liveStreamId = default(string), string playSessionId = default(string), RepeatMode? repeatMode = default(RepeatMode?), bool? isPaused = default(bool?), bool? isMuted = default(bool?));

        /// <summary>
        /// Reports a user&#39;s playback progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="positionTicks">Optional. The current position, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="volumeLevel">Scale of 0-100. (optional)</param>
        /// <param name="playMethod">The play method. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="repeatMode">The repeat mode. (optional)</param>
        /// <param name="isPaused">Indicates if the player is paused. (optional, default to false)</param>
        /// <param name="isMuted">Indicates if the player is muted. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OnPlaybackProgressWithHttpInfo (Guid userId, Guid itemId, string mediaSourceId = default(string), long? positionTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? volumeLevel = default(int?), PlayMethod? playMethod = default(PlayMethod?), string liveStreamId = default(string), string playSessionId = default(string), RepeatMode? repeatMode = default(RepeatMode?), bool? isPaused = default(bool?), bool? isMuted = default(bool?));
        /// <summary>
        /// Reports that a user has begun playing an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="playMethod">The play method. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="canSeek">Indicates if the client can seek. (optional, default to false)</param>
        /// <returns></returns>
        void OnPlaybackStart (Guid userId, Guid itemId, string mediaSourceId = default(string), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), PlayMethod? playMethod = default(PlayMethod?), string liveStreamId = default(string), string playSessionId = default(string), bool? canSeek = default(bool?));

        /// <summary>
        /// Reports that a user has begun playing an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="playMethod">The play method. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="canSeek">Indicates if the client can seek. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OnPlaybackStartWithHttpInfo (Guid userId, Guid itemId, string mediaSourceId = default(string), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), PlayMethod? playMethod = default(PlayMethod?), string liveStreamId = default(string), string playSessionId = default(string), bool? canSeek = default(bool?));
        /// <summary>
        /// Reports that a user has stopped playing an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="nextMediaType">The next media type that will play. (optional)</param>
        /// <param name="positionTicks">Optional. The position, in ticks, where playback stopped. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <returns></returns>
        void OnPlaybackStopped (Guid userId, Guid itemId, string mediaSourceId = default(string), string nextMediaType = default(string), long? positionTicks = default(long?), string liveStreamId = default(string), string playSessionId = default(string));

        /// <summary>
        /// Reports that a user has stopped playing an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="nextMediaType">The next media type that will play. (optional)</param>
        /// <param name="positionTicks">Optional. The position, in ticks, where playback stopped. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OnPlaybackStoppedWithHttpInfo (Guid userId, Guid itemId, string mediaSourceId = default(string), string nextMediaType = default(string), long? positionTicks = default(long?), string liveStreamId = default(string), string playSessionId = default(string));
        /// <summary>
        /// Pings a playback session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playSessionId">Playback session id.</param>
        /// <returns></returns>
        void PingPlaybackSession (string playSessionId);

        /// <summary>
        /// Pings a playback session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playSessionId">Playback session id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PingPlaybackSessionWithHttpInfo (string playSessionId);
        /// <summary>
        /// Reports playback progress within a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback progress info. (optional)</param>
        /// <returns></returns>
        void ReportPlaybackProgress (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));

        /// <summary>
        /// Reports playback progress within a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback progress info. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReportPlaybackProgressWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));
        /// <summary>
        /// Reports playback has started within a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback start info. (optional)</param>
        /// <returns></returns>
        void ReportPlaybackStart (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));

        /// <summary>
        /// Reports playback has started within a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback start info. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReportPlaybackStartWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));
        /// <summary>
        /// Reports playback has stopped within a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback stop info. (optional)</param>
        /// <returns></returns>
        void ReportPlaybackStopped (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));

        /// <summary>
        /// Reports playback has stopped within a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback stop info. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReportPlaybackStoppedWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Marks an item as played for user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="datePlayed">Optional. The date the item was played. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserItemDataDto</returns>
        System.Threading.Tasks.Task<UserItemDataDto> MarkPlayedItemAsync (Guid userId, Guid itemId, DateTime? datePlayed = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Marks an item as played for user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="datePlayed">Optional. The date the item was played. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserItemDataDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserItemDataDto>> MarkPlayedItemWithHttpInfoAsync (Guid userId, Guid itemId, DateTime? datePlayed = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Marks an item as unplayed for user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserItemDataDto</returns>
        System.Threading.Tasks.Task<UserItemDataDto> MarkUnplayedItemAsync (Guid userId, Guid itemId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Marks an item as unplayed for user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserItemDataDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserItemDataDto>> MarkUnplayedItemWithHttpInfoAsync (Guid userId, Guid itemId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reports a user&#39;s playback progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="positionTicks">Optional. The current position, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="volumeLevel">Scale of 0-100. (optional)</param>
        /// <param name="playMethod">The play method. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="repeatMode">The repeat mode. (optional)</param>
        /// <param name="isPaused">Indicates if the player is paused. (optional, default to false)</param>
        /// <param name="isMuted">Indicates if the player is muted. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OnPlaybackProgressAsync (Guid userId, Guid itemId, string mediaSourceId = default(string), long? positionTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? volumeLevel = default(int?), PlayMethod? playMethod = default(PlayMethod?), string liveStreamId = default(string), string playSessionId = default(string), RepeatMode? repeatMode = default(RepeatMode?), bool? isPaused = default(bool?), bool? isMuted = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports a user&#39;s playback progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="positionTicks">Optional. The current position, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="volumeLevel">Scale of 0-100. (optional)</param>
        /// <param name="playMethod">The play method. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="repeatMode">The repeat mode. (optional)</param>
        /// <param name="isPaused">Indicates if the player is paused. (optional, default to false)</param>
        /// <param name="isMuted">Indicates if the player is muted. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OnPlaybackProgressWithHttpInfoAsync (Guid userId, Guid itemId, string mediaSourceId = default(string), long? positionTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? volumeLevel = default(int?), PlayMethod? playMethod = default(PlayMethod?), string liveStreamId = default(string), string playSessionId = default(string), RepeatMode? repeatMode = default(RepeatMode?), bool? isPaused = default(bool?), bool? isMuted = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reports that a user has begun playing an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="playMethod">The play method. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="canSeek">Indicates if the client can seek. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OnPlaybackStartAsync (Guid userId, Guid itemId, string mediaSourceId = default(string), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), PlayMethod? playMethod = default(PlayMethod?), string liveStreamId = default(string), string playSessionId = default(string), bool? canSeek = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports that a user has begun playing an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="playMethod">The play method. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="canSeek">Indicates if the client can seek. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OnPlaybackStartWithHttpInfoAsync (Guid userId, Guid itemId, string mediaSourceId = default(string), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), PlayMethod? playMethod = default(PlayMethod?), string liveStreamId = default(string), string playSessionId = default(string), bool? canSeek = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reports that a user has stopped playing an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="nextMediaType">The next media type that will play. (optional)</param>
        /// <param name="positionTicks">Optional. The position, in ticks, where playback stopped. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OnPlaybackStoppedAsync (Guid userId, Guid itemId, string mediaSourceId = default(string), string nextMediaType = default(string), long? positionTicks = default(long?), string liveStreamId = default(string), string playSessionId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports that a user has stopped playing an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="nextMediaType">The next media type that will play. (optional)</param>
        /// <param name="positionTicks">Optional. The position, in ticks, where playback stopped. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OnPlaybackStoppedWithHttpInfoAsync (Guid userId, Guid itemId, string mediaSourceId = default(string), string nextMediaType = default(string), long? positionTicks = default(long?), string liveStreamId = default(string), string playSessionId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Pings a playback session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playSessionId">Playback session id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PingPlaybackSessionAsync (string playSessionId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Pings a playback session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playSessionId">Playback session id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PingPlaybackSessionWithHttpInfoAsync (string playSessionId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reports playback progress within a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback progress info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReportPlaybackProgressAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports playback progress within a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback progress info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReportPlaybackProgressWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reports playback has started within a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback start info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReportPlaybackStartAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports playback has started within a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback start info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReportPlaybackStartWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reports playback has stopped within a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback stop info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReportPlaybackStoppedAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports playback has stopped within a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback stop info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReportPlaybackStoppedWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlaystateApi : IPlaystateApi
    {
        private Jellyfin.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaystateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlaystateApi(String basePath)
        {
            this.Configuration = new Jellyfin.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaystateApi"/> class
        /// </summary>
        /// <returns></returns>
        public PlaystateApi()
        {
            this.Configuration = Jellyfin.Api.Client.Configuration.Default;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaystateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlaystateApi(Jellyfin.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Jellyfin.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Jellyfin.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Jellyfin.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Marks an item as played for user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="datePlayed">Optional. The date the item was played. (optional)</param>
        /// <returns>UserItemDataDto</returns>
        public UserItemDataDto MarkPlayedItem (Guid userId, Guid itemId, DateTime? datePlayed = default(DateTime?))
        {
             ApiResponse<UserItemDataDto> localVarResponse = MarkPlayedItemWithHttpInfo(userId, itemId, datePlayed);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Marks an item as played for user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="datePlayed">Optional. The date the item was played. (optional)</param>
        /// <returns>ApiResponse of UserItemDataDto</returns>
        public ApiResponse<UserItemDataDto> MarkPlayedItemWithHttpInfo (Guid userId, Guid itemId, DateTime? datePlayed = default(DateTime?))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PlaystateApi->MarkPlayedItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling PlaystateApi->MarkPlayedItem");

            var localVarPath = "/Users/{userId}/PlayedItems/{itemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (datePlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datePlayed", datePlayed)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkPlayedItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserItemDataDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserItemDataDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserItemDataDto)));
        }

        /// <summary>
        /// Marks an item as played for user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="datePlayed">Optional. The date the item was played. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserItemDataDto</returns>
        public async System.Threading.Tasks.Task<UserItemDataDto> MarkPlayedItemAsync (Guid userId, Guid itemId, DateTime? datePlayed = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserItemDataDto> localVarResponse = await MarkPlayedItemWithHttpInfoAsync(userId, itemId, datePlayed, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Marks an item as played for user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="datePlayed">Optional. The date the item was played. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserItemDataDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserItemDataDto>> MarkPlayedItemWithHttpInfoAsync (Guid userId, Guid itemId, DateTime? datePlayed = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PlaystateApi->MarkPlayedItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling PlaystateApi->MarkPlayedItem");

            var localVarPath = "/Users/{userId}/PlayedItems/{itemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (datePlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datePlayed", datePlayed)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkPlayedItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserItemDataDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserItemDataDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserItemDataDto)));
        }

        /// <summary>
        /// Marks an item as unplayed for user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <returns>UserItemDataDto</returns>
        public UserItemDataDto MarkUnplayedItem (Guid userId, Guid itemId)
        {
             ApiResponse<UserItemDataDto> localVarResponse = MarkUnplayedItemWithHttpInfo(userId, itemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Marks an item as unplayed for user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <returns>ApiResponse of UserItemDataDto</returns>
        public ApiResponse<UserItemDataDto> MarkUnplayedItemWithHttpInfo (Guid userId, Guid itemId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PlaystateApi->MarkUnplayedItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling PlaystateApi->MarkUnplayedItem");

            var localVarPath = "/Users/{userId}/PlayedItems/{itemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkUnplayedItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserItemDataDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserItemDataDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserItemDataDto)));
        }

        /// <summary>
        /// Marks an item as unplayed for user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserItemDataDto</returns>
        public async System.Threading.Tasks.Task<UserItemDataDto> MarkUnplayedItemAsync (Guid userId, Guid itemId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserItemDataDto> localVarResponse = await MarkUnplayedItemWithHttpInfoAsync(userId, itemId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Marks an item as unplayed for user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserItemDataDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserItemDataDto>> MarkUnplayedItemWithHttpInfoAsync (Guid userId, Guid itemId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PlaystateApi->MarkUnplayedItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling PlaystateApi->MarkUnplayedItem");

            var localVarPath = "/Users/{userId}/PlayedItems/{itemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkUnplayedItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserItemDataDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserItemDataDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserItemDataDto)));
        }

        /// <summary>
        /// Reports a user&#39;s playback progress. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="positionTicks">Optional. The current position, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="volumeLevel">Scale of 0-100. (optional)</param>
        /// <param name="playMethod">The play method. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="repeatMode">The repeat mode. (optional)</param>
        /// <param name="isPaused">Indicates if the player is paused. (optional, default to false)</param>
        /// <param name="isMuted">Indicates if the player is muted. (optional, default to false)</param>
        /// <returns></returns>
        public void OnPlaybackProgress (Guid userId, Guid itemId, string mediaSourceId = default(string), long? positionTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? volumeLevel = default(int?), PlayMethod? playMethod = default(PlayMethod?), string liveStreamId = default(string), string playSessionId = default(string), RepeatMode? repeatMode = default(RepeatMode?), bool? isPaused = default(bool?), bool? isMuted = default(bool?))
        {
             OnPlaybackProgressWithHttpInfo(userId, itemId, mediaSourceId, positionTicks, audioStreamIndex, subtitleStreamIndex, volumeLevel, playMethod, liveStreamId, playSessionId, repeatMode, isPaused, isMuted);
        }

        /// <summary>
        /// Reports a user&#39;s playback progress. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="positionTicks">Optional. The current position, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="volumeLevel">Scale of 0-100. (optional)</param>
        /// <param name="playMethod">The play method. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="repeatMode">The repeat mode. (optional)</param>
        /// <param name="isPaused">Indicates if the player is paused. (optional, default to false)</param>
        /// <param name="isMuted">Indicates if the player is muted. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OnPlaybackProgressWithHttpInfo (Guid userId, Guid itemId, string mediaSourceId = default(string), long? positionTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? volumeLevel = default(int?), PlayMethod? playMethod = default(PlayMethod?), string liveStreamId = default(string), string playSessionId = default(string), RepeatMode? repeatMode = default(RepeatMode?), bool? isPaused = default(bool?), bool? isMuted = default(bool?))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PlaystateApi->OnPlaybackProgress");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling PlaystateApi->OnPlaybackProgress");

            var localVarPath = "/Users/{userId}/PlayingItems/{itemId}/Progress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (positionTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positionTicks", positionTicks)); // query parameter
            if (audioStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioStreamIndex", audioStreamIndex)); // query parameter
            if (subtitleStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleStreamIndex", subtitleStreamIndex)); // query parameter
            if (volumeLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "volumeLevel", volumeLevel)); // query parameter
            if (playMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playMethod", playMethod)); // query parameter
            if (liveStreamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "liveStreamId", liveStreamId)); // query parameter
            if (playSessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playSessionId", playSessionId)); // query parameter
            if (repeatMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "repeatMode", repeatMode)); // query parameter
            if (isPaused != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isPaused", isPaused)); // query parameter
            if (isMuted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isMuted", isMuted)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OnPlaybackProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports a user&#39;s playback progress. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="positionTicks">Optional. The current position, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="volumeLevel">Scale of 0-100. (optional)</param>
        /// <param name="playMethod">The play method. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="repeatMode">The repeat mode. (optional)</param>
        /// <param name="isPaused">Indicates if the player is paused. (optional, default to false)</param>
        /// <param name="isMuted">Indicates if the player is muted. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OnPlaybackProgressAsync (Guid userId, Guid itemId, string mediaSourceId = default(string), long? positionTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? volumeLevel = default(int?), PlayMethod? playMethod = default(PlayMethod?), string liveStreamId = default(string), string playSessionId = default(string), RepeatMode? repeatMode = default(RepeatMode?), bool? isPaused = default(bool?), bool? isMuted = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             await OnPlaybackProgressWithHttpInfoAsync(userId, itemId, mediaSourceId, positionTicks, audioStreamIndex, subtitleStreamIndex, volumeLevel, playMethod, liveStreamId, playSessionId, repeatMode, isPaused, isMuted, cancellationToken);

        }

        /// <summary>
        /// Reports a user&#39;s playback progress. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="positionTicks">Optional. The current position, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="volumeLevel">Scale of 0-100. (optional)</param>
        /// <param name="playMethod">The play method. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="repeatMode">The repeat mode. (optional)</param>
        /// <param name="isPaused">Indicates if the player is paused. (optional, default to false)</param>
        /// <param name="isMuted">Indicates if the player is muted. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OnPlaybackProgressWithHttpInfoAsync (Guid userId, Guid itemId, string mediaSourceId = default(string), long? positionTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? volumeLevel = default(int?), PlayMethod? playMethod = default(PlayMethod?), string liveStreamId = default(string), string playSessionId = default(string), RepeatMode? repeatMode = default(RepeatMode?), bool? isPaused = default(bool?), bool? isMuted = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PlaystateApi->OnPlaybackProgress");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling PlaystateApi->OnPlaybackProgress");

            var localVarPath = "/Users/{userId}/PlayingItems/{itemId}/Progress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (positionTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positionTicks", positionTicks)); // query parameter
            if (audioStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioStreamIndex", audioStreamIndex)); // query parameter
            if (subtitleStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleStreamIndex", subtitleStreamIndex)); // query parameter
            if (volumeLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "volumeLevel", volumeLevel)); // query parameter
            if (playMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playMethod", playMethod)); // query parameter
            if (liveStreamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "liveStreamId", liveStreamId)); // query parameter
            if (playSessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playSessionId", playSessionId)); // query parameter
            if (repeatMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "repeatMode", repeatMode)); // query parameter
            if (isPaused != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isPaused", isPaused)); // query parameter
            if (isMuted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isMuted", isMuted)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OnPlaybackProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports that a user has begun playing an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="playMethod">The play method. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="canSeek">Indicates if the client can seek. (optional, default to false)</param>
        /// <returns></returns>
        public void OnPlaybackStart (Guid userId, Guid itemId, string mediaSourceId = default(string), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), PlayMethod? playMethod = default(PlayMethod?), string liveStreamId = default(string), string playSessionId = default(string), bool? canSeek = default(bool?))
        {
             OnPlaybackStartWithHttpInfo(userId, itemId, mediaSourceId, audioStreamIndex, subtitleStreamIndex, playMethod, liveStreamId, playSessionId, canSeek);
        }

        /// <summary>
        /// Reports that a user has begun playing an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="playMethod">The play method. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="canSeek">Indicates if the client can seek. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OnPlaybackStartWithHttpInfo (Guid userId, Guid itemId, string mediaSourceId = default(string), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), PlayMethod? playMethod = default(PlayMethod?), string liveStreamId = default(string), string playSessionId = default(string), bool? canSeek = default(bool?))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PlaystateApi->OnPlaybackStart");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling PlaystateApi->OnPlaybackStart");

            var localVarPath = "/Users/{userId}/PlayingItems/{itemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (audioStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioStreamIndex", audioStreamIndex)); // query parameter
            if (subtitleStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleStreamIndex", subtitleStreamIndex)); // query parameter
            if (playMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playMethod", playMethod)); // query parameter
            if (liveStreamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "liveStreamId", liveStreamId)); // query parameter
            if (playSessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playSessionId", playSessionId)); // query parameter
            if (canSeek != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "canSeek", canSeek)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OnPlaybackStart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports that a user has begun playing an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="playMethod">The play method. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="canSeek">Indicates if the client can seek. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OnPlaybackStartAsync (Guid userId, Guid itemId, string mediaSourceId = default(string), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), PlayMethod? playMethod = default(PlayMethod?), string liveStreamId = default(string), string playSessionId = default(string), bool? canSeek = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             await OnPlaybackStartWithHttpInfoAsync(userId, itemId, mediaSourceId, audioStreamIndex, subtitleStreamIndex, playMethod, liveStreamId, playSessionId, canSeek, cancellationToken);

        }

        /// <summary>
        /// Reports that a user has begun playing an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="playMethod">The play method. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="canSeek">Indicates if the client can seek. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OnPlaybackStartWithHttpInfoAsync (Guid userId, Guid itemId, string mediaSourceId = default(string), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), PlayMethod? playMethod = default(PlayMethod?), string liveStreamId = default(string), string playSessionId = default(string), bool? canSeek = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PlaystateApi->OnPlaybackStart");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling PlaystateApi->OnPlaybackStart");

            var localVarPath = "/Users/{userId}/PlayingItems/{itemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (audioStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioStreamIndex", audioStreamIndex)); // query parameter
            if (subtitleStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleStreamIndex", subtitleStreamIndex)); // query parameter
            if (playMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playMethod", playMethod)); // query parameter
            if (liveStreamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "liveStreamId", liveStreamId)); // query parameter
            if (playSessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playSessionId", playSessionId)); // query parameter
            if (canSeek != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "canSeek", canSeek)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OnPlaybackStart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports that a user has stopped playing an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="nextMediaType">The next media type that will play. (optional)</param>
        /// <param name="positionTicks">Optional. The position, in ticks, where playback stopped. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <returns></returns>
        public void OnPlaybackStopped (Guid userId, Guid itemId, string mediaSourceId = default(string), string nextMediaType = default(string), long? positionTicks = default(long?), string liveStreamId = default(string), string playSessionId = default(string))
        {
             OnPlaybackStoppedWithHttpInfo(userId, itemId, mediaSourceId, nextMediaType, positionTicks, liveStreamId, playSessionId);
        }

        /// <summary>
        /// Reports that a user has stopped playing an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="nextMediaType">The next media type that will play. (optional)</param>
        /// <param name="positionTicks">Optional. The position, in ticks, where playback stopped. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OnPlaybackStoppedWithHttpInfo (Guid userId, Guid itemId, string mediaSourceId = default(string), string nextMediaType = default(string), long? positionTicks = default(long?), string liveStreamId = default(string), string playSessionId = default(string))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PlaystateApi->OnPlaybackStopped");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling PlaystateApi->OnPlaybackStopped");

            var localVarPath = "/Users/{userId}/PlayingItems/{itemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (nextMediaType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextMediaType", nextMediaType)); // query parameter
            if (positionTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positionTicks", positionTicks)); // query parameter
            if (liveStreamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "liveStreamId", liveStreamId)); // query parameter
            if (playSessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playSessionId", playSessionId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OnPlaybackStopped", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports that a user has stopped playing an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="nextMediaType">The next media type that will play. (optional)</param>
        /// <param name="positionTicks">Optional. The position, in ticks, where playback stopped. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OnPlaybackStoppedAsync (Guid userId, Guid itemId, string mediaSourceId = default(string), string nextMediaType = default(string), long? positionTicks = default(long?), string liveStreamId = default(string), string playSessionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await OnPlaybackStoppedWithHttpInfoAsync(userId, itemId, mediaSourceId, nextMediaType, positionTicks, liveStreamId, playSessionId, cancellationToken);

        }

        /// <summary>
        /// Reports that a user has stopped playing an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource. (optional)</param>
        /// <param name="nextMediaType">The next media type that will play. (optional)</param>
        /// <param name="positionTicks">Optional. The position, in ticks, where playback stopped. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OnPlaybackStoppedWithHttpInfoAsync (Guid userId, Guid itemId, string mediaSourceId = default(string), string nextMediaType = default(string), long? positionTicks = default(long?), string liveStreamId = default(string), string playSessionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PlaystateApi->OnPlaybackStopped");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling PlaystateApi->OnPlaybackStopped");

            var localVarPath = "/Users/{userId}/PlayingItems/{itemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (nextMediaType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextMediaType", nextMediaType)); // query parameter
            if (positionTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positionTicks", positionTicks)); // query parameter
            if (liveStreamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "liveStreamId", liveStreamId)); // query parameter
            if (playSessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playSessionId", playSessionId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OnPlaybackStopped", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Pings a playback session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playSessionId">Playback session id.</param>
        /// <returns></returns>
        public void PingPlaybackSession (string playSessionId)
        {
             PingPlaybackSessionWithHttpInfo(playSessionId);
        }

        /// <summary>
        /// Pings a playback session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playSessionId">Playback session id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PingPlaybackSessionWithHttpInfo (string playSessionId)
        {
            // verify the required parameter 'playSessionId' is set
            if (playSessionId == null)
                throw new ApiException(400, "Missing required parameter 'playSessionId' when calling PlaystateApi->PingPlaybackSession");

            var localVarPath = "/Sessions/Playing/Ping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playSessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playSessionId", playSessionId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PingPlaybackSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Pings a playback session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playSessionId">Playback session id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PingPlaybackSessionAsync (string playSessionId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await PingPlaybackSessionWithHttpInfoAsync(playSessionId, cancellationToken);

        }

        /// <summary>
        /// Pings a playback session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playSessionId">Playback session id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PingPlaybackSessionWithHttpInfoAsync (string playSessionId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'playSessionId' is set
            if (playSessionId == null)
                throw new ApiException(400, "Missing required parameter 'playSessionId' when calling PlaystateApi->PingPlaybackSession");

            var localVarPath = "/Sessions/Playing/Ping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playSessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playSessionId", playSessionId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PingPlaybackSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports playback progress within a session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback progress info. (optional)</param>
        /// <returns></returns>
        public void ReportPlaybackProgress (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
             ReportPlaybackProgressWithHttpInfo(UNKNOWN_BASE_TYPE);
        }

        /// <summary>
        /// Reports playback progress within a session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback progress info. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReportPlaybackProgressWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {

            var localVarPath = "/Sessions/Playing/Progress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportPlaybackProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports playback progress within a session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback progress info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReportPlaybackProgressAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {
             await ReportPlaybackProgressWithHttpInfoAsync(UNKNOWN_BASE_TYPE, cancellationToken);

        }

        /// <summary>
        /// Reports playback progress within a session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback progress info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReportPlaybackProgressWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Sessions/Playing/Progress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportPlaybackProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports playback has started within a session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback start info. (optional)</param>
        /// <returns></returns>
        public void ReportPlaybackStart (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
             ReportPlaybackStartWithHttpInfo(UNKNOWN_BASE_TYPE);
        }

        /// <summary>
        /// Reports playback has started within a session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback start info. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReportPlaybackStartWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {

            var localVarPath = "/Sessions/Playing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportPlaybackStart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports playback has started within a session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback start info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReportPlaybackStartAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {
             await ReportPlaybackStartWithHttpInfoAsync(UNKNOWN_BASE_TYPE, cancellationToken);

        }

        /// <summary>
        /// Reports playback has started within a session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback start info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReportPlaybackStartWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Sessions/Playing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportPlaybackStart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports playback has stopped within a session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback stop info. (optional)</param>
        /// <returns></returns>
        public void ReportPlaybackStopped (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
             ReportPlaybackStoppedWithHttpInfo(UNKNOWN_BASE_TYPE);
        }

        /// <summary>
        /// Reports playback has stopped within a session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback stop info. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReportPlaybackStoppedWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {

            var localVarPath = "/Sessions/Playing/Stopped";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportPlaybackStopped", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports playback has stopped within a session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback stop info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReportPlaybackStoppedAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {
             await ReportPlaybackStoppedWithHttpInfoAsync(UNKNOWN_BASE_TYPE, cancellationToken);

        }

        /// <summary>
        /// Reports playback has stopped within a session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The playback stop info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReportPlaybackStoppedWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Sessions/Playing/Stopped";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportPlaybackStopped", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
