/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Jellyfin.Api.Client;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstantMixApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates an instant playlist based on a given album.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetInstantMixFromAlbum (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>));

        /// <summary>
        /// Creates an instant playlist based on a given album.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetInstantMixFromAlbumWithHttpInfo (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>));
        /// <summary>
        /// Creates an instant playlist based on a given artist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetInstantMixFromArtists (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>));

        /// <summary>
        /// Creates an instant playlist based on a given artist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetInstantMixFromArtistsWithHttpInfo (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>));
        /// <summary>
        /// Creates an instant playlist based on a given artist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetInstantMixFromArtists2 (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>));

        /// <summary>
        /// Creates an instant playlist based on a given artist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetInstantMixFromArtists2WithHttpInfo (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>));
        /// <summary>
        /// Creates an instant playlist based on a given item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetInstantMixFromItem (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>));

        /// <summary>
        /// Creates an instant playlist based on a given item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetInstantMixFromItemWithHttpInfo (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>));
        /// <summary>
        /// Creates an instant playlist based on a given genre.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetInstantMixFromMusicGenreById (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>));

        /// <summary>
        /// Creates an instant playlist based on a given genre.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetInstantMixFromMusicGenreByIdWithHttpInfo (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>));
        /// <summary>
        /// Creates an instant playlist based on a given genre.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetInstantMixFromMusicGenreById2 (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>));

        /// <summary>
        /// Creates an instant playlist based on a given genre.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetInstantMixFromMusicGenreById2WithHttpInfo (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>));
        /// <summary>
        /// Creates an instant playlist based on a given genre.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The genre name.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetInstantMixFromMusicGenreByName (string name, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>));

        /// <summary>
        /// Creates an instant playlist based on a given genre.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The genre name.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetInstantMixFromMusicGenreByNameWithHttpInfo (string name, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>));
        /// <summary>
        /// Creates an instant playlist based on a given playlist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetInstantMixFromPlaylist (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>));

        /// <summary>
        /// Creates an instant playlist based on a given playlist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetInstantMixFromPlaylistWithHttpInfo (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>));
        /// <summary>
        /// Creates an instant playlist based on a given song.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetInstantMixFromSong (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>));

        /// <summary>
        /// Creates an instant playlist based on a given song.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetInstantMixFromSongWithHttpInfo (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates an instant playlist based on a given album.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetInstantMixFromAlbumAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates an instant playlist based on a given album.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetInstantMixFromAlbumWithHttpInfoAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates an instant playlist based on a given artist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetInstantMixFromArtistsAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates an instant playlist based on a given artist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetInstantMixFromArtistsWithHttpInfoAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates an instant playlist based on a given artist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetInstantMixFromArtists2Async (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates an instant playlist based on a given artist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetInstantMixFromArtists2WithHttpInfoAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates an instant playlist based on a given item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetInstantMixFromItemAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates an instant playlist based on a given item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetInstantMixFromItemWithHttpInfoAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates an instant playlist based on a given genre.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetInstantMixFromMusicGenreByIdAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates an instant playlist based on a given genre.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetInstantMixFromMusicGenreByIdWithHttpInfoAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates an instant playlist based on a given genre.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetInstantMixFromMusicGenreById2Async (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates an instant playlist based on a given genre.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetInstantMixFromMusicGenreById2WithHttpInfoAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates an instant playlist based on a given genre.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The genre name.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetInstantMixFromMusicGenreByNameAsync (string name, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates an instant playlist based on a given genre.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The genre name.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetInstantMixFromMusicGenreByNameWithHttpInfoAsync (string name, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates an instant playlist based on a given playlist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetInstantMixFromPlaylistAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates an instant playlist based on a given playlist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetInstantMixFromPlaylistWithHttpInfoAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates an instant playlist based on a given song.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetInstantMixFromSongAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates an instant playlist based on a given song.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetInstantMixFromSongWithHttpInfoAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InstantMixApi : IInstantMixApi
    {
        private Jellyfin.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InstantMixApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InstantMixApi(String basePath)
        {
            this.Configuration = new Jellyfin.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstantMixApi"/> class
        /// </summary>
        /// <returns></returns>
        public InstantMixApi()
        {
            this.Configuration = Jellyfin.Api.Client.Configuration.Default;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstantMixApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InstantMixApi(Jellyfin.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Jellyfin.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Jellyfin.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Jellyfin.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates an instant playlist based on a given album. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetInstantMixFromAlbum (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetInstantMixFromAlbumWithHttpInfo(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an instant playlist based on a given album. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetInstantMixFromAlbumWithHttpInfo (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InstantMixApi->GetInstantMixFromAlbum");

            var localVarPath = "/Albums/{id}/InstantMix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstantMixFromAlbum", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Creates an instant playlist based on a given album. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetInstantMixFromAlbumAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetInstantMixFromAlbumWithHttpInfoAsync(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an instant playlist based on a given album. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetInstantMixFromAlbumWithHttpInfoAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InstantMixApi->GetInstantMixFromAlbum");

            var localVarPath = "/Albums/{id}/InstantMix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstantMixFromAlbum", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Creates an instant playlist based on a given artist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetInstantMixFromArtists (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetInstantMixFromArtistsWithHttpInfo(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an instant playlist based on a given artist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetInstantMixFromArtistsWithHttpInfo (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InstantMixApi->GetInstantMixFromArtists");

            var localVarPath = "/Artists/{id}/InstantMix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstantMixFromArtists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Creates an instant playlist based on a given artist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetInstantMixFromArtistsAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetInstantMixFromArtistsWithHttpInfoAsync(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an instant playlist based on a given artist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetInstantMixFromArtistsWithHttpInfoAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InstantMixApi->GetInstantMixFromArtists");

            var localVarPath = "/Artists/{id}/InstantMix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstantMixFromArtists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Creates an instant playlist based on a given artist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetInstantMixFromArtists2 (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetInstantMixFromArtists2WithHttpInfo(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an instant playlist based on a given artist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetInstantMixFromArtists2WithHttpInfo (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InstantMixApi->GetInstantMixFromArtists2");

            var localVarPath = "/Artists/InstantMix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstantMixFromArtists2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Creates an instant playlist based on a given artist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetInstantMixFromArtists2Async (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetInstantMixFromArtists2WithHttpInfoAsync(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an instant playlist based on a given artist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetInstantMixFromArtists2WithHttpInfoAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InstantMixApi->GetInstantMixFromArtists2");

            var localVarPath = "/Artists/InstantMix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstantMixFromArtists2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Creates an instant playlist based on a given item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetInstantMixFromItem (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetInstantMixFromItemWithHttpInfo(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an instant playlist based on a given item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetInstantMixFromItemWithHttpInfo (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InstantMixApi->GetInstantMixFromItem");

            var localVarPath = "/Items/{id}/InstantMix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstantMixFromItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Creates an instant playlist based on a given item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetInstantMixFromItemAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetInstantMixFromItemWithHttpInfoAsync(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an instant playlist based on a given item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetInstantMixFromItemWithHttpInfoAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InstantMixApi->GetInstantMixFromItem");

            var localVarPath = "/Items/{id}/InstantMix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstantMixFromItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Creates an instant playlist based on a given genre. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetInstantMixFromMusicGenreById (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetInstantMixFromMusicGenreByIdWithHttpInfo(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an instant playlist based on a given genre. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetInstantMixFromMusicGenreByIdWithHttpInfo (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InstantMixApi->GetInstantMixFromMusicGenreById");

            var localVarPath = "/MusicGenres/{id}/InstantMix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstantMixFromMusicGenreById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Creates an instant playlist based on a given genre. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetInstantMixFromMusicGenreByIdAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetInstantMixFromMusicGenreByIdWithHttpInfoAsync(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an instant playlist based on a given genre. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetInstantMixFromMusicGenreByIdWithHttpInfoAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InstantMixApi->GetInstantMixFromMusicGenreById");

            var localVarPath = "/MusicGenres/{id}/InstantMix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstantMixFromMusicGenreById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Creates an instant playlist based on a given genre. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetInstantMixFromMusicGenreById2 (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetInstantMixFromMusicGenreById2WithHttpInfo(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an instant playlist based on a given genre. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetInstantMixFromMusicGenreById2WithHttpInfo (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InstantMixApi->GetInstantMixFromMusicGenreById2");

            var localVarPath = "/MusicGenres/InstantMix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstantMixFromMusicGenreById2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Creates an instant playlist based on a given genre. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetInstantMixFromMusicGenreById2Async (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetInstantMixFromMusicGenreById2WithHttpInfoAsync(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an instant playlist based on a given genre. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetInstantMixFromMusicGenreById2WithHttpInfoAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InstantMixApi->GetInstantMixFromMusicGenreById2");

            var localVarPath = "/MusicGenres/InstantMix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstantMixFromMusicGenreById2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Creates an instant playlist based on a given genre. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The genre name.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetInstantMixFromMusicGenreByName (string name, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetInstantMixFromMusicGenreByNameWithHttpInfo(name, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an instant playlist based on a given genre. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The genre name.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetInstantMixFromMusicGenreByNameWithHttpInfo (string name, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling InstantMixApi->GetInstantMixFromMusicGenreByName");

            var localVarPath = "/MusicGenres/{name}/InstantMix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstantMixFromMusicGenreByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Creates an instant playlist based on a given genre. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The genre name.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetInstantMixFromMusicGenreByNameAsync (string name, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetInstantMixFromMusicGenreByNameWithHttpInfoAsync(name, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an instant playlist based on a given genre. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The genre name.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetInstantMixFromMusicGenreByNameWithHttpInfoAsync (string name, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling InstantMixApi->GetInstantMixFromMusicGenreByName");

            var localVarPath = "/MusicGenres/{name}/InstantMix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstantMixFromMusicGenreByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Creates an instant playlist based on a given playlist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetInstantMixFromPlaylist (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetInstantMixFromPlaylistWithHttpInfo(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an instant playlist based on a given playlist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetInstantMixFromPlaylistWithHttpInfo (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InstantMixApi->GetInstantMixFromPlaylist");

            var localVarPath = "/Playlists/{id}/InstantMix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstantMixFromPlaylist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Creates an instant playlist based on a given playlist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetInstantMixFromPlaylistAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetInstantMixFromPlaylistWithHttpInfoAsync(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an instant playlist based on a given playlist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetInstantMixFromPlaylistWithHttpInfoAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InstantMixApi->GetInstantMixFromPlaylist");

            var localVarPath = "/Playlists/{id}/InstantMix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstantMixFromPlaylist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Creates an instant playlist based on a given song. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetInstantMixFromSong (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetInstantMixFromSongWithHttpInfo(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an instant playlist based on a given song. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetInstantMixFromSongWithHttpInfo (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InstantMixApi->GetInstantMixFromSong");

            var localVarPath = "/Songs/{id}/InstantMix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstantMixFromSong", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Creates an instant playlist based on a given song. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetInstantMixFromSongAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetInstantMixFromSongWithHttpInfoAsync(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an instant playlist based on a given song. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetInstantMixFromSongWithHttpInfoAsync (Guid id, Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InstantMixApi->GetInstantMixFromSong");

            var localVarPath = "/Songs/{id}/InstantMix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstantMixFromSong", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

    }
}
