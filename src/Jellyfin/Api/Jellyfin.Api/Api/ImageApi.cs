/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Jellyfin.Api.Client;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IImageApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete an item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">The image index. (optional)</param>
        /// <returns></returns>
        void DeleteItemImage (Guid itemId, ImageType imageType, int? imageIndex = default(int?));

        /// <summary>
        /// Delete an item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">The image index. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemImageWithHttpInfo (Guid itemId, ImageType imageType, int? imageIndex = default(int?));
        /// <summary>
        /// Delete an item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">The image index.</param>
        /// <returns></returns>
        void DeleteItemImageByIndex (Guid itemId, ImageType imageType, int imageIndex);

        /// <summary>
        /// Delete an item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">The image index.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemImageByIndexWithHttpInfo (Guid itemId, ImageType imageType, int imageIndex);
        /// <summary>
        /// Delete the user&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index. (optional)</param>
        /// <returns></returns>
        void DeleteUserImage (Guid userId, ImageType imageType, int? index = default(int?));

        /// <summary>
        /// Delete the user&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserImageWithHttpInfo (Guid userId, ImageType imageType, int? index = default(int?));
        /// <summary>
        /// Delete the user&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index.</param>
        /// <returns></returns>
        void DeleteUserImageByIndex (Guid userId, ImageType imageType, int index);

        /// <summary>
        /// Delete the user&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserImageByIndexWithHttpInfo (Guid userId, ImageType imageType, int index);
        /// <summary>
        /// Get artist image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Artist name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetArtistImage (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));

        /// <summary>
        /// Get artist image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Artist name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetArtistImageWithHttpInfo (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));
        /// <summary>
        /// Get genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetGenreImage (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));

        /// <summary>
        /// Get genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetGenreImageWithHttpInfo (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));
        /// <summary>
        /// Get genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetGenreImageByIndex (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));

        /// <summary>
        /// Get genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetGenreImageByIndexWithHttpInfo (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));
        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetItemImage (Guid itemId, ImageType imageType, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));

        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetItemImageWithHttpInfo (Guid itemId, ImageType imageType, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));
        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetItemImage2 (Guid itemId, ImageType imageType, int maxWidth, int maxHeight, string tag, ImageFormat format, double percentPlayed, int unplayedCount, int imageIndex, int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));

        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetItemImage2WithHttpInfo (Guid itemId, ImageType imageType, int maxWidth, int maxHeight, string tag, ImageFormat format, double percentPlayed, int unplayedCount, int imageIndex, int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));
        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetItemImageByIndex (Guid itemId, ImageType imageType, int imageIndex, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));

        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetItemImageByIndexWithHttpInfo (Guid itemId, ImageType imageType, int imageIndex, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));
        /// <summary>
        /// Get item image infos.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <returns>List&lt;ImageInfo&gt;</returns>
        List<ImageInfo> GetItemImageInfos (Guid itemId);

        /// <summary>
        /// Get item image infos.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <returns>ApiResponse of List&lt;ImageInfo&gt;</returns>
        ApiResponse<List<ImageInfo>> GetItemImageInfosWithHttpInfo (Guid itemId);
        /// <summary>
        /// Get music genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetMusicGenreImage (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));

        /// <summary>
        /// Get music genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetMusicGenreImageWithHttpInfo (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));
        /// <summary>
        /// Get music genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetMusicGenreImageByIndex (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));

        /// <summary>
        /// Get music genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetMusicGenreImageByIndexWithHttpInfo (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));
        /// <summary>
        /// Get person image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPersonImage (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));

        /// <summary>
        /// Get person image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPersonImageWithHttpInfo (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));
        /// <summary>
        /// Get person image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPersonImageByIndex (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));

        /// <summary>
        /// Get person image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPersonImageByIndexWithHttpInfo (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));
        /// <summary>
        /// Get studio image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetStudioImage (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));

        /// <summary>
        /// Get studio image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetStudioImageWithHttpInfo (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));
        /// <summary>
        /// Get studio image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetStudioImageByIndex (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));

        /// <summary>
        /// Get studio image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetStudioImageByIndexWithHttpInfo (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));
        /// <summary>
        /// Get user profile image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetUserImage (Guid userId, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));

        /// <summary>
        /// Get user profile image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetUserImageWithHttpInfo (Guid userId, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));
        /// <summary>
        /// Get user profile image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetUserImageByIndex (Guid userId, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));

        /// <summary>
        /// Get user profile image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetUserImageByIndexWithHttpInfo (Guid userId, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));
        /// <summary>
        /// Get artist image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Artist name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream HeadArtistImage (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));

        /// <summary>
        /// Get artist image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Artist name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> HeadArtistImageWithHttpInfo (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));
        /// <summary>
        /// Get genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream HeadGenreImage (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));

        /// <summary>
        /// Get genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> HeadGenreImageWithHttpInfo (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));
        /// <summary>
        /// Get genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream HeadGenreImageByIndex (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));

        /// <summary>
        /// Get genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> HeadGenreImageByIndexWithHttpInfo (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));
        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream HeadItemImage (Guid itemId, ImageType imageType, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));

        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> HeadItemImageWithHttpInfo (Guid itemId, ImageType imageType, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));
        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream HeadItemImage2 (Guid itemId, ImageType imageType, int maxWidth, int maxHeight, string tag, ImageFormat format, double percentPlayed, int unplayedCount, int imageIndex, int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));

        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> HeadItemImage2WithHttpInfo (Guid itemId, ImageType imageType, int maxWidth, int maxHeight, string tag, ImageFormat format, double percentPlayed, int unplayedCount, int imageIndex, int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));
        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream HeadItemImageByIndex (Guid itemId, ImageType imageType, int imageIndex, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));

        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> HeadItemImageByIndexWithHttpInfo (Guid itemId, ImageType imageType, int imageIndex, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));
        /// <summary>
        /// Get music genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream HeadMusicGenreImage (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));

        /// <summary>
        /// Get music genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> HeadMusicGenreImageWithHttpInfo (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));
        /// <summary>
        /// Get music genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream HeadMusicGenreImageByIndex (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));

        /// <summary>
        /// Get music genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> HeadMusicGenreImageByIndexWithHttpInfo (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));
        /// <summary>
        /// Get person image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream HeadPersonImage (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));

        /// <summary>
        /// Get person image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> HeadPersonImageWithHttpInfo (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));
        /// <summary>
        /// Get person image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream HeadPersonImageByIndex (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));

        /// <summary>
        /// Get person image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> HeadPersonImageByIndexWithHttpInfo (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));
        /// <summary>
        /// Get studio image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream HeadStudioImage (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));

        /// <summary>
        /// Get studio image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> HeadStudioImageWithHttpInfo (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));
        /// <summary>
        /// Get studio image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream HeadStudioImageByIndex (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));

        /// <summary>
        /// Get studio image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> HeadStudioImageByIndexWithHttpInfo (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));
        /// <summary>
        /// Get user profile image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream HeadUserImage (Guid userId, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));

        /// <summary>
        /// Get user profile image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> HeadUserImageWithHttpInfo (Guid userId, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?));
        /// <summary>
        /// Get user profile image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream HeadUserImageByIndex (Guid userId, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));

        /// <summary>
        /// Get user profile image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> HeadUserImageByIndexWithHttpInfo (Guid userId, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string));
        /// <summary>
        /// Sets the user image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void PostUserImage (Guid userId, ImageType imageType, int? index = default(int?), System.IO.Stream body = default(System.IO.Stream));

        /// <summary>
        /// Sets the user image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostUserImageWithHttpInfo (Guid userId, ImageType imageType, int? index = default(int?), System.IO.Stream body = default(System.IO.Stream));
        /// <summary>
        /// Sets the user image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void PostUserImageByIndex (Guid userId, ImageType imageType, int index, System.IO.Stream body = default(System.IO.Stream));

        /// <summary>
        /// Sets the user image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostUserImageByIndexWithHttpInfo (Guid userId, ImageType imageType, int index, System.IO.Stream body = default(System.IO.Stream));
        /// <summary>
        /// Set item image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void SetItemImage (Guid itemId, ImageType imageType, System.IO.Stream body = default(System.IO.Stream));

        /// <summary>
        /// Set item image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetItemImageWithHttpInfo (Guid itemId, ImageType imageType, System.IO.Stream body = default(System.IO.Stream));
        /// <summary>
        /// Set item image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">(Unused) Image index.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void SetItemImageByIndex (Guid itemId, ImageType imageType, int imageIndex, System.IO.Stream body = default(System.IO.Stream));

        /// <summary>
        /// Set item image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">(Unused) Image index.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetItemImageByIndexWithHttpInfo (Guid itemId, ImageType imageType, int imageIndex, System.IO.Stream body = default(System.IO.Stream));
        /// <summary>
        /// Updates the index for an item image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Old image index.</param>
        /// <param name="newIndex">New image index.</param>
        /// <returns></returns>
        void UpdateItemImageIndex (Guid itemId, ImageType imageType, int imageIndex, int newIndex);

        /// <summary>
        /// Updates the index for an item image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Old image index.</param>
        /// <param name="newIndex">New image index.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateItemImageIndexWithHttpInfo (Guid itemId, ImageType imageType, int imageIndex, int newIndex);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete an item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">The image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemImageAsync (Guid itemId, ImageType imageType, int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">The image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemImageWithHttpInfoAsync (Guid itemId, ImageType imageType, int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">The image index.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemImageByIndexAsync (Guid itemId, ImageType imageType, int imageIndex, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">The image index.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemImageByIndexWithHttpInfoAsync (Guid itemId, ImageType imageType, int imageIndex, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete the user&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserImageAsync (Guid userId, ImageType imageType, int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete the user&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserImageWithHttpInfoAsync (Guid userId, ImageType imageType, int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete the user&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserImageByIndexAsync (Guid userId, ImageType imageType, int index, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete the user&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserImageByIndexWithHttpInfoAsync (Guid userId, ImageType imageType, int index, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get artist image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Artist name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetArtistImageAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get artist image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Artist name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetArtistImageWithHttpInfoAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetGenreImageAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetGenreImageWithHttpInfoAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetGenreImageByIndexAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetGenreImageByIndexWithHttpInfoAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetItemImageAsync (Guid itemId, ImageType imageType, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetItemImageWithHttpInfoAsync (Guid itemId, ImageType imageType, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetItemImage2Async (Guid itemId, ImageType imageType, int maxWidth, int maxHeight, string tag, ImageFormat format, double percentPlayed, int unplayedCount, int imageIndex, int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetItemImage2WithHttpInfoAsync (Guid itemId, ImageType imageType, int maxWidth, int maxHeight, string tag, ImageFormat format, double percentPlayed, int unplayedCount, int imageIndex, int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetItemImageByIndexAsync (Guid itemId, ImageType imageType, int imageIndex, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetItemImageByIndexWithHttpInfoAsync (Guid itemId, ImageType imageType, int imageIndex, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get item image infos.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ImageInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ImageInfo>> GetItemImageInfosAsync (Guid itemId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get item image infos.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ImageInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ImageInfo>>> GetItemImageInfosWithHttpInfoAsync (Guid itemId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get music genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetMusicGenreImageAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get music genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetMusicGenreImageWithHttpInfoAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get music genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetMusicGenreImageByIndexAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get music genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetMusicGenreImageByIndexWithHttpInfoAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get person image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPersonImageAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get person image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPersonImageWithHttpInfoAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get person image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPersonImageByIndexAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get person image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPersonImageByIndexWithHttpInfoAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get studio image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetStudioImageAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get studio image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetStudioImageWithHttpInfoAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get studio image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetStudioImageByIndexAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get studio image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetStudioImageByIndexWithHttpInfoAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get user profile image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetUserImageAsync (Guid userId, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get user profile image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetUserImageWithHttpInfoAsync (Guid userId, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get user profile image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetUserImageByIndexAsync (Guid userId, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get user profile image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetUserImageByIndexWithHttpInfoAsync (Guid userId, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get artist image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Artist name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> HeadArtistImageAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get artist image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Artist name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadArtistImageWithHttpInfoAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> HeadGenreImageAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadGenreImageWithHttpInfoAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> HeadGenreImageByIndexAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadGenreImageByIndexWithHttpInfoAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> HeadItemImageAsync (Guid itemId, ImageType imageType, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadItemImageWithHttpInfoAsync (Guid itemId, ImageType imageType, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> HeadItemImage2Async (Guid itemId, ImageType imageType, int maxWidth, int maxHeight, string tag, ImageFormat format, double percentPlayed, int unplayedCount, int imageIndex, int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadItemImage2WithHttpInfoAsync (Guid itemId, ImageType imageType, int maxWidth, int maxHeight, string tag, ImageFormat format, double percentPlayed, int unplayedCount, int imageIndex, int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> HeadItemImageByIndexAsync (Guid itemId, ImageType imageType, int imageIndex, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadItemImageByIndexWithHttpInfoAsync (Guid itemId, ImageType imageType, int imageIndex, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get music genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> HeadMusicGenreImageAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get music genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadMusicGenreImageWithHttpInfoAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get music genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> HeadMusicGenreImageByIndexAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get music genre image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadMusicGenreImageByIndexWithHttpInfoAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get person image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> HeadPersonImageAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get person image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadPersonImageWithHttpInfoAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get person image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> HeadPersonImageByIndexAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get person image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadPersonImageByIndexWithHttpInfoAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get studio image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> HeadStudioImageAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get studio image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadStudioImageWithHttpInfoAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get studio image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> HeadStudioImageByIndexAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get studio image by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadStudioImageByIndexWithHttpInfoAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get user profile image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> HeadUserImageAsync (Guid userId, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get user profile image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadUserImageWithHttpInfoAsync (Guid userId, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get user profile image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> HeadUserImageByIndexAsync (Guid userId, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get user profile image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadUserImageByIndexWithHttpInfoAsync (Guid userId, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sets the user image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostUserImageAsync (Guid userId, ImageType imageType, int? index = default(int?), System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sets the user image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostUserImageWithHttpInfoAsync (Guid userId, ImageType imageType, int? index = default(int?), System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sets the user image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostUserImageByIndexAsync (Guid userId, ImageType imageType, int index, System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sets the user image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostUserImageByIndexWithHttpInfoAsync (Guid userId, ImageType imageType, int index, System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set item image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetItemImageAsync (Guid itemId, ImageType imageType, System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set item image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetItemImageWithHttpInfoAsync (Guid itemId, ImageType imageType, System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set item image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">(Unused) Image index.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetItemImageByIndexAsync (Guid itemId, ImageType imageType, int imageIndex, System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set item image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">(Unused) Image index.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetItemImageByIndexWithHttpInfoAsync (Guid itemId, ImageType imageType, int imageIndex, System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates the index for an item image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Old image index.</param>
        /// <param name="newIndex">New image index.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateItemImageIndexAsync (Guid itemId, ImageType imageType, int imageIndex, int newIndex, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the index for an item image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Old image index.</param>
        /// <param name="newIndex">New image index.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateItemImageIndexWithHttpInfoAsync (Guid itemId, ImageType imageType, int imageIndex, int newIndex, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ImageApi : IImageApi
    {
        private Jellyfin.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ImageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ImageApi(String basePath)
        {
            this.Configuration = new Jellyfin.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImageApi"/> class
        /// </summary>
        /// <returns></returns>
        public ImageApi()
        {
            this.Configuration = Jellyfin.Api.Client.Configuration.Default;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ImageApi(Jellyfin.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Jellyfin.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Jellyfin.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Jellyfin.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete an item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">The image index. (optional)</param>
        /// <returns></returns>
        public void DeleteItemImage (Guid itemId, ImageType imageType, int? imageIndex = default(int?))
        {
             DeleteItemImageWithHttpInfo(itemId, imageType, imageIndex);
        }

        /// <summary>
        /// Delete an item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">The image index. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemImageWithHttpInfo (Guid itemId, ImageType imageType, int? imageIndex = default(int?))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->DeleteItemImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->DeleteItemImage");

            var localVarPath = "/Items/{itemId}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">The image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemImageAsync (Guid itemId, ImageType imageType, int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteItemImageWithHttpInfoAsync(itemId, imageType, imageIndex, cancellationToken);

        }

        /// <summary>
        /// Delete an item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">The image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemImageWithHttpInfoAsync (Guid itemId, ImageType imageType, int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->DeleteItemImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->DeleteItemImage");

            var localVarPath = "/Items/{itemId}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">The image index.</param>
        /// <returns></returns>
        public void DeleteItemImageByIndex (Guid itemId, ImageType imageType, int imageIndex)
        {
             DeleteItemImageByIndexWithHttpInfo(itemId, imageType, imageIndex);
        }

        /// <summary>
        /// Delete an item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">The image index.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemImageByIndexWithHttpInfo (Guid itemId, ImageType imageType, int imageIndex)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->DeleteItemImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->DeleteItemImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->DeleteItemImageByIndex");

            var localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">The image index.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemImageByIndexAsync (Guid itemId, ImageType imageType, int imageIndex, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteItemImageByIndexWithHttpInfoAsync(itemId, imageType, imageIndex, cancellationToken);

        }

        /// <summary>
        /// Delete an item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">The image index.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemImageByIndexWithHttpInfoAsync (Guid itemId, ImageType imageType, int imageIndex, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->DeleteItemImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->DeleteItemImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->DeleteItemImageByIndex");

            var localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete the user&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index. (optional)</param>
        /// <returns></returns>
        public void DeleteUserImage (Guid userId, ImageType imageType, int? index = default(int?))
        {
             DeleteUserImageWithHttpInfo(userId, imageType, index);
        }

        /// <summary>
        /// Delete the user&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUserImageWithHttpInfo (Guid userId, ImageType imageType, int? index = default(int?))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ImageApi->DeleteUserImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->DeleteUserImage");

            var localVarPath = "/Users/{userId}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "index", index)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete the user&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserImageAsync (Guid userId, ImageType imageType, int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteUserImageWithHttpInfoAsync(userId, imageType, index, cancellationToken);

        }

        /// <summary>
        /// Delete the user&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserImageWithHttpInfoAsync (Guid userId, ImageType imageType, int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ImageApi->DeleteUserImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->DeleteUserImage");

            var localVarPath = "/Users/{userId}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "index", index)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete the user&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index.</param>
        /// <returns></returns>
        public void DeleteUserImageByIndex (Guid userId, ImageType imageType, int index)
        {
             DeleteUserImageByIndexWithHttpInfo(userId, imageType, index);
        }

        /// <summary>
        /// Delete the user&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUserImageByIndexWithHttpInfo (Guid userId, ImageType imageType, int index)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ImageApi->DeleteUserImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->DeleteUserImageByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageApi->DeleteUserImageByIndex");

            var localVarPath = "/Users/{userId}/Images/{imageType}/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete the user&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserImageByIndexAsync (Guid userId, ImageType imageType, int index, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteUserImageByIndexWithHttpInfoAsync(userId, imageType, index, cancellationToken);

        }

        /// <summary>
        /// Delete the user&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserImageByIndexWithHttpInfoAsync (Guid userId, ImageType imageType, int index, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ImageApi->DeleteUserImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->DeleteUserImageByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageApi->DeleteUserImageByIndex");

            var localVarPath = "/Users/{userId}/Images/{imageType}/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get artist image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Artist name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetArtistImage (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetArtistImageWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get artist image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Artist name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetArtistImageWithHttpInfo (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->GetArtistImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetArtistImage");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->GetArtistImage");

            var localVarPath = "/Artists/{name}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArtistImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get artist image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Artist name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetArtistImageAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetArtistImageWithHttpInfoAsync(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get artist image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Artist name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetArtistImageWithHttpInfoAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->GetArtistImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetArtistImage");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->GetArtistImage");

            var localVarPath = "/Artists/{name}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArtistImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetGenreImage (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetGenreImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetGenreImageWithHttpInfo (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->GetGenreImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetGenreImage");

            var localVarPath = "/Genres/{name}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGenreImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetGenreImageAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetGenreImageWithHttpInfoAsync(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetGenreImageWithHttpInfoAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->GetGenreImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetGenreImage");

            var localVarPath = "/Genres/{name}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGenreImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetGenreImageByIndex (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetGenreImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetGenreImageByIndexWithHttpInfo (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->GetGenreImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetGenreImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->GetGenreImageByIndex");

            var localVarPath = "/Genres/{name}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGenreImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetGenreImageByIndexAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetGenreImageByIndexWithHttpInfoAsync(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetGenreImageByIndexWithHttpInfoAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->GetGenreImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetGenreImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->GetGenreImageByIndex");

            var localVarPath = "/Genres/{name}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGenreImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetItemImage (Guid itemId, ImageType imageType, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetItemImageWithHttpInfo(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetItemImageWithHttpInfo (Guid itemId, ImageType imageType, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->GetItemImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetItemImage");

            var localVarPath = "/Items/{itemId}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetItemImageAsync (Guid itemId, ImageType imageType, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetItemImageWithHttpInfoAsync(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetItemImageWithHttpInfoAsync (Guid itemId, ImageType imageType, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->GetItemImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetItemImage");

            var localVarPath = "/Items/{itemId}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetItemImage2 (Guid itemId, ImageType imageType, int maxWidth, int maxHeight, string tag, ImageFormat format, double percentPlayed, int unplayedCount, int imageIndex, int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetItemImage2WithHttpInfo(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetItemImage2WithHttpInfo (Guid itemId, ImageType imageType, int maxWidth, int maxHeight, string tag, ImageFormat format, double percentPlayed, int unplayedCount, int imageIndex, int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->GetItemImage2");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetItemImage2");
            // verify the required parameter 'maxWidth' is set
            if (maxWidth == null)
                throw new ApiException(400, "Missing required parameter 'maxWidth' when calling ImageApi->GetItemImage2");
            // verify the required parameter 'maxHeight' is set
            if (maxHeight == null)
                throw new ApiException(400, "Missing required parameter 'maxHeight' when calling ImageApi->GetItemImage2");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling ImageApi->GetItemImage2");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling ImageApi->GetItemImage2");
            // verify the required parameter 'percentPlayed' is set
            if (percentPlayed == null)
                throw new ApiException(400, "Missing required parameter 'percentPlayed' when calling ImageApi->GetItemImage2");
            // verify the required parameter 'unplayedCount' is set
            if (unplayedCount == null)
                throw new ApiException(400, "Missing required parameter 'unplayedCount' when calling ImageApi->GetItemImage2");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->GetItemImage2");

            var localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (maxWidth != null) localVarPathParams.Add("maxWidth", this.Configuration.ApiClient.ParameterToString(maxWidth)); // path parameter
            if (maxHeight != null) localVarPathParams.Add("maxHeight", this.Configuration.ApiClient.ParameterToString(maxHeight)); // path parameter
            if (tag != null) localVarPathParams.Add("tag", this.Configuration.ApiClient.ParameterToString(tag)); // path parameter
            if (format != null) localVarPathParams.Add("format", this.Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (percentPlayed != null) localVarPathParams.Add("percentPlayed", this.Configuration.ApiClient.ParameterToString(percentPlayed)); // path parameter
            if (unplayedCount != null) localVarPathParams.Add("unplayedCount", this.Configuration.ApiClient.ParameterToString(unplayedCount)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemImage2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetItemImage2Async (Guid itemId, ImageType imageType, int maxWidth, int maxHeight, string tag, ImageFormat format, double percentPlayed, int unplayedCount, int imageIndex, int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetItemImage2WithHttpInfoAsync(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetItemImage2WithHttpInfoAsync (Guid itemId, ImageType imageType, int maxWidth, int maxHeight, string tag, ImageFormat format, double percentPlayed, int unplayedCount, int imageIndex, int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->GetItemImage2");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetItemImage2");
            // verify the required parameter 'maxWidth' is set
            if (maxWidth == null)
                throw new ApiException(400, "Missing required parameter 'maxWidth' when calling ImageApi->GetItemImage2");
            // verify the required parameter 'maxHeight' is set
            if (maxHeight == null)
                throw new ApiException(400, "Missing required parameter 'maxHeight' when calling ImageApi->GetItemImage2");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling ImageApi->GetItemImage2");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling ImageApi->GetItemImage2");
            // verify the required parameter 'percentPlayed' is set
            if (percentPlayed == null)
                throw new ApiException(400, "Missing required parameter 'percentPlayed' when calling ImageApi->GetItemImage2");
            // verify the required parameter 'unplayedCount' is set
            if (unplayedCount == null)
                throw new ApiException(400, "Missing required parameter 'unplayedCount' when calling ImageApi->GetItemImage2");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->GetItemImage2");

            var localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (maxWidth != null) localVarPathParams.Add("maxWidth", this.Configuration.ApiClient.ParameterToString(maxWidth)); // path parameter
            if (maxHeight != null) localVarPathParams.Add("maxHeight", this.Configuration.ApiClient.ParameterToString(maxHeight)); // path parameter
            if (tag != null) localVarPathParams.Add("tag", this.Configuration.ApiClient.ParameterToString(tag)); // path parameter
            if (format != null) localVarPathParams.Add("format", this.Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (percentPlayed != null) localVarPathParams.Add("percentPlayed", this.Configuration.ApiClient.ParameterToString(percentPlayed)); // path parameter
            if (unplayedCount != null) localVarPathParams.Add("unplayedCount", this.Configuration.ApiClient.ParameterToString(unplayedCount)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemImage2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetItemImageByIndex (Guid itemId, ImageType imageType, int imageIndex, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetItemImageByIndexWithHttpInfo(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetItemImageByIndexWithHttpInfo (Guid itemId, ImageType imageType, int imageIndex, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->GetItemImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetItemImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->GetItemImageByIndex");

            var localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetItemImageByIndexAsync (Guid itemId, ImageType imageType, int imageIndex, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetItemImageByIndexWithHttpInfoAsync(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetItemImageByIndexWithHttpInfoAsync (Guid itemId, ImageType imageType, int imageIndex, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->GetItemImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetItemImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->GetItemImageByIndex");

            var localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get item image infos. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <returns>List&lt;ImageInfo&gt;</returns>
        public List<ImageInfo> GetItemImageInfos (Guid itemId)
        {
             ApiResponse<List<ImageInfo>> localVarResponse = GetItemImageInfosWithHttpInfo(itemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get item image infos. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <returns>ApiResponse of List&lt;ImageInfo&gt;</returns>
        public ApiResponse<List<ImageInfo>> GetItemImageInfosWithHttpInfo (Guid itemId)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->GetItemImageInfos");

            var localVarPath = "/Items/{itemId}/Images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemImageInfos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ImageInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ImageInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ImageInfo>)));
        }

        /// <summary>
        /// Get item image infos. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ImageInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ImageInfo>> GetItemImageInfosAsync (Guid itemId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<ImageInfo>> localVarResponse = await GetItemImageInfosWithHttpInfoAsync(itemId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get item image infos. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ImageInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ImageInfo>>> GetItemImageInfosWithHttpInfoAsync (Guid itemId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->GetItemImageInfos");

            var localVarPath = "/Items/{itemId}/Images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemImageInfos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ImageInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ImageInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ImageInfo>)));
        }

        /// <summary>
        /// Get music genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetMusicGenreImage (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetMusicGenreImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get music genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetMusicGenreImageWithHttpInfo (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->GetMusicGenreImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetMusicGenreImage");

            var localVarPath = "/MusicGenres/{name}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMusicGenreImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get music genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetMusicGenreImageAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetMusicGenreImageWithHttpInfoAsync(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get music genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetMusicGenreImageWithHttpInfoAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->GetMusicGenreImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetMusicGenreImage");

            var localVarPath = "/MusicGenres/{name}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMusicGenreImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get music genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetMusicGenreImageByIndex (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetMusicGenreImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get music genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetMusicGenreImageByIndexWithHttpInfo (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->GetMusicGenreImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetMusicGenreImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->GetMusicGenreImageByIndex");

            var localVarPath = "/MusicGenres/{name}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMusicGenreImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get music genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetMusicGenreImageByIndexAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetMusicGenreImageByIndexWithHttpInfoAsync(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get music genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetMusicGenreImageByIndexWithHttpInfoAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->GetMusicGenreImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetMusicGenreImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->GetMusicGenreImageByIndex");

            var localVarPath = "/MusicGenres/{name}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMusicGenreImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get person image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPersonImage (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPersonImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get person image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetPersonImageWithHttpInfo (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->GetPersonImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetPersonImage");

            var localVarPath = "/Persons/{name}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPersonImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get person image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPersonImageAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPersonImageWithHttpInfoAsync(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get person image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPersonImageWithHttpInfoAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->GetPersonImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetPersonImage");

            var localVarPath = "/Persons/{name}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPersonImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get person image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPersonImageByIndex (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPersonImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get person image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetPersonImageByIndexWithHttpInfo (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->GetPersonImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetPersonImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->GetPersonImageByIndex");

            var localVarPath = "/Persons/{name}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPersonImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get person image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPersonImageByIndexAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPersonImageByIndexWithHttpInfoAsync(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get person image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPersonImageByIndexWithHttpInfoAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->GetPersonImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetPersonImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->GetPersonImageByIndex");

            var localVarPath = "/Persons/{name}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPersonImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get studio image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetStudioImage (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetStudioImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get studio image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetStudioImageWithHttpInfo (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->GetStudioImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetStudioImage");

            var localVarPath = "/Studios/{name}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudioImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get studio image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetStudioImageAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetStudioImageWithHttpInfoAsync(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get studio image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetStudioImageWithHttpInfoAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->GetStudioImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetStudioImage");

            var localVarPath = "/Studios/{name}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudioImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get studio image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetStudioImageByIndex (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetStudioImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get studio image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetStudioImageByIndexWithHttpInfo (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->GetStudioImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetStudioImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->GetStudioImageByIndex");

            var localVarPath = "/Studios/{name}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudioImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get studio image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetStudioImageByIndexAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetStudioImageByIndexWithHttpInfoAsync(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get studio image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetStudioImageByIndexWithHttpInfoAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->GetStudioImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetStudioImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->GetStudioImageByIndex");

            var localVarPath = "/Studios/{name}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudioImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get user profile image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetUserImage (Guid userId, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetUserImageWithHttpInfo(userId, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user profile image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetUserImageWithHttpInfo (Guid userId, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ImageApi->GetUserImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetUserImage");

            var localVarPath = "/Users/{userId}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get user profile image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetUserImageAsync (Guid userId, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetUserImageWithHttpInfoAsync(userId, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user profile image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetUserImageWithHttpInfoAsync (Guid userId, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ImageApi->GetUserImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetUserImage");

            var localVarPath = "/Users/{userId}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get user profile image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetUserImageByIndex (Guid userId, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetUserImageByIndexWithHttpInfo(userId, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user profile image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetUserImageByIndexWithHttpInfo (Guid userId, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ImageApi->GetUserImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetUserImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->GetUserImageByIndex");

            var localVarPath = "/Users/{userId}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get user profile image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetUserImageByIndexAsync (Guid userId, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetUserImageByIndexWithHttpInfoAsync(userId, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user profile image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetUserImageByIndexWithHttpInfoAsync (Guid userId, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ImageApi->GetUserImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->GetUserImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->GetUserImageByIndex");

            var localVarPath = "/Users/{userId}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get artist image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Artist name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream HeadArtistImage (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = HeadArtistImageWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get artist image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Artist name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> HeadArtistImageWithHttpInfo (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->HeadArtistImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadArtistImage");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->HeadArtistImage");

            var localVarPath = "/Artists/{name}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadArtistImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get artist image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Artist name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> HeadArtistImageAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await HeadArtistImageWithHttpInfoAsync(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get artist image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Artist name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadArtistImageWithHttpInfoAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->HeadArtistImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadArtistImage");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->HeadArtistImage");

            var localVarPath = "/Artists/{name}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadArtistImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream HeadGenreImage (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
             ApiResponse<System.IO.Stream> localVarResponse = HeadGenreImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> HeadGenreImageWithHttpInfo (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->HeadGenreImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadGenreImage");

            var localVarPath = "/Genres/{name}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadGenreImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> HeadGenreImageAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await HeadGenreImageWithHttpInfoAsync(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadGenreImageWithHttpInfoAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->HeadGenreImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadGenreImage");

            var localVarPath = "/Genres/{name}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadGenreImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream HeadGenreImageByIndex (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = HeadGenreImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> HeadGenreImageByIndexWithHttpInfo (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->HeadGenreImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadGenreImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->HeadGenreImageByIndex");

            var localVarPath = "/Genres/{name}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadGenreImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> HeadGenreImageByIndexAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await HeadGenreImageByIndexWithHttpInfoAsync(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadGenreImageByIndexWithHttpInfoAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->HeadGenreImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadGenreImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->HeadGenreImageByIndex");

            var localVarPath = "/Genres/{name}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadGenreImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream HeadItemImage (Guid itemId, ImageType imageType, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
             ApiResponse<System.IO.Stream> localVarResponse = HeadItemImageWithHttpInfo(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> HeadItemImageWithHttpInfo (Guid itemId, ImageType imageType, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->HeadItemImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadItemImage");

            var localVarPath = "/Items/{itemId}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadItemImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> HeadItemImageAsync (Guid itemId, ImageType imageType, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await HeadItemImageWithHttpInfoAsync(itemId, imageType, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, imageIndex, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadItemImageWithHttpInfoAsync (Guid itemId, ImageType imageType, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->HeadItemImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadItemImage");

            var localVarPath = "/Items/{itemId}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadItemImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream HeadItemImage2 (Guid itemId, ImageType imageType, int maxWidth, int maxHeight, string tag, ImageFormat format, double percentPlayed, int unplayedCount, int imageIndex, int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = HeadItemImage2WithHttpInfo(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> HeadItemImage2WithHttpInfo (Guid itemId, ImageType imageType, int maxWidth, int maxHeight, string tag, ImageFormat format, double percentPlayed, int unplayedCount, int imageIndex, int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->HeadItemImage2");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadItemImage2");
            // verify the required parameter 'maxWidth' is set
            if (maxWidth == null)
                throw new ApiException(400, "Missing required parameter 'maxWidth' when calling ImageApi->HeadItemImage2");
            // verify the required parameter 'maxHeight' is set
            if (maxHeight == null)
                throw new ApiException(400, "Missing required parameter 'maxHeight' when calling ImageApi->HeadItemImage2");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling ImageApi->HeadItemImage2");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling ImageApi->HeadItemImage2");
            // verify the required parameter 'percentPlayed' is set
            if (percentPlayed == null)
                throw new ApiException(400, "Missing required parameter 'percentPlayed' when calling ImageApi->HeadItemImage2");
            // verify the required parameter 'unplayedCount' is set
            if (unplayedCount == null)
                throw new ApiException(400, "Missing required parameter 'unplayedCount' when calling ImageApi->HeadItemImage2");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->HeadItemImage2");

            var localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (maxWidth != null) localVarPathParams.Add("maxWidth", this.Configuration.ApiClient.ParameterToString(maxWidth)); // path parameter
            if (maxHeight != null) localVarPathParams.Add("maxHeight", this.Configuration.ApiClient.ParameterToString(maxHeight)); // path parameter
            if (tag != null) localVarPathParams.Add("tag", this.Configuration.ApiClient.ParameterToString(tag)); // path parameter
            if (format != null) localVarPathParams.Add("format", this.Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (percentPlayed != null) localVarPathParams.Add("percentPlayed", this.Configuration.ApiClient.ParameterToString(percentPlayed)); // path parameter
            if (unplayedCount != null) localVarPathParams.Add("unplayedCount", this.Configuration.ApiClient.ParameterToString(unplayedCount)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadItemImage2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> HeadItemImage2Async (Guid itemId, ImageType imageType, int maxWidth, int maxHeight, string tag, ImageFormat format, double percentPlayed, int unplayedCount, int imageIndex, int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await HeadItemImage2WithHttpInfoAsync(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadItemImage2WithHttpInfoAsync (Guid itemId, ImageType imageType, int maxWidth, int maxHeight, string tag, ImageFormat format, double percentPlayed, int unplayedCount, int imageIndex, int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->HeadItemImage2");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadItemImage2");
            // verify the required parameter 'maxWidth' is set
            if (maxWidth == null)
                throw new ApiException(400, "Missing required parameter 'maxWidth' when calling ImageApi->HeadItemImage2");
            // verify the required parameter 'maxHeight' is set
            if (maxHeight == null)
                throw new ApiException(400, "Missing required parameter 'maxHeight' when calling ImageApi->HeadItemImage2");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling ImageApi->HeadItemImage2");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling ImageApi->HeadItemImage2");
            // verify the required parameter 'percentPlayed' is set
            if (percentPlayed == null)
                throw new ApiException(400, "Missing required parameter 'percentPlayed' when calling ImageApi->HeadItemImage2");
            // verify the required parameter 'unplayedCount' is set
            if (unplayedCount == null)
                throw new ApiException(400, "Missing required parameter 'unplayedCount' when calling ImageApi->HeadItemImage2");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->HeadItemImage2");

            var localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (maxWidth != null) localVarPathParams.Add("maxWidth", this.Configuration.ApiClient.ParameterToString(maxWidth)); // path parameter
            if (maxHeight != null) localVarPathParams.Add("maxHeight", this.Configuration.ApiClient.ParameterToString(maxHeight)); // path parameter
            if (tag != null) localVarPathParams.Add("tag", this.Configuration.ApiClient.ParameterToString(tag)); // path parameter
            if (format != null) localVarPathParams.Add("format", this.Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (percentPlayed != null) localVarPathParams.Add("percentPlayed", this.Configuration.ApiClient.ParameterToString(percentPlayed)); // path parameter
            if (unplayedCount != null) localVarPathParams.Add("unplayedCount", this.Configuration.ApiClient.ParameterToString(unplayedCount)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadItemImage2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream HeadItemImageByIndex (Guid itemId, ImageType imageType, int imageIndex, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = HeadItemImageByIndexWithHttpInfo(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> HeadItemImageByIndexWithHttpInfo (Guid itemId, ImageType imageType, int imageIndex, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->HeadItemImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadItemImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->HeadItemImageByIndex");

            var localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadItemImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> HeadItemImageByIndexAsync (Guid itemId, ImageType imageType, int imageIndex, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await HeadItemImageByIndexWithHttpInfoAsync(itemId, imageType, imageIndex, maxWidth, maxHeight, width, height, quality, fillWidth, fillHeight, tag, cropWhitespace, format, addPlayedIndicator, percentPlayed, unplayedCount, blur, backgroundColor, foregroundLayer, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the item&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadItemImageByIndexWithHttpInfoAsync (Guid itemId, ImageType imageType, int imageIndex, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), ImageFormat? format = default(ImageFormat?), bool? addPlayedIndicator = default(bool?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->HeadItemImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadItemImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->HeadItemImageByIndex");

            var localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadItemImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get music genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream HeadMusicGenreImage (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
             ApiResponse<System.IO.Stream> localVarResponse = HeadMusicGenreImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get music genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> HeadMusicGenreImageWithHttpInfo (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->HeadMusicGenreImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadMusicGenreImage");

            var localVarPath = "/MusicGenres/{name}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadMusicGenreImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get music genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> HeadMusicGenreImageAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await HeadMusicGenreImageWithHttpInfoAsync(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get music genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadMusicGenreImageWithHttpInfoAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->HeadMusicGenreImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadMusicGenreImage");

            var localVarPath = "/MusicGenres/{name}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadMusicGenreImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get music genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream HeadMusicGenreImageByIndex (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = HeadMusicGenreImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get music genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> HeadMusicGenreImageByIndexWithHttpInfo (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->HeadMusicGenreImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadMusicGenreImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->HeadMusicGenreImageByIndex");

            var localVarPath = "/MusicGenres/{name}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadMusicGenreImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get music genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> HeadMusicGenreImageByIndexAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await HeadMusicGenreImageByIndexWithHttpInfoAsync(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get music genre image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadMusicGenreImageByIndexWithHttpInfoAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->HeadMusicGenreImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadMusicGenreImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->HeadMusicGenreImageByIndex");

            var localVarPath = "/MusicGenres/{name}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadMusicGenreImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get person image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream HeadPersonImage (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
             ApiResponse<System.IO.Stream> localVarResponse = HeadPersonImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get person image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> HeadPersonImageWithHttpInfo (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->HeadPersonImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadPersonImage");

            var localVarPath = "/Persons/{name}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadPersonImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get person image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> HeadPersonImageAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await HeadPersonImageWithHttpInfoAsync(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get person image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadPersonImageWithHttpInfoAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->HeadPersonImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadPersonImage");

            var localVarPath = "/Persons/{name}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadPersonImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get person image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream HeadPersonImageByIndex (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = HeadPersonImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get person image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> HeadPersonImageByIndexWithHttpInfo (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->HeadPersonImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadPersonImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->HeadPersonImageByIndex");

            var localVarPath = "/Persons/{name}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadPersonImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get person image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> HeadPersonImageByIndexAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await HeadPersonImageByIndexWithHttpInfoAsync(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get person image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadPersonImageByIndexWithHttpInfoAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->HeadPersonImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadPersonImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->HeadPersonImageByIndex");

            var localVarPath = "/Persons/{name}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadPersonImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get studio image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream HeadStudioImage (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
             ApiResponse<System.IO.Stream> localVarResponse = HeadStudioImageWithHttpInfo(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get studio image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> HeadStudioImageWithHttpInfo (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->HeadStudioImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadStudioImage");

            var localVarPath = "/Studios/{name}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadStudioImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get studio image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> HeadStudioImageAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await HeadStudioImageWithHttpInfoAsync(name, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get studio image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadStudioImageWithHttpInfoAsync (string name, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->HeadStudioImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadStudioImage");

            var localVarPath = "/Studios/{name}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadStudioImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get studio image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream HeadStudioImageByIndex (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = HeadStudioImageByIndexWithHttpInfo(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get studio image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> HeadStudioImageByIndexWithHttpInfo (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->HeadStudioImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadStudioImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->HeadStudioImageByIndex");

            var localVarPath = "/Studios/{name}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadStudioImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get studio image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> HeadStudioImageByIndexAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await HeadStudioImageByIndexWithHttpInfoAsync(name, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get studio image by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadStudioImageByIndexWithHttpInfoAsync (string name, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageApi->HeadStudioImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadStudioImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->HeadStudioImageByIndex");

            var localVarPath = "/Studios/{name}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadStudioImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get user profile image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream HeadUserImage (Guid userId, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
             ApiResponse<System.IO.Stream> localVarResponse = HeadUserImageWithHttpInfo(userId, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user profile image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> HeadUserImageWithHttpInfo (Guid userId, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ImageApi->HeadUserImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadUserImage");

            var localVarPath = "/Users/{userId}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadUserImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get user profile image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> HeadUserImageAsync (Guid userId, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await HeadUserImageWithHttpInfoAsync(userId, imageType, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, imageIndex, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user profile image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="imageIndex">Image index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadUserImageWithHttpInfoAsync (Guid userId, ImageType imageType, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), int? imageIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ImageApi->HeadUserImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadUserImage");

            var localVarPath = "/Users/{userId}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter
            if (imageIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageIndex", imageIndex)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadUserImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get user profile image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream HeadUserImageByIndex (Guid userId, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = HeadUserImageByIndexWithHttpInfo(userId, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user profile image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> HeadUserImageByIndexWithHttpInfo (Guid userId, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ImageApi->HeadUserImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadUserImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->HeadUserImageByIndex");

            var localVarPath = "/Users/{userId}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadUserImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get user profile image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> HeadUserImageByIndexAsync (Guid userId, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await HeadUserImageByIndexWithHttpInfoAsync(userId, imageType, imageIndex, tag, format, maxWidth, maxHeight, percentPlayed, unplayedCount, width, height, quality, fillWidth, fillHeight, cropWhitespace, addPlayedIndicator, blur, backgroundColor, foregroundLayer, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user profile image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png. (optional)</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay. (optional)</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="fillWidth">Width of box to fill. (optional)</param>
        /// <param name="fillHeight">Height of box to fill. (optional)</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator. (optional)</param>
        /// <param name="blur">Optional. Blur image. (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadUserImageByIndexWithHttpInfoAsync (Guid userId, ImageType imageType, int imageIndex, string tag = default(string), ImageFormat? format = default(ImageFormat?), int? maxWidth = default(int?), int? maxHeight = default(int?), double? percentPlayed = default(double?), int? unplayedCount = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), int? fillWidth = default(int?), int? fillHeight = default(int?), bool? cropWhitespace = default(bool?), bool? addPlayedIndicator = default(bool?), int? blur = default(int?), string backgroundColor = default(string), string foregroundLayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ImageApi->HeadUserImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->HeadUserImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->HeadUserImageByIndex");

            var localVarPath = "/Users/{userId}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxHeight", maxHeight)); // query parameter
            if (percentPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "percentPlayed", percentPlayed)); // query parameter
            if (unplayedCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unplayedCount", unplayedCount)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (fillWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillWidth", fillWidth)); // query parameter
            if (fillHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fillHeight", fillHeight)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cropWhitespace", cropWhitespace)); // query parameter
            if (addPlayedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addPlayedIndicator", addPlayedIndicator)); // query parameter
            if (blur != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blur", blur)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "backgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foregroundLayer", foregroundLayer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadUserImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Sets the user image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void PostUserImage (Guid userId, ImageType imageType, int? index = default(int?), System.IO.Stream body = default(System.IO.Stream))
        {
             PostUserImageWithHttpInfo(userId, imageType, index, body);
        }

        /// <summary>
        /// Sets the user image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostUserImageWithHttpInfo (Guid userId, ImageType imageType, int? index = default(int?), System.IO.Stream body = default(System.IO.Stream))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ImageApi->PostUserImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->PostUserImage");

            var localVarPath = "/Users/{userId}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "image/_*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "index", index)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUserImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Sets the user image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostUserImageAsync (Guid userId, ImageType imageType, int? index = default(int?), System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostUserImageWithHttpInfoAsync(userId, imageType, index, body, cancellationToken);

        }

        /// <summary>
        /// Sets the user image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostUserImageWithHttpInfoAsync (Guid userId, ImageType imageType, int? index = default(int?), System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ImageApi->PostUserImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->PostUserImage");

            var localVarPath = "/Users/{userId}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "image/_*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "index", index)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUserImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Sets the user image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void PostUserImageByIndex (Guid userId, ImageType imageType, int index, System.IO.Stream body = default(System.IO.Stream))
        {
             PostUserImageByIndexWithHttpInfo(userId, imageType, index, body);
        }

        /// <summary>
        /// Sets the user image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostUserImageByIndexWithHttpInfo (Guid userId, ImageType imageType, int index, System.IO.Stream body = default(System.IO.Stream))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ImageApi->PostUserImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->PostUserImageByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageApi->PostUserImageByIndex");

            var localVarPath = "/Users/{userId}/Images/{imageType}/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "image/_*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUserImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Sets the user image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostUserImageByIndexAsync (Guid userId, ImageType imageType, int index, System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostUserImageByIndexWithHttpInfoAsync(userId, imageType, index, body, cancellationToken);

        }

        /// <summary>
        /// Sets the user image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostUserImageByIndexWithHttpInfoAsync (Guid userId, ImageType imageType, int index, System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ImageApi->PostUserImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->PostUserImageByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageApi->PostUserImageByIndex");

            var localVarPath = "/Users/{userId}/Images/{imageType}/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "image/_*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUserImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Set item image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void SetItemImage (Guid itemId, ImageType imageType, System.IO.Stream body = default(System.IO.Stream))
        {
             SetItemImageWithHttpInfo(itemId, imageType, body);
        }

        /// <summary>
        /// Set item image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetItemImageWithHttpInfo (Guid itemId, ImageType imageType, System.IO.Stream body = default(System.IO.Stream))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->SetItemImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->SetItemImage");

            var localVarPath = "/Items/{itemId}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "image/_*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetItemImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Set item image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetItemImageAsync (Guid itemId, ImageType imageType, System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
             await SetItemImageWithHttpInfoAsync(itemId, imageType, body, cancellationToken);

        }

        /// <summary>
        /// Set item image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetItemImageWithHttpInfoAsync (Guid itemId, ImageType imageType, System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->SetItemImage");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->SetItemImage");

            var localVarPath = "/Items/{itemId}/Images/{imageType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "image/_*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetItemImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Set item image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">(Unused) Image index.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void SetItemImageByIndex (Guid itemId, ImageType imageType, int imageIndex, System.IO.Stream body = default(System.IO.Stream))
        {
             SetItemImageByIndexWithHttpInfo(itemId, imageType, imageIndex, body);
        }

        /// <summary>
        /// Set item image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">(Unused) Image index.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetItemImageByIndexWithHttpInfo (Guid itemId, ImageType imageType, int imageIndex, System.IO.Stream body = default(System.IO.Stream))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->SetItemImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->SetItemImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->SetItemImageByIndex");

            var localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "image/_*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetItemImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Set item image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">(Unused) Image index.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetItemImageByIndexAsync (Guid itemId, ImageType imageType, int imageIndex, System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
             await SetItemImageByIndexWithHttpInfoAsync(itemId, imageType, imageIndex, body, cancellationToken);

        }

        /// <summary>
        /// Set item image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">(Unused) Image index.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetItemImageByIndexWithHttpInfoAsync (Guid itemId, ImageType imageType, int imageIndex, System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->SetItemImageByIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->SetItemImageByIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->SetItemImageByIndex");

            var localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "image/_*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetItemImageByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the index for an item image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Old image index.</param>
        /// <param name="newIndex">New image index.</param>
        /// <returns></returns>
        public void UpdateItemImageIndex (Guid itemId, ImageType imageType, int imageIndex, int newIndex)
        {
             UpdateItemImageIndexWithHttpInfo(itemId, imageType, imageIndex, newIndex);
        }

        /// <summary>
        /// Updates the index for an item image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Old image index.</param>
        /// <param name="newIndex">New image index.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateItemImageIndexWithHttpInfo (Guid itemId, ImageType imageType, int imageIndex, int newIndex)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->UpdateItemImageIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->UpdateItemImageIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->UpdateItemImageIndex");
            // verify the required parameter 'newIndex' is set
            if (newIndex == null)
                throw new ApiException(400, "Missing required parameter 'newIndex' when calling ImageApi->UpdateItemImageIndex");

            var localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}/Index";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (newIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newIndex", newIndex)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItemImageIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the index for an item image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Old image index.</param>
        /// <param name="newIndex">New image index.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateItemImageIndexAsync (Guid itemId, ImageType imageType, int imageIndex, int newIndex, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateItemImageIndexWithHttpInfoAsync(itemId, imageType, imageIndex, newIndex, cancellationToken);

        }

        /// <summary>
        /// Updates the index for an item image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Old image index.</param>
        /// <param name="newIndex">New image index.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateItemImageIndexWithHttpInfoAsync (Guid itemId, ImageType imageType, int imageIndex, int newIndex, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ImageApi->UpdateItemImageIndex");
            // verify the required parameter 'imageType' is set
            if (imageType == null)
                throw new ApiException(400, "Missing required parameter 'imageType' when calling ImageApi->UpdateItemImageIndex");
            // verify the required parameter 'imageIndex' is set
            if (imageIndex == null)
                throw new ApiException(400, "Missing required parameter 'imageIndex' when calling ImageApi->UpdateItemImageIndex");
            // verify the required parameter 'newIndex' is set
            if (newIndex == null)
                throw new ApiException(400, "Missing required parameter 'newIndex' when calling ImageApi->UpdateItemImageIndex");

            var localVarPath = "/Items/{itemId}/Images/{imageType}/{imageIndex}/Index";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (imageType != null) localVarPathParams.Add("imageType", this.Configuration.ApiClient.ParameterToString(imageType)); // path parameter
            if (imageIndex != null) localVarPathParams.Add("imageIndex", this.Configuration.ApiClient.ParameterToString(imageIndex)); // path parameter
            if (newIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newIndex", newIndex)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItemImageIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
