/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Jellyfin.Api.Client;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILibraryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes an item from the library and filesystem.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <returns></returns>
        void DeleteItem (Guid itemId);

        /// <summary>
        /// Deletes an item from the library and filesystem.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemWithHttpInfo (Guid itemId);
        /// <summary>
        /// Deletes items from the library and filesystem.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The item ids. (optional)</param>
        /// <returns></returns>
        void DeleteItems (List<Guid> ids = default(List<Guid>));

        /// <summary>
        /// Deletes items from the library and filesystem.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The item ids. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemsWithHttpInfo (List<Guid> ids = default(List<Guid>));
        /// <summary>
        /// Gets all parents of an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <returns>List&lt;BaseItemDto&gt;</returns>
        List<BaseItemDto> GetAncestors (Guid itemId, Guid? userId = default(Guid?));

        /// <summary>
        /// Gets all parents of an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <returns>ApiResponse of List&lt;BaseItemDto&gt;</returns>
        ApiResponse<List<BaseItemDto>> GetAncestorsWithHttpInfo (Guid itemId, Guid? userId = default(Guid?));
        /// <summary>
        /// Gets critic review for an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetCriticReviews (string itemId);

        /// <summary>
        /// Gets critic review for an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetCriticReviewsWithHttpInfo (string itemId);
        /// <summary>
        /// Downloads item media.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDownload (Guid itemId);

        /// <summary>
        /// Downloads item media.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDownloadWithHttpInfo (Guid itemId);
        /// <summary>
        /// Get the original file of an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetFile (Guid itemId);

        /// <summary>
        /// Get the original file of an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetFileWithHttpInfo (Guid itemId);
        /// <summary>
        /// Get item counts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Get counts from a specific user&#39;s library. (optional)</param>
        /// <param name="isFavorite">Optional. Get counts of favorite items. (optional)</param>
        /// <returns>ItemCounts</returns>
        ItemCounts GetItemCounts (Guid? userId = default(Guid?), bool? isFavorite = default(bool?));

        /// <summary>
        /// Get item counts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Get counts from a specific user&#39;s library. (optional)</param>
        /// <param name="isFavorite">Optional. Get counts of favorite items. (optional)</param>
        /// <returns>ApiResponse of ItemCounts</returns>
        ApiResponse<ItemCounts> GetItemCountsWithHttpInfo (Guid? userId = default(Guid?), bool? isFavorite = default(bool?));
        /// <summary>
        /// Gets the library options info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryContentType">Library content type. (optional)</param>
        /// <param name="isNewLibrary">Whether this is a new library. (optional, default to false)</param>
        /// <returns>LibraryOptionsResultDto</returns>
        LibraryOptionsResultDto GetLibraryOptionsInfo (string libraryContentType = default(string), bool? isNewLibrary = default(bool?));

        /// <summary>
        /// Gets the library options info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryContentType">Library content type. (optional)</param>
        /// <param name="isNewLibrary">Whether this is a new library. (optional, default to false)</param>
        /// <returns>ApiResponse of LibraryOptionsResultDto</returns>
        ApiResponse<LibraryOptionsResultDto> GetLibraryOptionsInfoWithHttpInfo (string libraryContentType = default(string), bool? isNewLibrary = default(bool?));
        /// <summary>
        /// Gets all user media folders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional. Filter by folders that are marked hidden, or not. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetMediaFolders (bool? isHidden = default(bool?));

        /// <summary>
        /// Gets all user media folders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional. Filter by folders that are marked hidden, or not. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetMediaFoldersWithHttpInfo (bool? isHidden = default(bool?));
        /// <summary>
        /// Gets a list of physical paths from virtual folders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetPhysicalPaths ();

        /// <summary>
        /// Gets a list of physical paths from virtual folders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetPhysicalPathsWithHttpInfo ();
        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetSimilarAlbums (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>));

        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetSimilarAlbumsWithHttpInfo (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>));
        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetSimilarArtists (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>));

        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetSimilarArtistsWithHttpInfo (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>));
        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetSimilarItems (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>));

        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetSimilarItemsWithHttpInfo (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>));
        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetSimilarMovies (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>));

        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetSimilarMoviesWithHttpInfo (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>));
        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetSimilarShows (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>));

        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetSimilarShowsWithHttpInfo (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>));
        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetSimilarTrailers (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>));

        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetSimilarTrailersWithHttpInfo (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>));
        /// <summary>
        /// Get theme songs and videos for an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <returns>AllThemeMediaResult</returns>
        AllThemeMediaResult GetThemeMedia (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?));

        /// <summary>
        /// Get theme songs and videos for an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <returns>ApiResponse of AllThemeMediaResult</returns>
        ApiResponse<AllThemeMediaResult> GetThemeMediaWithHttpInfo (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?));
        /// <summary>
        /// Get theme songs for an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <returns>ThemeMediaResult</returns>
        ThemeMediaResult GetThemeSongs (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?));

        /// <summary>
        /// Get theme songs for an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <returns>ApiResponse of ThemeMediaResult</returns>
        ApiResponse<ThemeMediaResult> GetThemeSongsWithHttpInfo (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?));
        /// <summary>
        /// Get theme videos for an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <returns>ThemeMediaResult</returns>
        ThemeMediaResult GetThemeVideos (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?));

        /// <summary>
        /// Get theme videos for an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <returns>ApiResponse of ThemeMediaResult</returns>
        ApiResponse<ThemeMediaResult> GetThemeVideosWithHttpInfo (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?));
        /// <summary>
        /// Reports that new movies have been added by an external source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmdbId">The tmdbId. (optional)</param>
        /// <param name="imdbId">The imdbId. (optional)</param>
        /// <returns></returns>
        void PostAddedMovies (string tmdbId = default(string), string imdbId = default(string));

        /// <summary>
        /// Reports that new movies have been added by an external source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmdbId">The tmdbId. (optional)</param>
        /// <param name="imdbId">The imdbId. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAddedMoviesWithHttpInfo (string tmdbId = default(string), string imdbId = default(string));
        /// <summary>
        /// Reports that new episodes of a series have been added by an external source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvdbId">The tvdbId. (optional)</param>
        /// <returns></returns>
        void PostAddedSeries (string tvdbId = default(string));

        /// <summary>
        /// Reports that new episodes of a series have been added by an external source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvdbId">The tvdbId. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAddedSeriesWithHttpInfo (string tvdbId = default(string));
        /// <summary>
        /// Reports that new movies have been added by an external source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The update paths.</param>
        /// <returns></returns>
        void PostUpdatedMedia (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);

        /// <summary>
        /// Reports that new movies have been added by an external source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The update paths.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostUpdatedMediaWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);
        /// <summary>
        /// Reports that new movies have been added by an external source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmdbId">The tmdbId. (optional)</param>
        /// <param name="imdbId">The imdbId. (optional)</param>
        /// <returns></returns>
        void PostUpdatedMovies (string tmdbId = default(string), string imdbId = default(string));

        /// <summary>
        /// Reports that new movies have been added by an external source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmdbId">The tmdbId. (optional)</param>
        /// <param name="imdbId">The imdbId. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostUpdatedMoviesWithHttpInfo (string tmdbId = default(string), string imdbId = default(string));
        /// <summary>
        /// Reports that new episodes of a series have been added by an external source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvdbId">The tvdbId. (optional)</param>
        /// <returns></returns>
        void PostUpdatedSeries (string tvdbId = default(string));

        /// <summary>
        /// Reports that new episodes of a series have been added by an external source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvdbId">The tvdbId. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostUpdatedSeriesWithHttpInfo (string tvdbId = default(string));
        /// <summary>
        /// Starts a library scan.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void RefreshLibrary ();

        /// <summary>
        /// Starts a library scan.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RefreshLibraryWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes an item from the library and filesystem.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemAsync (Guid itemId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes an item from the library and filesystem.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemWithHttpInfoAsync (Guid itemId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes items from the library and filesystem.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The item ids. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemsAsync (List<Guid> ids = default(List<Guid>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes items from the library and filesystem.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The item ids. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemsWithHttpInfoAsync (List<Guid> ids = default(List<Guid>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets all parents of an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;BaseItemDto&gt;</returns>
        System.Threading.Tasks.Task<List<BaseItemDto>> GetAncestorsAsync (Guid itemId, Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all parents of an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;BaseItemDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BaseItemDto>>> GetAncestorsWithHttpInfoAsync (Guid itemId, Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets critic review for an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetCriticReviewsAsync (string itemId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets critic review for an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetCriticReviewsWithHttpInfoAsync (string itemId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Downloads item media.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDownloadAsync (Guid itemId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Downloads item media.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDownloadWithHttpInfoAsync (Guid itemId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get the original file of an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetFileAsync (Guid itemId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the original file of an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetFileWithHttpInfoAsync (Guid itemId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get item counts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Get counts from a specific user&#39;s library. (optional)</param>
        /// <param name="isFavorite">Optional. Get counts of favorite items. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemCounts</returns>
        System.Threading.Tasks.Task<ItemCounts> GetItemCountsAsync (Guid? userId = default(Guid?), bool? isFavorite = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get item counts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Get counts from a specific user&#39;s library. (optional)</param>
        /// <param name="isFavorite">Optional. Get counts of favorite items. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemCounts)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemCounts>> GetItemCountsWithHttpInfoAsync (Guid? userId = default(Guid?), bool? isFavorite = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the library options info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryContentType">Library content type. (optional)</param>
        /// <param name="isNewLibrary">Whether this is a new library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LibraryOptionsResultDto</returns>
        System.Threading.Tasks.Task<LibraryOptionsResultDto> GetLibraryOptionsInfoAsync (string libraryContentType = default(string), bool? isNewLibrary = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the library options info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryContentType">Library content type. (optional)</param>
        /// <param name="isNewLibrary">Whether this is a new library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LibraryOptionsResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<LibraryOptionsResultDto>> GetLibraryOptionsInfoWithHttpInfoAsync (string libraryContentType = default(string), bool? isNewLibrary = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets all user media folders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional. Filter by folders that are marked hidden, or not. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetMediaFoldersAsync (bool? isHidden = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all user media folders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional. Filter by folders that are marked hidden, or not. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetMediaFoldersWithHttpInfoAsync (bool? isHidden = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a list of physical paths from virtual folders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetPhysicalPathsAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of physical paths from virtual folders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetPhysicalPathsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetSimilarAlbumsAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetSimilarAlbumsWithHttpInfoAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetSimilarArtistsAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetSimilarArtistsWithHttpInfoAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetSimilarItemsAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetSimilarItemsWithHttpInfoAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetSimilarMoviesAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetSimilarMoviesWithHttpInfoAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetSimilarShowsAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetSimilarShowsWithHttpInfoAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetSimilarTrailersAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets similar items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetSimilarTrailersWithHttpInfoAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get theme songs and videos for an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AllThemeMediaResult</returns>
        System.Threading.Tasks.Task<AllThemeMediaResult> GetThemeMediaAsync (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get theme songs and videos for an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AllThemeMediaResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllThemeMediaResult>> GetThemeMediaWithHttpInfoAsync (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get theme songs for an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ThemeMediaResult</returns>
        System.Threading.Tasks.Task<ThemeMediaResult> GetThemeSongsAsync (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get theme songs for an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ThemeMediaResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThemeMediaResult>> GetThemeSongsWithHttpInfoAsync (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get theme videos for an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ThemeMediaResult</returns>
        System.Threading.Tasks.Task<ThemeMediaResult> GetThemeVideosAsync (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get theme videos for an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ThemeMediaResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThemeMediaResult>> GetThemeVideosWithHttpInfoAsync (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reports that new movies have been added by an external source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmdbId">The tmdbId. (optional)</param>
        /// <param name="imdbId">The imdbId. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAddedMoviesAsync (string tmdbId = default(string), string imdbId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports that new movies have been added by an external source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmdbId">The tmdbId. (optional)</param>
        /// <param name="imdbId">The imdbId. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAddedMoviesWithHttpInfoAsync (string tmdbId = default(string), string imdbId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reports that new episodes of a series have been added by an external source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvdbId">The tvdbId. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAddedSeriesAsync (string tvdbId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports that new episodes of a series have been added by an external source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvdbId">The tvdbId. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAddedSeriesWithHttpInfoAsync (string tvdbId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reports that new movies have been added by an external source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The update paths.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostUpdatedMediaAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports that new movies have been added by an external source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The update paths.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostUpdatedMediaWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reports that new movies have been added by an external source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmdbId">The tmdbId. (optional)</param>
        /// <param name="imdbId">The imdbId. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostUpdatedMoviesAsync (string tmdbId = default(string), string imdbId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports that new movies have been added by an external source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmdbId">The tmdbId. (optional)</param>
        /// <param name="imdbId">The imdbId. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostUpdatedMoviesWithHttpInfoAsync (string tmdbId = default(string), string imdbId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reports that new episodes of a series have been added by an external source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvdbId">The tvdbId. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostUpdatedSeriesAsync (string tvdbId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports that new episodes of a series have been added by an external source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvdbId">The tvdbId. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostUpdatedSeriesWithHttpInfoAsync (string tvdbId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Starts a library scan.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RefreshLibraryAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Starts a library scan.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RefreshLibraryWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LibraryApi : ILibraryApi
    {
        private Jellyfin.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LibraryApi(String basePath)
        {
            this.Configuration = new Jellyfin.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryApi"/> class
        /// </summary>
        /// <returns></returns>
        public LibraryApi()
        {
            this.Configuration = Jellyfin.Api.Client.Configuration.Default;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LibraryApi(Jellyfin.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Jellyfin.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Jellyfin.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Jellyfin.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes an item from the library and filesystem. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <returns></returns>
        public void DeleteItem (Guid itemId)
        {
             DeleteItemWithHttpInfo(itemId);
        }

        /// <summary>
        /// Deletes an item from the library and filesystem. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemWithHttpInfo (Guid itemId)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->DeleteItem");

            var localVarPath = "/Items/{itemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes an item from the library and filesystem. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemAsync (Guid itemId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteItemWithHttpInfoAsync(itemId, cancellationToken);

        }

        /// <summary>
        /// Deletes an item from the library and filesystem. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemWithHttpInfoAsync (Guid itemId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->DeleteItem");

            var localVarPath = "/Items/{itemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes items from the library and filesystem. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The item ids. (optional)</param>
        /// <returns></returns>
        public void DeleteItems (List<Guid> ids = default(List<Guid>))
        {
             DeleteItemsWithHttpInfo(ids);
        }

        /// <summary>
        /// Deletes items from the library and filesystem. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The item ids. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemsWithHttpInfo (List<Guid> ids = default(List<Guid>))
        {

            var localVarPath = "/Items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ids", ids)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes items from the library and filesystem. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The item ids. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemsAsync (List<Guid> ids = default(List<Guid>), CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteItemsWithHttpInfoAsync(ids, cancellationToken);

        }

        /// <summary>
        /// Deletes items from the library and filesystem. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The item ids. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemsWithHttpInfoAsync (List<Guid> ids = default(List<Guid>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ids", ids)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets all parents of an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <returns>List&lt;BaseItemDto&gt;</returns>
        public List<BaseItemDto> GetAncestors (Guid itemId, Guid? userId = default(Guid?))
        {
             ApiResponse<List<BaseItemDto>> localVarResponse = GetAncestorsWithHttpInfo(itemId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all parents of an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <returns>ApiResponse of List&lt;BaseItemDto&gt;</returns>
        public ApiResponse<List<BaseItemDto>> GetAncestorsWithHttpInfo (Guid itemId, Guid? userId = default(Guid?))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetAncestors");

            var localVarPath = "/Items/{itemId}/Ancestors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAncestors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BaseItemDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BaseItemDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BaseItemDto>)));
        }

        /// <summary>
        /// Gets all parents of an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;BaseItemDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<BaseItemDto>> GetAncestorsAsync (Guid itemId, Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<BaseItemDto>> localVarResponse = await GetAncestorsWithHttpInfoAsync(itemId, userId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all parents of an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;BaseItemDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BaseItemDto>>> GetAncestorsWithHttpInfoAsync (Guid itemId, Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetAncestors");

            var localVarPath = "/Items/{itemId}/Ancestors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAncestors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BaseItemDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BaseItemDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BaseItemDto>)));
        }

        /// <summary>
        /// Gets critic review for an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetCriticReviews (string itemId)
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetCriticReviewsWithHttpInfo(itemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets critic review for an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetCriticReviewsWithHttpInfo (string itemId)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetCriticReviews");

            var localVarPath = "/Items/{itemId}/CriticReviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCriticReviews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets critic review for an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetCriticReviewsAsync (string itemId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetCriticReviewsWithHttpInfoAsync(itemId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets critic review for an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetCriticReviewsWithHttpInfoAsync (string itemId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetCriticReviews");

            var localVarPath = "/Items/{itemId}/CriticReviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCriticReviews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Downloads item media. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDownload (Guid itemId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetDownloadWithHttpInfo(itemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Downloads item media. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetDownloadWithHttpInfo (Guid itemId)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetDownload");

            var localVarPath = "/Items/{itemId}/Download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "video/_*",
                "audio/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDownload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Downloads item media. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDownloadAsync (Guid itemId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetDownloadWithHttpInfoAsync(itemId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Downloads item media. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDownloadWithHttpInfoAsync (Guid itemId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetDownload");

            var localVarPath = "/Items/{itemId}/Download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "video/_*",
                "audio/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDownload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get the original file of an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetFile (Guid itemId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetFileWithHttpInfo(itemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the original file of an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetFileWithHttpInfo (Guid itemId)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetFile");

            var localVarPath = "/Items/{itemId}/File";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "video/_*",
                "audio/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get the original file of an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetFileAsync (Guid itemId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetFileWithHttpInfoAsync(itemId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the original file of an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetFileWithHttpInfoAsync (Guid itemId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetFile");

            var localVarPath = "/Items/{itemId}/File";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "video/_*",
                "audio/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get item counts. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Get counts from a specific user&#39;s library. (optional)</param>
        /// <param name="isFavorite">Optional. Get counts of favorite items. (optional)</param>
        /// <returns>ItemCounts</returns>
        public ItemCounts GetItemCounts (Guid? userId = default(Guid?), bool? isFavorite = default(bool?))
        {
             ApiResponse<ItemCounts> localVarResponse = GetItemCountsWithHttpInfo(userId, isFavorite);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get item counts. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Get counts from a specific user&#39;s library. (optional)</param>
        /// <param name="isFavorite">Optional. Get counts of favorite items. (optional)</param>
        /// <returns>ApiResponse of ItemCounts</returns>
        public ApiResponse<ItemCounts> GetItemCountsWithHttpInfo (Guid? userId = default(Guid?), bool? isFavorite = default(bool?))
        {

            var localVarPath = "/Items/Counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isFavorite", isFavorite)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemCounts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemCounts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemCounts)));
        }

        /// <summary>
        /// Get item counts. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Get counts from a specific user&#39;s library. (optional)</param>
        /// <param name="isFavorite">Optional. Get counts of favorite items. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ItemCounts</returns>
        public async System.Threading.Tasks.Task<ItemCounts> GetItemCountsAsync (Guid? userId = default(Guid?), bool? isFavorite = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ItemCounts> localVarResponse = await GetItemCountsWithHttpInfoAsync(userId, isFavorite, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get item counts. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Get counts from a specific user&#39;s library. (optional)</param>
        /// <param name="isFavorite">Optional. Get counts of favorite items. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ItemCounts)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemCounts>> GetItemCountsWithHttpInfoAsync (Guid? userId = default(Guid?), bool? isFavorite = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Items/Counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isFavorite", isFavorite)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemCounts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemCounts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemCounts)));
        }

        /// <summary>
        /// Gets the library options info. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryContentType">Library content type. (optional)</param>
        /// <param name="isNewLibrary">Whether this is a new library. (optional, default to false)</param>
        /// <returns>LibraryOptionsResultDto</returns>
        public LibraryOptionsResultDto GetLibraryOptionsInfo (string libraryContentType = default(string), bool? isNewLibrary = default(bool?))
        {
             ApiResponse<LibraryOptionsResultDto> localVarResponse = GetLibraryOptionsInfoWithHttpInfo(libraryContentType, isNewLibrary);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the library options info. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryContentType">Library content type. (optional)</param>
        /// <param name="isNewLibrary">Whether this is a new library. (optional, default to false)</param>
        /// <returns>ApiResponse of LibraryOptionsResultDto</returns>
        public ApiResponse<LibraryOptionsResultDto> GetLibraryOptionsInfoWithHttpInfo (string libraryContentType = default(string), bool? isNewLibrary = default(bool?))
        {

            var localVarPath = "/Libraries/AvailableOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (libraryContentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "libraryContentType", libraryContentType)); // query parameter
            if (isNewLibrary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isNewLibrary", isNewLibrary)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLibraryOptionsInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryOptionsResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LibraryOptionsResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryOptionsResultDto)));
        }

        /// <summary>
        /// Gets the library options info. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryContentType">Library content type. (optional)</param>
        /// <param name="isNewLibrary">Whether this is a new library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LibraryOptionsResultDto</returns>
        public async System.Threading.Tasks.Task<LibraryOptionsResultDto> GetLibraryOptionsInfoAsync (string libraryContentType = default(string), bool? isNewLibrary = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<LibraryOptionsResultDto> localVarResponse = await GetLibraryOptionsInfoWithHttpInfoAsync(libraryContentType, isNewLibrary, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the library options info. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryContentType">Library content type. (optional)</param>
        /// <param name="isNewLibrary">Whether this is a new library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LibraryOptionsResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LibraryOptionsResultDto>> GetLibraryOptionsInfoWithHttpInfoAsync (string libraryContentType = default(string), bool? isNewLibrary = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Libraries/AvailableOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (libraryContentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "libraryContentType", libraryContentType)); // query parameter
            if (isNewLibrary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isNewLibrary", isNewLibrary)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLibraryOptionsInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryOptionsResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LibraryOptionsResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryOptionsResultDto)));
        }

        /// <summary>
        /// Gets all user media folders. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional. Filter by folders that are marked hidden, or not. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetMediaFolders (bool? isHidden = default(bool?))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetMediaFoldersWithHttpInfo(isHidden);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all user media folders. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional. Filter by folders that are marked hidden, or not. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetMediaFoldersWithHttpInfo (bool? isHidden = default(bool?))
        {

            var localVarPath = "/Library/MediaFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (isHidden != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isHidden", isHidden)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMediaFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets all user media folders. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional. Filter by folders that are marked hidden, or not. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetMediaFoldersAsync (bool? isHidden = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetMediaFoldersWithHttpInfoAsync(isHidden, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all user media folders. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional. Filter by folders that are marked hidden, or not. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetMediaFoldersWithHttpInfoAsync (bool? isHidden = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Library/MediaFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (isHidden != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isHidden", isHidden)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMediaFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets a list of physical paths from virtual folders. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetPhysicalPaths ()
        {
             ApiResponse<List<string>> localVarResponse = GetPhysicalPathsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of physical paths from virtual folders. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse<List<string>> GetPhysicalPathsWithHttpInfo ()
        {

            var localVarPath = "/Library/PhysicalPaths";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPhysicalPaths", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Gets a list of physical paths from virtual folders. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetPhysicalPathsAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<string>> localVarResponse = await GetPhysicalPathsWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of physical paths from virtual folders. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetPhysicalPathsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Library/PhysicalPaths";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPhysicalPaths", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetSimilarAlbums (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetSimilarAlbumsWithHttpInfo(itemId, excludeArtistIds, userId, limit, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetSimilarAlbumsWithHttpInfo (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetSimilarAlbums");

            var localVarPath = "/Albums/{itemId}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (excludeArtistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "excludeArtistIds", excludeArtistIds)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimilarAlbums", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetSimilarAlbumsAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetSimilarAlbumsWithHttpInfoAsync(itemId, excludeArtistIds, userId, limit, fields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetSimilarAlbumsWithHttpInfoAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetSimilarAlbums");

            var localVarPath = "/Albums/{itemId}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (excludeArtistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "excludeArtistIds", excludeArtistIds)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimilarAlbums", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetSimilarArtists (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetSimilarArtistsWithHttpInfo(itemId, excludeArtistIds, userId, limit, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetSimilarArtistsWithHttpInfo (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetSimilarArtists");

            var localVarPath = "/Artists/{itemId}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (excludeArtistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "excludeArtistIds", excludeArtistIds)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimilarArtists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetSimilarArtistsAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetSimilarArtistsWithHttpInfoAsync(itemId, excludeArtistIds, userId, limit, fields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetSimilarArtistsWithHttpInfoAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetSimilarArtists");

            var localVarPath = "/Artists/{itemId}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (excludeArtistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "excludeArtistIds", excludeArtistIds)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimilarArtists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetSimilarItems (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetSimilarItemsWithHttpInfo(itemId, excludeArtistIds, userId, limit, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetSimilarItemsWithHttpInfo (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetSimilarItems");

            var localVarPath = "/Items/{itemId}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (excludeArtistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "excludeArtistIds", excludeArtistIds)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimilarItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetSimilarItemsAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetSimilarItemsWithHttpInfoAsync(itemId, excludeArtistIds, userId, limit, fields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetSimilarItemsWithHttpInfoAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetSimilarItems");

            var localVarPath = "/Items/{itemId}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (excludeArtistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "excludeArtistIds", excludeArtistIds)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimilarItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetSimilarMovies (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetSimilarMoviesWithHttpInfo(itemId, excludeArtistIds, userId, limit, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetSimilarMoviesWithHttpInfo (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetSimilarMovies");

            var localVarPath = "/Movies/{itemId}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (excludeArtistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "excludeArtistIds", excludeArtistIds)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimilarMovies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetSimilarMoviesAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetSimilarMoviesWithHttpInfoAsync(itemId, excludeArtistIds, userId, limit, fields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetSimilarMoviesWithHttpInfoAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetSimilarMovies");

            var localVarPath = "/Movies/{itemId}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (excludeArtistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "excludeArtistIds", excludeArtistIds)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimilarMovies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetSimilarShows (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetSimilarShowsWithHttpInfo(itemId, excludeArtistIds, userId, limit, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetSimilarShowsWithHttpInfo (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetSimilarShows");

            var localVarPath = "/Shows/{itemId}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (excludeArtistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "excludeArtistIds", excludeArtistIds)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimilarShows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetSimilarShowsAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetSimilarShowsWithHttpInfoAsync(itemId, excludeArtistIds, userId, limit, fields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetSimilarShowsWithHttpInfoAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetSimilarShows");

            var localVarPath = "/Shows/{itemId}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (excludeArtistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "excludeArtistIds", excludeArtistIds)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimilarShows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetSimilarTrailers (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetSimilarTrailersWithHttpInfo(itemId, excludeArtistIds, userId, limit, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetSimilarTrailersWithHttpInfo (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetSimilarTrailers");

            var localVarPath = "/Trailers/{itemId}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (excludeArtistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "excludeArtistIds", excludeArtistIds)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimilarTrailers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetSimilarTrailersAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetSimilarTrailersWithHttpInfoAsync(itemId, excludeArtistIds, userId, limit, fields, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets similar items. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="excludeArtistIds">Exclude artist ids. (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetSimilarTrailersWithHttpInfoAsync (Guid itemId, List<Guid> excludeArtistIds = default(List<Guid>), Guid? userId = default(Guid?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetSimilarTrailers");

            var localVarPath = "/Trailers/{itemId}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (excludeArtistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "excludeArtistIds", excludeArtistIds)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimilarTrailers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Get theme songs and videos for an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <returns>AllThemeMediaResult</returns>
        public AllThemeMediaResult GetThemeMedia (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?))
        {
             ApiResponse<AllThemeMediaResult> localVarResponse = GetThemeMediaWithHttpInfo(itemId, userId, inheritFromParent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get theme songs and videos for an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <returns>ApiResponse of AllThemeMediaResult</returns>
        public ApiResponse<AllThemeMediaResult> GetThemeMediaWithHttpInfo (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetThemeMedia");

            var localVarPath = "/Items/{itemId}/ThemeMedia";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (inheritFromParent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inheritFromParent", inheritFromParent)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThemeMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllThemeMediaResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AllThemeMediaResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllThemeMediaResult)));
        }

        /// <summary>
        /// Get theme songs and videos for an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AllThemeMediaResult</returns>
        public async System.Threading.Tasks.Task<AllThemeMediaResult> GetThemeMediaAsync (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AllThemeMediaResult> localVarResponse = await GetThemeMediaWithHttpInfoAsync(itemId, userId, inheritFromParent, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get theme songs and videos for an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AllThemeMediaResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AllThemeMediaResult>> GetThemeMediaWithHttpInfoAsync (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetThemeMedia");

            var localVarPath = "/Items/{itemId}/ThemeMedia";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (inheritFromParent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inheritFromParent", inheritFromParent)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThemeMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllThemeMediaResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AllThemeMediaResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllThemeMediaResult)));
        }

        /// <summary>
        /// Get theme songs for an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <returns>ThemeMediaResult</returns>
        public ThemeMediaResult GetThemeSongs (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?))
        {
             ApiResponse<ThemeMediaResult> localVarResponse = GetThemeSongsWithHttpInfo(itemId, userId, inheritFromParent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get theme songs for an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <returns>ApiResponse of ThemeMediaResult</returns>
        public ApiResponse<ThemeMediaResult> GetThemeSongsWithHttpInfo (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetThemeSongs");

            var localVarPath = "/Items/{itemId}/ThemeSongs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (inheritFromParent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inheritFromParent", inheritFromParent)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThemeSongs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThemeMediaResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThemeMediaResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThemeMediaResult)));
        }

        /// <summary>
        /// Get theme songs for an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ThemeMediaResult</returns>
        public async System.Threading.Tasks.Task<ThemeMediaResult> GetThemeSongsAsync (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ThemeMediaResult> localVarResponse = await GetThemeSongsWithHttpInfoAsync(itemId, userId, inheritFromParent, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get theme songs for an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ThemeMediaResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThemeMediaResult>> GetThemeSongsWithHttpInfoAsync (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetThemeSongs");

            var localVarPath = "/Items/{itemId}/ThemeSongs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (inheritFromParent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inheritFromParent", inheritFromParent)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThemeSongs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThemeMediaResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThemeMediaResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThemeMediaResult)));
        }

        /// <summary>
        /// Get theme videos for an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <returns>ThemeMediaResult</returns>
        public ThemeMediaResult GetThemeVideos (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?))
        {
             ApiResponse<ThemeMediaResult> localVarResponse = GetThemeVideosWithHttpInfo(itemId, userId, inheritFromParent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get theme videos for an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <returns>ApiResponse of ThemeMediaResult</returns>
        public ApiResponse<ThemeMediaResult> GetThemeVideosWithHttpInfo (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetThemeVideos");

            var localVarPath = "/Items/{itemId}/ThemeVideos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (inheritFromParent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inheritFromParent", inheritFromParent)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThemeVideos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThemeMediaResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThemeMediaResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThemeMediaResult)));
        }

        /// <summary>
        /// Get theme videos for an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ThemeMediaResult</returns>
        public async System.Threading.Tasks.Task<ThemeMediaResult> GetThemeVideosAsync (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ThemeMediaResult> localVarResponse = await GetThemeVideosWithHttpInfoAsync(itemId, userId, inheritFromParent, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get theme videos for an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data. (optional)</param>
        /// <param name="inheritFromParent">Optional. Determines whether or not parent items should be searched for theme media. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ThemeMediaResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThemeMediaResult>> GetThemeVideosWithHttpInfoAsync (Guid itemId, Guid? userId = default(Guid?), bool? inheritFromParent = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling LibraryApi->GetThemeVideos");

            var localVarPath = "/Items/{itemId}/ThemeVideos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (inheritFromParent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inheritFromParent", inheritFromParent)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThemeVideos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThemeMediaResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThemeMediaResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThemeMediaResult)));
        }

        /// <summary>
        /// Reports that new movies have been added by an external source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmdbId">The tmdbId. (optional)</param>
        /// <param name="imdbId">The imdbId. (optional)</param>
        /// <returns></returns>
        public void PostAddedMovies (string tmdbId = default(string), string imdbId = default(string))
        {
             PostAddedMoviesWithHttpInfo(tmdbId, imdbId);
        }

        /// <summary>
        /// Reports that new movies have been added by an external source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmdbId">The tmdbId. (optional)</param>
        /// <param name="imdbId">The imdbId. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostAddedMoviesWithHttpInfo (string tmdbId = default(string), string imdbId = default(string))
        {

            var localVarPath = "/Library/Movies/Added";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tmdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tmdbId", tmdbId)); // query parameter
            if (imdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imdbId", imdbId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAddedMovies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports that new movies have been added by an external source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmdbId">The tmdbId. (optional)</param>
        /// <param name="imdbId">The imdbId. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAddedMoviesAsync (string tmdbId = default(string), string imdbId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostAddedMoviesWithHttpInfoAsync(tmdbId, imdbId, cancellationToken);

        }

        /// <summary>
        /// Reports that new movies have been added by an external source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmdbId">The tmdbId. (optional)</param>
        /// <param name="imdbId">The imdbId. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostAddedMoviesWithHttpInfoAsync (string tmdbId = default(string), string imdbId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Library/Movies/Added";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tmdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tmdbId", tmdbId)); // query parameter
            if (imdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imdbId", imdbId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAddedMovies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports that new episodes of a series have been added by an external source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvdbId">The tvdbId. (optional)</param>
        /// <returns></returns>
        public void PostAddedSeries (string tvdbId = default(string))
        {
             PostAddedSeriesWithHttpInfo(tvdbId);
        }

        /// <summary>
        /// Reports that new episodes of a series have been added by an external source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvdbId">The tvdbId. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostAddedSeriesWithHttpInfo (string tvdbId = default(string))
        {

            var localVarPath = "/Library/Series/Added";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tvdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tvdbId", tvdbId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAddedSeries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports that new episodes of a series have been added by an external source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvdbId">The tvdbId. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAddedSeriesAsync (string tvdbId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostAddedSeriesWithHttpInfoAsync(tvdbId, cancellationToken);

        }

        /// <summary>
        /// Reports that new episodes of a series have been added by an external source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvdbId">The tvdbId. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostAddedSeriesWithHttpInfoAsync (string tvdbId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Library/Series/Added";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tvdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tvdbId", tvdbId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAddedSeries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports that new movies have been added by an external source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The update paths.</param>
        /// <returns></returns>
        public void PostUpdatedMedia (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
             PostUpdatedMediaWithHttpInfo(UNKNOWN_BASE_TYPE);
        }

        /// <summary>
        /// Reports that new movies have been added by an external source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The update paths.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostUpdatedMediaWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling LibraryApi->PostUpdatedMedia");

            var localVarPath = "/Library/Media/Updated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUpdatedMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports that new movies have been added by an external source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The update paths.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostUpdatedMediaAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostUpdatedMediaWithHttpInfoAsync(UNKNOWN_BASE_TYPE, cancellationToken);

        }

        /// <summary>
        /// Reports that new movies have been added by an external source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The update paths.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostUpdatedMediaWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling LibraryApi->PostUpdatedMedia");

            var localVarPath = "/Library/Media/Updated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUpdatedMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports that new movies have been added by an external source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmdbId">The tmdbId. (optional)</param>
        /// <param name="imdbId">The imdbId. (optional)</param>
        /// <returns></returns>
        public void PostUpdatedMovies (string tmdbId = default(string), string imdbId = default(string))
        {
             PostUpdatedMoviesWithHttpInfo(tmdbId, imdbId);
        }

        /// <summary>
        /// Reports that new movies have been added by an external source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmdbId">The tmdbId. (optional)</param>
        /// <param name="imdbId">The imdbId. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostUpdatedMoviesWithHttpInfo (string tmdbId = default(string), string imdbId = default(string))
        {

            var localVarPath = "/Library/Movies/Updated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tmdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tmdbId", tmdbId)); // query parameter
            if (imdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imdbId", imdbId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUpdatedMovies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports that new movies have been added by an external source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmdbId">The tmdbId. (optional)</param>
        /// <param name="imdbId">The imdbId. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostUpdatedMoviesAsync (string tmdbId = default(string), string imdbId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostUpdatedMoviesWithHttpInfoAsync(tmdbId, imdbId, cancellationToken);

        }

        /// <summary>
        /// Reports that new movies have been added by an external source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tmdbId">The tmdbId. (optional)</param>
        /// <param name="imdbId">The imdbId. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostUpdatedMoviesWithHttpInfoAsync (string tmdbId = default(string), string imdbId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Library/Movies/Updated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tmdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tmdbId", tmdbId)); // query parameter
            if (imdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imdbId", imdbId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUpdatedMovies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports that new episodes of a series have been added by an external source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvdbId">The tvdbId. (optional)</param>
        /// <returns></returns>
        public void PostUpdatedSeries (string tvdbId = default(string))
        {
             PostUpdatedSeriesWithHttpInfo(tvdbId);
        }

        /// <summary>
        /// Reports that new episodes of a series have been added by an external source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvdbId">The tvdbId. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostUpdatedSeriesWithHttpInfo (string tvdbId = default(string))
        {

            var localVarPath = "/Library/Series/Updated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tvdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tvdbId", tvdbId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUpdatedSeries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports that new episodes of a series have been added by an external source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvdbId">The tvdbId. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostUpdatedSeriesAsync (string tvdbId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostUpdatedSeriesWithHttpInfoAsync(tvdbId, cancellationToken);

        }

        /// <summary>
        /// Reports that new episodes of a series have been added by an external source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvdbId">The tvdbId. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostUpdatedSeriesWithHttpInfoAsync (string tvdbId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Library/Series/Updated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tvdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tvdbId", tvdbId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUpdatedSeries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Starts a library scan. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void RefreshLibrary ()
        {
             RefreshLibraryWithHttpInfo();
        }

        /// <summary>
        /// Starts a library scan. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RefreshLibraryWithHttpInfo ()
        {

            var localVarPath = "/Library/Refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefreshLibrary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Starts a library scan. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RefreshLibraryAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             await RefreshLibraryWithHttpInfoAsync(cancellationToken);

        }

        /// <summary>
        /// Starts a library scan. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RefreshLibraryWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Library/Refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefreshLibrary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
