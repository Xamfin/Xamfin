/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Jellyfin.Api.Client;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Authenticates a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="pw">The password as plain text.</param>
        /// <param name="password">The password sha1-hash. (optional)</param>
        /// <returns>AuthenticationResult</returns>
        AuthenticationResult AuthenticateUser (Guid userId, string pw, string password = default(string));

        /// <summary>
        /// Authenticates a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="pw">The password as plain text.</param>
        /// <param name="password">The password sha1-hash. (optional)</param>
        /// <returns>ApiResponse of AuthenticationResult</returns>
        ApiResponse<AuthenticationResult> AuthenticateUserWithHttpInfo (Guid userId, string pw, string password = default(string));
        /// <summary>
        /// Authenticates a user by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.AuthenticateUserByName(Jellyfin.Api.Models.UserDtos.AuthenticateUserByName) request.</param>
        /// <returns>AuthenticationResult</returns>
        AuthenticationResult AuthenticateUserByName (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);

        /// <summary>
        /// Authenticates a user by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.AuthenticateUserByName(Jellyfin.Api.Models.UserDtos.AuthenticateUserByName) request.</param>
        /// <returns>ApiResponse of AuthenticationResult</returns>
        ApiResponse<AuthenticationResult> AuthenticateUserByNameWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);
        /// <summary>
        /// Authenticates a user with quick connect.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The Jellyfin.Api.Models.UserDtos.QuickConnectDto request.</param>
        /// <returns>AuthenticationResult</returns>
        AuthenticationResult AuthenticateWithQuickConnect (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);

        /// <summary>
        /// Authenticates a user with quick connect.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The Jellyfin.Api.Models.UserDtos.QuickConnectDto request.</param>
        /// <returns>ApiResponse of AuthenticationResult</returns>
        ApiResponse<AuthenticationResult> AuthenticateWithQuickConnectWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);
        /// <summary>
        /// Creates a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The create user by name request body.</param>
        /// <returns>UserDto</returns>
        UserDto CreateUserByName (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);

        /// <summary>
        /// Creates a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The create user by name request body.</param>
        /// <returns>ApiResponse of UserDto</returns>
        ApiResponse<UserDto> CreateUserByNameWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);
        /// <summary>
        /// Deletes a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        void DeleteUser (Guid userId);

        /// <summary>
        /// Deletes a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserWithHttpInfo (Guid userId);
        /// <summary>
        /// Initiates the forgot password process for a local user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The forgot password request containing the entered username.</param>
        /// <returns>ForgotPasswordResult</returns>
        ForgotPasswordResult ForgotPassword (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);

        /// <summary>
        /// Initiates the forgot password process for a local user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The forgot password request containing the entered username.</param>
        /// <returns>ApiResponse of ForgotPasswordResult</returns>
        ApiResponse<ForgotPasswordResult> ForgotPasswordWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);
        /// <summary>
        /// Redeems a forgot password pin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The forgot password pin request containing the entered pin.</param>
        /// <returns>PinRedeemResult</returns>
        PinRedeemResult ForgotPasswordPin (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);

        /// <summary>
        /// Redeems a forgot password pin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The forgot password pin request containing the entered pin.</param>
        /// <returns>ApiResponse of PinRedeemResult</returns>
        ApiResponse<PinRedeemResult> ForgotPasswordPinWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);
        /// <summary>
        /// Gets the user based on auth token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserDto</returns>
        UserDto GetCurrentUser ();

        /// <summary>
        /// Gets the user based on auth token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserDto</returns>
        ApiResponse<UserDto> GetCurrentUserWithHttpInfo ();
        /// <summary>
        /// Gets a list of publicly visible users for display on a login screen.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserDto&gt;</returns>
        List<UserDto> GetPublicUsers ();

        /// <summary>
        /// Gets a list of publicly visible users for display on a login screen.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserDto&gt;</returns>
        ApiResponse<List<UserDto>> GetPublicUsersWithHttpInfo ();
        /// <summary>
        /// Gets a user by Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <returns>UserDto</returns>
        UserDto GetUserById (Guid userId);

        /// <summary>
        /// Gets a user by Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <returns>ApiResponse of UserDto</returns>
        ApiResponse<UserDto> GetUserByIdWithHttpInfo (Guid userId);
        /// <summary>
        /// Gets a list of users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional filter by IsHidden&#x3D;true or false. (optional)</param>
        /// <param name="isDisabled">Optional filter by IsDisabled&#x3D;true or false. (optional)</param>
        /// <returns>List&lt;UserDto&gt;</returns>
        List<UserDto> GetUsers (bool? isHidden = default(bool?), bool? isDisabled = default(bool?));

        /// <summary>
        /// Gets a list of users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional filter by IsHidden&#x3D;true or false. (optional)</param>
        /// <param name="isDisabled">Optional filter by IsDisabled&#x3D;true or false. (optional)</param>
        /// <returns>ApiResponse of List&lt;UserDto&gt;</returns>
        ApiResponse<List<UserDto>> GetUsersWithHttpInfo (bool? isHidden = default(bool?), bool? isDisabled = default(bool?));
        /// <summary>
        /// Updates a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The updated user model.</param>
        /// <returns></returns>
        void UpdateUser (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);

        /// <summary>
        /// Updates a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The updated user model.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateUserWithHttpInfo (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);
        /// <summary>
        /// Updates a user configuration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The new user configuration.</param>
        /// <returns></returns>
        void UpdateUserConfiguration (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);

        /// <summary>
        /// Updates a user configuration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The new user configuration.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateUserConfigurationWithHttpInfo (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);
        /// <summary>
        /// Updates a user&#39;s easy password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.UpdateUserEasyPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserEasyPassword) request.</param>
        /// <returns></returns>
        void UpdateUserEasyPassword (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);

        /// <summary>
        /// Updates a user&#39;s easy password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.UpdateUserEasyPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserEasyPassword) request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateUserEasyPasswordWithHttpInfo (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);
        /// <summary>
        /// Updates a user&#39;s password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.UpdateUserPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserPassword) request.</param>
        /// <returns></returns>
        void UpdateUserPassword (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);

        /// <summary>
        /// Updates a user&#39;s password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.UpdateUserPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserPassword) request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateUserPasswordWithHttpInfo (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);
        /// <summary>
        /// Updates a user policy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The new user policy.</param>
        /// <returns></returns>
        void UpdateUserPolicy (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);

        /// <summary>
        /// Updates a user policy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The new user policy.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateUserPolicyWithHttpInfo (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Authenticates a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="pw">The password as plain text.</param>
        /// <param name="password">The password sha1-hash. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AuthenticationResult</returns>
        System.Threading.Tasks.Task<AuthenticationResult> AuthenticateUserAsync (Guid userId, string pw, string password = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Authenticates a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="pw">The password as plain text.</param>
        /// <param name="password">The password sha1-hash. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AuthenticationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationResult>> AuthenticateUserWithHttpInfoAsync (Guid userId, string pw, string password = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Authenticates a user by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.AuthenticateUserByName(Jellyfin.Api.Models.UserDtos.AuthenticateUserByName) request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AuthenticationResult</returns>
        System.Threading.Tasks.Task<AuthenticationResult> AuthenticateUserByNameAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Authenticates a user by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.AuthenticateUserByName(Jellyfin.Api.Models.UserDtos.AuthenticateUserByName) request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AuthenticationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationResult>> AuthenticateUserByNameWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Authenticates a user with quick connect.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The Jellyfin.Api.Models.UserDtos.QuickConnectDto request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AuthenticationResult</returns>
        System.Threading.Tasks.Task<AuthenticationResult> AuthenticateWithQuickConnectAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Authenticates a user with quick connect.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The Jellyfin.Api.Models.UserDtos.QuickConnectDto request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AuthenticationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationResult>> AuthenticateWithQuickConnectWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The create user by name request body.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserDto</returns>
        System.Threading.Tasks.Task<UserDto> CreateUserByNameAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The create user by name request body.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDto>> CreateUserByNameWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserAsync (Guid userId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserWithHttpInfoAsync (Guid userId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Initiates the forgot password process for a local user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The forgot password request containing the entered username.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ForgotPasswordResult</returns>
        System.Threading.Tasks.Task<ForgotPasswordResult> ForgotPasswordAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Initiates the forgot password process for a local user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The forgot password request containing the entered username.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ForgotPasswordResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForgotPasswordResult>> ForgotPasswordWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Redeems a forgot password pin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The forgot password pin request containing the entered pin.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PinRedeemResult</returns>
        System.Threading.Tasks.Task<PinRedeemResult> ForgotPasswordPinAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Redeems a forgot password pin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The forgot password pin request containing the entered pin.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PinRedeemResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PinRedeemResult>> ForgotPasswordPinWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the user based on auth token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserDto</returns>
        System.Threading.Tasks.Task<UserDto> GetCurrentUserAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the user based on auth token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDto>> GetCurrentUserWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a list of publicly visible users for display on a login screen.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;UserDto&gt;</returns>
        System.Threading.Tasks.Task<List<UserDto>> GetPublicUsersAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of publicly visible users for display on a login screen.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UserDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserDto>>> GetPublicUsersWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a user by Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserDto</returns>
        System.Threading.Tasks.Task<UserDto> GetUserByIdAsync (Guid userId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a user by Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDto>> GetUserByIdWithHttpInfoAsync (Guid userId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a list of users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional filter by IsHidden&#x3D;true or false. (optional)</param>
        /// <param name="isDisabled">Optional filter by IsDisabled&#x3D;true or false. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;UserDto&gt;</returns>
        System.Threading.Tasks.Task<List<UserDto>> GetUsersAsync (bool? isHidden = default(bool?), bool? isDisabled = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional filter by IsHidden&#x3D;true or false. (optional)</param>
        /// <param name="isDisabled">Optional filter by IsDisabled&#x3D;true or false. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UserDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserDto>>> GetUsersWithHttpInfoAsync (bool? isHidden = default(bool?), bool? isDisabled = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The updated user model.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateUserAsync (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The updated user model.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserWithHttpInfoAsync (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a user configuration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The new user configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateUserConfigurationAsync (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a user configuration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The new user configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserConfigurationWithHttpInfoAsync (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a user&#39;s easy password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.UpdateUserEasyPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserEasyPassword) request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateUserEasyPasswordAsync (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a user&#39;s easy password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.UpdateUserEasyPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserEasyPassword) request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserEasyPasswordWithHttpInfoAsync (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a user&#39;s password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.UpdateUserPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserPassword) request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateUserPasswordAsync (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a user&#39;s password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.UpdateUserPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserPassword) request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserPasswordWithHttpInfoAsync (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a user policy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The new user policy.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateUserPolicyAsync (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a user policy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The new user policy.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserPolicyWithHttpInfoAsync (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserApi : IUserApi
    {
        private Jellyfin.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi(String basePath)
        {
            this.Configuration = new Jellyfin.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// </summary>
        /// <returns></returns>
        public UserApi()
        {
            this.Configuration = Jellyfin.Api.Client.Configuration.Default;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserApi(Jellyfin.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Jellyfin.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Jellyfin.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Jellyfin.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Authenticates a user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="pw">The password as plain text.</param>
        /// <param name="password">The password sha1-hash. (optional)</param>
        /// <returns>AuthenticationResult</returns>
        public AuthenticationResult AuthenticateUser (Guid userId, string pw, string password = default(string))
        {
             ApiResponse<AuthenticationResult> localVarResponse = AuthenticateUserWithHttpInfo(userId, pw, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticates a user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="pw">The password as plain text.</param>
        /// <param name="password">The password sha1-hash. (optional)</param>
        /// <returns>ApiResponse of AuthenticationResult</returns>
        public ApiResponse<AuthenticationResult> AuthenticateUserWithHttpInfo (Guid userId, string pw, string password = default(string))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->AuthenticateUser");
            // verify the required parameter 'pw' is set
            if (pw == null)
                throw new ApiException(400, "Missing required parameter 'pw' when calling UserApi->AuthenticateUser");

            var localVarPath = "/Users/{userId}/Authenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (pw != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pw", pw)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationResult)));
        }

        /// <summary>
        /// Authenticates a user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="pw">The password as plain text.</param>
        /// <param name="password">The password sha1-hash. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AuthenticationResult</returns>
        public async System.Threading.Tasks.Task<AuthenticationResult> AuthenticateUserAsync (Guid userId, string pw, string password = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AuthenticationResult> localVarResponse = await AuthenticateUserWithHttpInfoAsync(userId, pw, password, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authenticates a user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="pw">The password as plain text.</param>
        /// <param name="password">The password sha1-hash. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AuthenticationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticationResult>> AuthenticateUserWithHttpInfoAsync (Guid userId, string pw, string password = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->AuthenticateUser");
            // verify the required parameter 'pw' is set
            if (pw == null)
                throw new ApiException(400, "Missing required parameter 'pw' when calling UserApi->AuthenticateUser");

            var localVarPath = "/Users/{userId}/Authenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (pw != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pw", pw)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationResult)));
        }

        /// <summary>
        /// Authenticates a user by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.AuthenticateUserByName(Jellyfin.Api.Models.UserDtos.AuthenticateUserByName) request.</param>
        /// <returns>AuthenticationResult</returns>
        public AuthenticationResult AuthenticateUserByName (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
             ApiResponse<AuthenticationResult> localVarResponse = AuthenticateUserByNameWithHttpInfo(UNKNOWN_BASE_TYPE);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticates a user by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.AuthenticateUserByName(Jellyfin.Api.Models.UserDtos.AuthenticateUserByName) request.</param>
        /// <returns>ApiResponse of AuthenticationResult</returns>
        public ApiResponse<AuthenticationResult> AuthenticateUserByNameWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling UserApi->AuthenticateUserByName");

            var localVarPath = "/Users/AuthenticateByName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticateUserByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationResult)));
        }

        /// <summary>
        /// Authenticates a user by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.AuthenticateUserByName(Jellyfin.Api.Models.UserDtos.AuthenticateUserByName) request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AuthenticationResult</returns>
        public async System.Threading.Tasks.Task<AuthenticationResult> AuthenticateUserByNameAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AuthenticationResult> localVarResponse = await AuthenticateUserByNameWithHttpInfoAsync(UNKNOWN_BASE_TYPE, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authenticates a user by name. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.AuthenticateUserByName(Jellyfin.Api.Models.UserDtos.AuthenticateUserByName) request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AuthenticationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticationResult>> AuthenticateUserByNameWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling UserApi->AuthenticateUserByName");

            var localVarPath = "/Users/AuthenticateByName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticateUserByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationResult)));
        }

        /// <summary>
        /// Authenticates a user with quick connect. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The Jellyfin.Api.Models.UserDtos.QuickConnectDto request.</param>
        /// <returns>AuthenticationResult</returns>
        public AuthenticationResult AuthenticateWithQuickConnect (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
             ApiResponse<AuthenticationResult> localVarResponse = AuthenticateWithQuickConnectWithHttpInfo(UNKNOWN_BASE_TYPE);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticates a user with quick connect. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The Jellyfin.Api.Models.UserDtos.QuickConnectDto request.</param>
        /// <returns>ApiResponse of AuthenticationResult</returns>
        public ApiResponse<AuthenticationResult> AuthenticateWithQuickConnectWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling UserApi->AuthenticateWithQuickConnect");

            var localVarPath = "/Users/AuthenticateWithQuickConnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticateWithQuickConnect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationResult)));
        }

        /// <summary>
        /// Authenticates a user with quick connect. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The Jellyfin.Api.Models.UserDtos.QuickConnectDto request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AuthenticationResult</returns>
        public async System.Threading.Tasks.Task<AuthenticationResult> AuthenticateWithQuickConnectAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AuthenticationResult> localVarResponse = await AuthenticateWithQuickConnectWithHttpInfoAsync(UNKNOWN_BASE_TYPE, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authenticates a user with quick connect. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The Jellyfin.Api.Models.UserDtos.QuickConnectDto request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AuthenticationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticationResult>> AuthenticateWithQuickConnectWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling UserApi->AuthenticateWithQuickConnect");

            var localVarPath = "/Users/AuthenticateWithQuickConnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticateWithQuickConnect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthenticationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationResult)));
        }

        /// <summary>
        /// Creates a user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The create user by name request body.</param>
        /// <returns>UserDto</returns>
        public UserDto CreateUserByName (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
             ApiResponse<UserDto> localVarResponse = CreateUserByNameWithHttpInfo(UNKNOWN_BASE_TYPE);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The create user by name request body.</param>
        /// <returns>ApiResponse of UserDto</returns>
        public ApiResponse<UserDto> CreateUserByNameWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling UserApi->CreateUserByName");

            var localVarPath = "/Users/New";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDto)));
        }

        /// <summary>
        /// Creates a user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The create user by name request body.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserDto</returns>
        public async System.Threading.Tasks.Task<UserDto> CreateUserByNameAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserDto> localVarResponse = await CreateUserByNameWithHttpInfoAsync(UNKNOWN_BASE_TYPE, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The create user by name request body.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserDto>> CreateUserByNameWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling UserApi->CreateUserByName");

            var localVarPath = "/Users/New";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDto)));
        }

        /// <summary>
        /// Deletes a user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public void DeleteUser (Guid userId)
        {
             DeleteUserWithHttpInfo(userId);
        }

        /// <summary>
        /// Deletes a user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUserWithHttpInfo (Guid userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->DeleteUser");

            var localVarPath = "/Users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserAsync (Guid userId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteUserWithHttpInfoAsync(userId, cancellationToken);

        }

        /// <summary>
        /// Deletes a user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserWithHttpInfoAsync (Guid userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->DeleteUser");

            var localVarPath = "/Users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Initiates the forgot password process for a local user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The forgot password request containing the entered username.</param>
        /// <returns>ForgotPasswordResult</returns>
        public ForgotPasswordResult ForgotPassword (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
             ApiResponse<ForgotPasswordResult> localVarResponse = ForgotPasswordWithHttpInfo(UNKNOWN_BASE_TYPE);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Initiates the forgot password process for a local user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The forgot password request containing the entered username.</param>
        /// <returns>ApiResponse of ForgotPasswordResult</returns>
        public ApiResponse<ForgotPasswordResult> ForgotPasswordWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling UserApi->ForgotPassword");

            var localVarPath = "/Users/ForgotPassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForgotPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForgotPasswordResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ForgotPasswordResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForgotPasswordResult)));
        }

        /// <summary>
        /// Initiates the forgot password process for a local user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The forgot password request containing the entered username.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ForgotPasswordResult</returns>
        public async System.Threading.Tasks.Task<ForgotPasswordResult> ForgotPasswordAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ForgotPasswordResult> localVarResponse = await ForgotPasswordWithHttpInfoAsync(UNKNOWN_BASE_TYPE, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Initiates the forgot password process for a local user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The forgot password request containing the entered username.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ForgotPasswordResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ForgotPasswordResult>> ForgotPasswordWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling UserApi->ForgotPassword");

            var localVarPath = "/Users/ForgotPassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForgotPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForgotPasswordResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ForgotPasswordResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForgotPasswordResult)));
        }

        /// <summary>
        /// Redeems a forgot password pin. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The forgot password pin request containing the entered pin.</param>
        /// <returns>PinRedeemResult</returns>
        public PinRedeemResult ForgotPasswordPin (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
             ApiResponse<PinRedeemResult> localVarResponse = ForgotPasswordPinWithHttpInfo(UNKNOWN_BASE_TYPE);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Redeems a forgot password pin. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The forgot password pin request containing the entered pin.</param>
        /// <returns>ApiResponse of PinRedeemResult</returns>
        public ApiResponse<PinRedeemResult> ForgotPasswordPinWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling UserApi->ForgotPasswordPin");

            var localVarPath = "/Users/ForgotPassword/Pin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForgotPasswordPin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PinRedeemResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PinRedeemResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PinRedeemResult)));
        }

        /// <summary>
        /// Redeems a forgot password pin. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The forgot password pin request containing the entered pin.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PinRedeemResult</returns>
        public async System.Threading.Tasks.Task<PinRedeemResult> ForgotPasswordPinAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PinRedeemResult> localVarResponse = await ForgotPasswordPinWithHttpInfoAsync(UNKNOWN_BASE_TYPE, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Redeems a forgot password pin. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The forgot password pin request containing the entered pin.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PinRedeemResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PinRedeemResult>> ForgotPasswordPinWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling UserApi->ForgotPasswordPin");

            var localVarPath = "/Users/ForgotPassword/Pin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForgotPasswordPin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PinRedeemResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PinRedeemResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PinRedeemResult)));
        }

        /// <summary>
        /// Gets the user based on auth token. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserDto</returns>
        public UserDto GetCurrentUser ()
        {
             ApiResponse<UserDto> localVarResponse = GetCurrentUserWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the user based on auth token. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserDto</returns>
        public ApiResponse<UserDto> GetCurrentUserWithHttpInfo ()
        {

            var localVarPath = "/Users/Me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDto)));
        }

        /// <summary>
        /// Gets the user based on auth token. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserDto</returns>
        public async System.Threading.Tasks.Task<UserDto> GetCurrentUserAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserDto> localVarResponse = await GetCurrentUserWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the user based on auth token. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserDto>> GetCurrentUserWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Users/Me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDto)));
        }

        /// <summary>
        /// Gets a list of publicly visible users for display on a login screen. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserDto&gt;</returns>
        public List<UserDto> GetPublicUsers ()
        {
             ApiResponse<List<UserDto>> localVarResponse = GetPublicUsersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of publicly visible users for display on a login screen. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserDto&gt;</returns>
        public ApiResponse<List<UserDto>> GetPublicUsersWithHttpInfo ()
        {

            var localVarPath = "/Users/Public";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPublicUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserDto>)));
        }

        /// <summary>
        /// Gets a list of publicly visible users for display on a login screen. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;UserDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserDto>> GetPublicUsersAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UserDto>> localVarResponse = await GetPublicUsersWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of publicly visible users for display on a login screen. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UserDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserDto>>> GetPublicUsersWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Users/Public";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPublicUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserDto>)));
        }

        /// <summary>
        /// Gets a user by Id. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <returns>UserDto</returns>
        public UserDto GetUserById (Guid userId)
        {
             ApiResponse<UserDto> localVarResponse = GetUserByIdWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a user by Id. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <returns>ApiResponse of UserDto</returns>
        public ApiResponse<UserDto> GetUserByIdWithHttpInfo (Guid userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->GetUserById");

            var localVarPath = "/Users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDto)));
        }

        /// <summary>
        /// Gets a user by Id. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserDto</returns>
        public async System.Threading.Tasks.Task<UserDto> GetUserByIdAsync (Guid userId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserDto> localVarResponse = await GetUserByIdWithHttpInfoAsync(userId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a user by Id. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserDto>> GetUserByIdWithHttpInfoAsync (Guid userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->GetUserById");

            var localVarPath = "/Users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDto)));
        }

        /// <summary>
        /// Gets a list of users. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional filter by IsHidden&#x3D;true or false. (optional)</param>
        /// <param name="isDisabled">Optional filter by IsDisabled&#x3D;true or false. (optional)</param>
        /// <returns>List&lt;UserDto&gt;</returns>
        public List<UserDto> GetUsers (bool? isHidden = default(bool?), bool? isDisabled = default(bool?))
        {
             ApiResponse<List<UserDto>> localVarResponse = GetUsersWithHttpInfo(isHidden, isDisabled);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of users. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional filter by IsHidden&#x3D;true or false. (optional)</param>
        /// <param name="isDisabled">Optional filter by IsDisabled&#x3D;true or false. (optional)</param>
        /// <returns>ApiResponse of List&lt;UserDto&gt;</returns>
        public ApiResponse<List<UserDto>> GetUsersWithHttpInfo (bool? isHidden = default(bool?), bool? isDisabled = default(bool?))
        {

            var localVarPath = "/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (isHidden != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isHidden", isHidden)); // query parameter
            if (isDisabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isDisabled", isDisabled)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserDto>)));
        }

        /// <summary>
        /// Gets a list of users. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional filter by IsHidden&#x3D;true or false. (optional)</param>
        /// <param name="isDisabled">Optional filter by IsDisabled&#x3D;true or false. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;UserDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserDto>> GetUsersAsync (bool? isHidden = default(bool?), bool? isDisabled = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UserDto>> localVarResponse = await GetUsersWithHttpInfoAsync(isHidden, isDisabled, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of users. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional filter by IsHidden&#x3D;true or false. (optional)</param>
        /// <param name="isDisabled">Optional filter by IsDisabled&#x3D;true or false. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UserDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserDto>>> GetUsersWithHttpInfoAsync (bool? isHidden = default(bool?), bool? isDisabled = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (isHidden != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isHidden", isHidden)); // query parameter
            if (isDisabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isDisabled", isDisabled)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UserDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserDto>)));
        }

        /// <summary>
        /// Updates a user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The updated user model.</param>
        /// <returns></returns>
        public void UpdateUser (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
             UpdateUserWithHttpInfo(userId, UNKNOWN_BASE_TYPE);
        }

        /// <summary>
        /// Updates a user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The updated user model.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateUserWithHttpInfo (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdateUser");
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling UserApi->UpdateUser");

            var localVarPath = "/Users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates a user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The updated user model.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateUserAsync (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateUserWithHttpInfoAsync(userId, UNKNOWN_BASE_TYPE, cancellationToken);

        }

        /// <summary>
        /// Updates a user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The updated user model.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserWithHttpInfoAsync (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdateUser");
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling UserApi->UpdateUser");

            var localVarPath = "/Users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates a user configuration. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The new user configuration.</param>
        /// <returns></returns>
        public void UpdateUserConfiguration (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
             UpdateUserConfigurationWithHttpInfo(userId, UNKNOWN_BASE_TYPE);
        }

        /// <summary>
        /// Updates a user configuration. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The new user configuration.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateUserConfigurationWithHttpInfo (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdateUserConfiguration");
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling UserApi->UpdateUserConfiguration");

            var localVarPath = "/Users/{userId}/Configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates a user configuration. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The new user configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateUserConfigurationAsync (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateUserConfigurationWithHttpInfoAsync(userId, UNKNOWN_BASE_TYPE, cancellationToken);

        }

        /// <summary>
        /// Updates a user configuration. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The new user configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserConfigurationWithHttpInfoAsync (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdateUserConfiguration");
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling UserApi->UpdateUserConfiguration");

            var localVarPath = "/Users/{userId}/Configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates a user&#39;s easy password. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.UpdateUserEasyPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserEasyPassword) request.</param>
        /// <returns></returns>
        public void UpdateUserEasyPassword (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
             UpdateUserEasyPasswordWithHttpInfo(userId, UNKNOWN_BASE_TYPE);
        }

        /// <summary>
        /// Updates a user&#39;s easy password. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.UpdateUserEasyPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserEasyPassword) request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateUserEasyPasswordWithHttpInfo (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdateUserEasyPassword");
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling UserApi->UpdateUserEasyPassword");

            var localVarPath = "/Users/{userId}/EasyPassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserEasyPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates a user&#39;s easy password. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.UpdateUserEasyPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserEasyPassword) request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateUserEasyPasswordAsync (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateUserEasyPasswordWithHttpInfoAsync(userId, UNKNOWN_BASE_TYPE, cancellationToken);

        }

        /// <summary>
        /// Updates a user&#39;s easy password. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.UpdateUserEasyPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserEasyPassword) request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserEasyPasswordWithHttpInfoAsync (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdateUserEasyPassword");
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling UserApi->UpdateUserEasyPassword");

            var localVarPath = "/Users/{userId}/EasyPassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserEasyPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates a user&#39;s password. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.UpdateUserPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserPassword) request.</param>
        /// <returns></returns>
        public void UpdateUserPassword (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
             UpdateUserPasswordWithHttpInfo(userId, UNKNOWN_BASE_TYPE);
        }

        /// <summary>
        /// Updates a user&#39;s password. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.UpdateUserPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserPassword) request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateUserPasswordWithHttpInfo (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdateUserPassword");
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling UserApi->UpdateUserPassword");

            var localVarPath = "/Users/{userId}/Password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates a user&#39;s password. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.UpdateUserPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserPassword) request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateUserPasswordAsync (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateUserPasswordWithHttpInfoAsync(userId, UNKNOWN_BASE_TYPE, cancellationToken);

        }

        /// <summary>
        /// Updates a user&#39;s password. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The M:Jellyfin.Api.Controllers.UserController.UpdateUserPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserPassword) request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserPasswordWithHttpInfoAsync (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdateUserPassword");
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling UserApi->UpdateUserPassword");

            var localVarPath = "/Users/{userId}/Password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates a user policy. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The new user policy.</param>
        /// <returns></returns>
        public void UpdateUserPolicy (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
             UpdateUserPolicyWithHttpInfo(userId, UNKNOWN_BASE_TYPE);
        }

        /// <summary>
        /// Updates a user policy. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The new user policy.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateUserPolicyWithHttpInfo (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdateUserPolicy");
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling UserApi->UpdateUserPolicy");

            var localVarPath = "/Users/{userId}/Policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates a user policy. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The new user policy.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateUserPolicyAsync (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateUserPolicyWithHttpInfoAsync(userId, UNKNOWN_BASE_TYPE, cancellationToken);

        }

        /// <summary>
        /// Updates a user policy. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The new user policy.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserPolicyWithHttpInfoAsync (Guid userId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdateUserPolicy");
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling UserApi->UpdateUserPolicy");

            var localVarPath = "/Users/{userId}/Policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
