/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Jellyfin.Api.Client;

namespace Jellyfin.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUniversalAudioApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">Optional. The audio container. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="userId">Optional. The user id. (optional)</param>
        /// <param name="audioCodec">Optional. The audio codec to transcode to. (optional)</param>
        /// <param name="maxAudioChannels">Optional. The maximum number of audio channels. (optional)</param>
        /// <param name="transcodingAudioChannels">Optional. The number of how many audio channels to transcode to. (optional)</param>
        /// <param name="maxStreamingBitrate">Optional. The maximum streaming bitrate. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="transcodingContainer">Optional. The container to transcode to. (optional)</param>
        /// <param name="transcodingProtocol">Optional. The transcoding protocol. (optional)</param>
        /// <param name="maxAudioSampleRate">Optional. The maximum audio sample rate. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="enableRemoteMedia">Optional. Whether to enable remote media. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional, default to false)</param>
        /// <param name="enableRedirection">Whether to enable redirection. Defaults to true. (optional, default to true)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetUniversalAudioStream (Guid itemId, List<string> container = default(List<string>), string mediaSourceId = default(string), string deviceId = default(string), Guid? userId = default(Guid?), string audioCodec = default(string), int? maxAudioChannels = default(int?), int? transcodingAudioChannels = default(int?), int? maxStreamingBitrate = default(int?), int? audioBitRate = default(int?), long? startTimeTicks = default(long?), string transcodingContainer = default(string), string transcodingProtocol = default(string), int? maxAudioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), bool? enableRemoteMedia = default(bool?), bool? breakOnNonKeyFrames = default(bool?), bool? enableRedirection = default(bool?));

        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">Optional. The audio container. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="userId">Optional. The user id. (optional)</param>
        /// <param name="audioCodec">Optional. The audio codec to transcode to. (optional)</param>
        /// <param name="maxAudioChannels">Optional. The maximum number of audio channels. (optional)</param>
        /// <param name="transcodingAudioChannels">Optional. The number of how many audio channels to transcode to. (optional)</param>
        /// <param name="maxStreamingBitrate">Optional. The maximum streaming bitrate. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="transcodingContainer">Optional. The container to transcode to. (optional)</param>
        /// <param name="transcodingProtocol">Optional. The transcoding protocol. (optional)</param>
        /// <param name="maxAudioSampleRate">Optional. The maximum audio sample rate. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="enableRemoteMedia">Optional. Whether to enable remote media. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional, default to false)</param>
        /// <param name="enableRedirection">Whether to enable redirection. Defaults to true. (optional, default to true)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetUniversalAudioStreamWithHttpInfo (Guid itemId, List<string> container = default(List<string>), string mediaSourceId = default(string), string deviceId = default(string), Guid? userId = default(Guid?), string audioCodec = default(string), int? maxAudioChannels = default(int?), int? transcodingAudioChannels = default(int?), int? maxStreamingBitrate = default(int?), int? audioBitRate = default(int?), long? startTimeTicks = default(long?), string transcodingContainer = default(string), string transcodingProtocol = default(string), int? maxAudioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), bool? enableRemoteMedia = default(bool?), bool? breakOnNonKeyFrames = default(bool?), bool? enableRedirection = default(bool?));
        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">Optional. The audio container. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="userId">Optional. The user id. (optional)</param>
        /// <param name="audioCodec">Optional. The audio codec to transcode to. (optional)</param>
        /// <param name="maxAudioChannels">Optional. The maximum number of audio channels. (optional)</param>
        /// <param name="transcodingAudioChannels">Optional. The number of how many audio channels to transcode to. (optional)</param>
        /// <param name="maxStreamingBitrate">Optional. The maximum streaming bitrate. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="transcodingContainer">Optional. The container to transcode to. (optional)</param>
        /// <param name="transcodingProtocol">Optional. The transcoding protocol. (optional)</param>
        /// <param name="maxAudioSampleRate">Optional. The maximum audio sample rate. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="enableRemoteMedia">Optional. Whether to enable remote media. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional, default to false)</param>
        /// <param name="enableRedirection">Whether to enable redirection. Defaults to true. (optional, default to true)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream HeadUniversalAudioStream (Guid itemId, List<string> container = default(List<string>), string mediaSourceId = default(string), string deviceId = default(string), Guid? userId = default(Guid?), string audioCodec = default(string), int? maxAudioChannels = default(int?), int? transcodingAudioChannels = default(int?), int? maxStreamingBitrate = default(int?), int? audioBitRate = default(int?), long? startTimeTicks = default(long?), string transcodingContainer = default(string), string transcodingProtocol = default(string), int? maxAudioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), bool? enableRemoteMedia = default(bool?), bool? breakOnNonKeyFrames = default(bool?), bool? enableRedirection = default(bool?));

        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">Optional. The audio container. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="userId">Optional. The user id. (optional)</param>
        /// <param name="audioCodec">Optional. The audio codec to transcode to. (optional)</param>
        /// <param name="maxAudioChannels">Optional. The maximum number of audio channels. (optional)</param>
        /// <param name="transcodingAudioChannels">Optional. The number of how many audio channels to transcode to. (optional)</param>
        /// <param name="maxStreamingBitrate">Optional. The maximum streaming bitrate. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="transcodingContainer">Optional. The container to transcode to. (optional)</param>
        /// <param name="transcodingProtocol">Optional. The transcoding protocol. (optional)</param>
        /// <param name="maxAudioSampleRate">Optional. The maximum audio sample rate. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="enableRemoteMedia">Optional. Whether to enable remote media. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional, default to false)</param>
        /// <param name="enableRedirection">Whether to enable redirection. Defaults to true. (optional, default to true)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> HeadUniversalAudioStreamWithHttpInfo (Guid itemId, List<string> container = default(List<string>), string mediaSourceId = default(string), string deviceId = default(string), Guid? userId = default(Guid?), string audioCodec = default(string), int? maxAudioChannels = default(int?), int? transcodingAudioChannels = default(int?), int? maxStreamingBitrate = default(int?), int? audioBitRate = default(int?), long? startTimeTicks = default(long?), string transcodingContainer = default(string), string transcodingProtocol = default(string), int? maxAudioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), bool? enableRemoteMedia = default(bool?), bool? breakOnNonKeyFrames = default(bool?), bool? enableRedirection = default(bool?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">Optional. The audio container. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="userId">Optional. The user id. (optional)</param>
        /// <param name="audioCodec">Optional. The audio codec to transcode to. (optional)</param>
        /// <param name="maxAudioChannels">Optional. The maximum number of audio channels. (optional)</param>
        /// <param name="transcodingAudioChannels">Optional. The number of how many audio channels to transcode to. (optional)</param>
        /// <param name="maxStreamingBitrate">Optional. The maximum streaming bitrate. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="transcodingContainer">Optional. The container to transcode to. (optional)</param>
        /// <param name="transcodingProtocol">Optional. The transcoding protocol. (optional)</param>
        /// <param name="maxAudioSampleRate">Optional. The maximum audio sample rate. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="enableRemoteMedia">Optional. Whether to enable remote media. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional, default to false)</param>
        /// <param name="enableRedirection">Whether to enable redirection. Defaults to true. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetUniversalAudioStreamAsync (Guid itemId, List<string> container = default(List<string>), string mediaSourceId = default(string), string deviceId = default(string), Guid? userId = default(Guid?), string audioCodec = default(string), int? maxAudioChannels = default(int?), int? transcodingAudioChannels = default(int?), int? maxStreamingBitrate = default(int?), int? audioBitRate = default(int?), long? startTimeTicks = default(long?), string transcodingContainer = default(string), string transcodingProtocol = default(string), int? maxAudioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), bool? enableRemoteMedia = default(bool?), bool? breakOnNonKeyFrames = default(bool?), bool? enableRedirection = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">Optional. The audio container. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="userId">Optional. The user id. (optional)</param>
        /// <param name="audioCodec">Optional. The audio codec to transcode to. (optional)</param>
        /// <param name="maxAudioChannels">Optional. The maximum number of audio channels. (optional)</param>
        /// <param name="transcodingAudioChannels">Optional. The number of how many audio channels to transcode to. (optional)</param>
        /// <param name="maxStreamingBitrate">Optional. The maximum streaming bitrate. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="transcodingContainer">Optional. The container to transcode to. (optional)</param>
        /// <param name="transcodingProtocol">Optional. The transcoding protocol. (optional)</param>
        /// <param name="maxAudioSampleRate">Optional. The maximum audio sample rate. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="enableRemoteMedia">Optional. Whether to enable remote media. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional, default to false)</param>
        /// <param name="enableRedirection">Whether to enable redirection. Defaults to true. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetUniversalAudioStreamWithHttpInfoAsync (Guid itemId, List<string> container = default(List<string>), string mediaSourceId = default(string), string deviceId = default(string), Guid? userId = default(Guid?), string audioCodec = default(string), int? maxAudioChannels = default(int?), int? transcodingAudioChannels = default(int?), int? maxStreamingBitrate = default(int?), int? audioBitRate = default(int?), long? startTimeTicks = default(long?), string transcodingContainer = default(string), string transcodingProtocol = default(string), int? maxAudioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), bool? enableRemoteMedia = default(bool?), bool? breakOnNonKeyFrames = default(bool?), bool? enableRedirection = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">Optional. The audio container. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="userId">Optional. The user id. (optional)</param>
        /// <param name="audioCodec">Optional. The audio codec to transcode to. (optional)</param>
        /// <param name="maxAudioChannels">Optional. The maximum number of audio channels. (optional)</param>
        /// <param name="transcodingAudioChannels">Optional. The number of how many audio channels to transcode to. (optional)</param>
        /// <param name="maxStreamingBitrate">Optional. The maximum streaming bitrate. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="transcodingContainer">Optional. The container to transcode to. (optional)</param>
        /// <param name="transcodingProtocol">Optional. The transcoding protocol. (optional)</param>
        /// <param name="maxAudioSampleRate">Optional. The maximum audio sample rate. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="enableRemoteMedia">Optional. Whether to enable remote media. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional, default to false)</param>
        /// <param name="enableRedirection">Whether to enable redirection. Defaults to true. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> HeadUniversalAudioStreamAsync (Guid itemId, List<string> container = default(List<string>), string mediaSourceId = default(string), string deviceId = default(string), Guid? userId = default(Guid?), string audioCodec = default(string), int? maxAudioChannels = default(int?), int? transcodingAudioChannels = default(int?), int? maxStreamingBitrate = default(int?), int? audioBitRate = default(int?), long? startTimeTicks = default(long?), string transcodingContainer = default(string), string transcodingProtocol = default(string), int? maxAudioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), bool? enableRemoteMedia = default(bool?), bool? breakOnNonKeyFrames = default(bool?), bool? enableRedirection = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">Optional. The audio container. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="userId">Optional. The user id. (optional)</param>
        /// <param name="audioCodec">Optional. The audio codec to transcode to. (optional)</param>
        /// <param name="maxAudioChannels">Optional. The maximum number of audio channels. (optional)</param>
        /// <param name="transcodingAudioChannels">Optional. The number of how many audio channels to transcode to. (optional)</param>
        /// <param name="maxStreamingBitrate">Optional. The maximum streaming bitrate. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="transcodingContainer">Optional. The container to transcode to. (optional)</param>
        /// <param name="transcodingProtocol">Optional. The transcoding protocol. (optional)</param>
        /// <param name="maxAudioSampleRate">Optional. The maximum audio sample rate. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="enableRemoteMedia">Optional. Whether to enable remote media. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional, default to false)</param>
        /// <param name="enableRedirection">Whether to enable redirection. Defaults to true. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadUniversalAudioStreamWithHttpInfoAsync (Guid itemId, List<string> container = default(List<string>), string mediaSourceId = default(string), string deviceId = default(string), Guid? userId = default(Guid?), string audioCodec = default(string), int? maxAudioChannels = default(int?), int? transcodingAudioChannels = default(int?), int? maxStreamingBitrate = default(int?), int? audioBitRate = default(int?), long? startTimeTicks = default(long?), string transcodingContainer = default(string), string transcodingProtocol = default(string), int? maxAudioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), bool? enableRemoteMedia = default(bool?), bool? breakOnNonKeyFrames = default(bool?), bool? enableRedirection = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UniversalAudioApi : IUniversalAudioApi
    {
        private Jellyfin.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UniversalAudioApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UniversalAudioApi(String basePath)
        {
            this.Configuration = new Jellyfin.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UniversalAudioApi"/> class
        /// </summary>
        /// <returns></returns>
        public UniversalAudioApi()
        {
            this.Configuration = Jellyfin.Api.Client.Configuration.Default;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UniversalAudioApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UniversalAudioApi(Jellyfin.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Jellyfin.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Jellyfin.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Jellyfin.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">Optional. The audio container. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="userId">Optional. The user id. (optional)</param>
        /// <param name="audioCodec">Optional. The audio codec to transcode to. (optional)</param>
        /// <param name="maxAudioChannels">Optional. The maximum number of audio channels. (optional)</param>
        /// <param name="transcodingAudioChannels">Optional. The number of how many audio channels to transcode to. (optional)</param>
        /// <param name="maxStreamingBitrate">Optional. The maximum streaming bitrate. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="transcodingContainer">Optional. The container to transcode to. (optional)</param>
        /// <param name="transcodingProtocol">Optional. The transcoding protocol. (optional)</param>
        /// <param name="maxAudioSampleRate">Optional. The maximum audio sample rate. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="enableRemoteMedia">Optional. Whether to enable remote media. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional, default to false)</param>
        /// <param name="enableRedirection">Whether to enable redirection. Defaults to true. (optional, default to true)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetUniversalAudioStream (Guid itemId, List<string> container = default(List<string>), string mediaSourceId = default(string), string deviceId = default(string), Guid? userId = default(Guid?), string audioCodec = default(string), int? maxAudioChannels = default(int?), int? transcodingAudioChannels = default(int?), int? maxStreamingBitrate = default(int?), int? audioBitRate = default(int?), long? startTimeTicks = default(long?), string transcodingContainer = default(string), string transcodingProtocol = default(string), int? maxAudioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), bool? enableRemoteMedia = default(bool?), bool? breakOnNonKeyFrames = default(bool?), bool? enableRedirection = default(bool?))
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetUniversalAudioStreamWithHttpInfo(itemId, container, mediaSourceId, deviceId, userId, audioCodec, maxAudioChannels, transcodingAudioChannels, maxStreamingBitrate, audioBitRate, startTimeTicks, transcodingContainer, transcodingProtocol, maxAudioSampleRate, maxAudioBitDepth, enableRemoteMedia, breakOnNonKeyFrames, enableRedirection);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">Optional. The audio container. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="userId">Optional. The user id. (optional)</param>
        /// <param name="audioCodec">Optional. The audio codec to transcode to. (optional)</param>
        /// <param name="maxAudioChannels">Optional. The maximum number of audio channels. (optional)</param>
        /// <param name="transcodingAudioChannels">Optional. The number of how many audio channels to transcode to. (optional)</param>
        /// <param name="maxStreamingBitrate">Optional. The maximum streaming bitrate. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="transcodingContainer">Optional. The container to transcode to. (optional)</param>
        /// <param name="transcodingProtocol">Optional. The transcoding protocol. (optional)</param>
        /// <param name="maxAudioSampleRate">Optional. The maximum audio sample rate. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="enableRemoteMedia">Optional. Whether to enable remote media. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional, default to false)</param>
        /// <param name="enableRedirection">Whether to enable redirection. Defaults to true. (optional, default to true)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetUniversalAudioStreamWithHttpInfo (Guid itemId, List<string> container = default(List<string>), string mediaSourceId = default(string), string deviceId = default(string), Guid? userId = default(Guid?), string audioCodec = default(string), int? maxAudioChannels = default(int?), int? transcodingAudioChannels = default(int?), int? maxStreamingBitrate = default(int?), int? audioBitRate = default(int?), long? startTimeTicks = default(long?), string transcodingContainer = default(string), string transcodingProtocol = default(string), int? maxAudioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), bool? enableRemoteMedia = default(bool?), bool? breakOnNonKeyFrames = default(bool?), bool? enableRedirection = default(bool?))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling UniversalAudioApi->GetUniversalAudioStream");

            var localVarPath = "/Audio/{itemId}/universal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "audio/_*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (container != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "container", container)); // query parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceId", deviceId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (audioCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioCodec", audioCodec)); // query parameter
            if (maxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioChannels", maxAudioChannels)); // query parameter
            if (transcodingAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodingAudioChannels", transcodingAudioChannels)); // query parameter
            if (maxStreamingBitrate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxStreamingBitrate", maxStreamingBitrate)); // query parameter
            if (audioBitRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioBitRate", audioBitRate)); // query parameter
            if (startTimeTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeTicks", startTimeTicks)); // query parameter
            if (transcodingContainer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodingContainer", transcodingContainer)); // query parameter
            if (transcodingProtocol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodingProtocol", transcodingProtocol)); // query parameter
            if (maxAudioSampleRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioSampleRate", maxAudioSampleRate)); // query parameter
            if (maxAudioBitDepth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioBitDepth", maxAudioBitDepth)); // query parameter
            if (enableRemoteMedia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableRemoteMedia", enableRemoteMedia)); // query parameter
            if (breakOnNonKeyFrames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "breakOnNonKeyFrames", breakOnNonKeyFrames)); // query parameter
            if (enableRedirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableRedirection", enableRedirection)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniversalAudioStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">Optional. The audio container. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="userId">Optional. The user id. (optional)</param>
        /// <param name="audioCodec">Optional. The audio codec to transcode to. (optional)</param>
        /// <param name="maxAudioChannels">Optional. The maximum number of audio channels. (optional)</param>
        /// <param name="transcodingAudioChannels">Optional. The number of how many audio channels to transcode to. (optional)</param>
        /// <param name="maxStreamingBitrate">Optional. The maximum streaming bitrate. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="transcodingContainer">Optional. The container to transcode to. (optional)</param>
        /// <param name="transcodingProtocol">Optional. The transcoding protocol. (optional)</param>
        /// <param name="maxAudioSampleRate">Optional. The maximum audio sample rate. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="enableRemoteMedia">Optional. Whether to enable remote media. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional, default to false)</param>
        /// <param name="enableRedirection">Whether to enable redirection. Defaults to true. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetUniversalAudioStreamAsync (Guid itemId, List<string> container = default(List<string>), string mediaSourceId = default(string), string deviceId = default(string), Guid? userId = default(Guid?), string audioCodec = default(string), int? maxAudioChannels = default(int?), int? transcodingAudioChannels = default(int?), int? maxStreamingBitrate = default(int?), int? audioBitRate = default(int?), long? startTimeTicks = default(long?), string transcodingContainer = default(string), string transcodingProtocol = default(string), int? maxAudioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), bool? enableRemoteMedia = default(bool?), bool? breakOnNonKeyFrames = default(bool?), bool? enableRedirection = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetUniversalAudioStreamWithHttpInfoAsync(itemId, container, mediaSourceId, deviceId, userId, audioCodec, maxAudioChannels, transcodingAudioChannels, maxStreamingBitrate, audioBitRate, startTimeTicks, transcodingContainer, transcodingProtocol, maxAudioSampleRate, maxAudioBitDepth, enableRemoteMedia, breakOnNonKeyFrames, enableRedirection, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">Optional. The audio container. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="userId">Optional. The user id. (optional)</param>
        /// <param name="audioCodec">Optional. The audio codec to transcode to. (optional)</param>
        /// <param name="maxAudioChannels">Optional. The maximum number of audio channels. (optional)</param>
        /// <param name="transcodingAudioChannels">Optional. The number of how many audio channels to transcode to. (optional)</param>
        /// <param name="maxStreamingBitrate">Optional. The maximum streaming bitrate. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="transcodingContainer">Optional. The container to transcode to. (optional)</param>
        /// <param name="transcodingProtocol">Optional. The transcoding protocol. (optional)</param>
        /// <param name="maxAudioSampleRate">Optional. The maximum audio sample rate. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="enableRemoteMedia">Optional. Whether to enable remote media. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional, default to false)</param>
        /// <param name="enableRedirection">Whether to enable redirection. Defaults to true. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetUniversalAudioStreamWithHttpInfoAsync (Guid itemId, List<string> container = default(List<string>), string mediaSourceId = default(string), string deviceId = default(string), Guid? userId = default(Guid?), string audioCodec = default(string), int? maxAudioChannels = default(int?), int? transcodingAudioChannels = default(int?), int? maxStreamingBitrate = default(int?), int? audioBitRate = default(int?), long? startTimeTicks = default(long?), string transcodingContainer = default(string), string transcodingProtocol = default(string), int? maxAudioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), bool? enableRemoteMedia = default(bool?), bool? breakOnNonKeyFrames = default(bool?), bool? enableRedirection = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling UniversalAudioApi->GetUniversalAudioStream");

            var localVarPath = "/Audio/{itemId}/universal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "audio/_*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (container != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "container", container)); // query parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceId", deviceId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (audioCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioCodec", audioCodec)); // query parameter
            if (maxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioChannels", maxAudioChannels)); // query parameter
            if (transcodingAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodingAudioChannels", transcodingAudioChannels)); // query parameter
            if (maxStreamingBitrate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxStreamingBitrate", maxStreamingBitrate)); // query parameter
            if (audioBitRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioBitRate", audioBitRate)); // query parameter
            if (startTimeTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeTicks", startTimeTicks)); // query parameter
            if (transcodingContainer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodingContainer", transcodingContainer)); // query parameter
            if (transcodingProtocol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodingProtocol", transcodingProtocol)); // query parameter
            if (maxAudioSampleRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioSampleRate", maxAudioSampleRate)); // query parameter
            if (maxAudioBitDepth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioBitDepth", maxAudioBitDepth)); // query parameter
            if (enableRemoteMedia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableRemoteMedia", enableRemoteMedia)); // query parameter
            if (breakOnNonKeyFrames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "breakOnNonKeyFrames", breakOnNonKeyFrames)); // query parameter
            if (enableRedirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableRedirection", enableRedirection)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniversalAudioStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">Optional. The audio container. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="userId">Optional. The user id. (optional)</param>
        /// <param name="audioCodec">Optional. The audio codec to transcode to. (optional)</param>
        /// <param name="maxAudioChannels">Optional. The maximum number of audio channels. (optional)</param>
        /// <param name="transcodingAudioChannels">Optional. The number of how many audio channels to transcode to. (optional)</param>
        /// <param name="maxStreamingBitrate">Optional. The maximum streaming bitrate. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="transcodingContainer">Optional. The container to transcode to. (optional)</param>
        /// <param name="transcodingProtocol">Optional. The transcoding protocol. (optional)</param>
        /// <param name="maxAudioSampleRate">Optional. The maximum audio sample rate. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="enableRemoteMedia">Optional. Whether to enable remote media. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional, default to false)</param>
        /// <param name="enableRedirection">Whether to enable redirection. Defaults to true. (optional, default to true)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream HeadUniversalAudioStream (Guid itemId, List<string> container = default(List<string>), string mediaSourceId = default(string), string deviceId = default(string), Guid? userId = default(Guid?), string audioCodec = default(string), int? maxAudioChannels = default(int?), int? transcodingAudioChannels = default(int?), int? maxStreamingBitrate = default(int?), int? audioBitRate = default(int?), long? startTimeTicks = default(long?), string transcodingContainer = default(string), string transcodingProtocol = default(string), int? maxAudioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), bool? enableRemoteMedia = default(bool?), bool? breakOnNonKeyFrames = default(bool?), bool? enableRedirection = default(bool?))
        {
             ApiResponse<System.IO.Stream> localVarResponse = HeadUniversalAudioStreamWithHttpInfo(itemId, container, mediaSourceId, deviceId, userId, audioCodec, maxAudioChannels, transcodingAudioChannels, maxStreamingBitrate, audioBitRate, startTimeTicks, transcodingContainer, transcodingProtocol, maxAudioSampleRate, maxAudioBitDepth, enableRemoteMedia, breakOnNonKeyFrames, enableRedirection);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">Optional. The audio container. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="userId">Optional. The user id. (optional)</param>
        /// <param name="audioCodec">Optional. The audio codec to transcode to. (optional)</param>
        /// <param name="maxAudioChannels">Optional. The maximum number of audio channels. (optional)</param>
        /// <param name="transcodingAudioChannels">Optional. The number of how many audio channels to transcode to. (optional)</param>
        /// <param name="maxStreamingBitrate">Optional. The maximum streaming bitrate. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="transcodingContainer">Optional. The container to transcode to. (optional)</param>
        /// <param name="transcodingProtocol">Optional. The transcoding protocol. (optional)</param>
        /// <param name="maxAudioSampleRate">Optional. The maximum audio sample rate. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="enableRemoteMedia">Optional. Whether to enable remote media. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional, default to false)</param>
        /// <param name="enableRedirection">Whether to enable redirection. Defaults to true. (optional, default to true)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> HeadUniversalAudioStreamWithHttpInfo (Guid itemId, List<string> container = default(List<string>), string mediaSourceId = default(string), string deviceId = default(string), Guid? userId = default(Guid?), string audioCodec = default(string), int? maxAudioChannels = default(int?), int? transcodingAudioChannels = default(int?), int? maxStreamingBitrate = default(int?), int? audioBitRate = default(int?), long? startTimeTicks = default(long?), string transcodingContainer = default(string), string transcodingProtocol = default(string), int? maxAudioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), bool? enableRemoteMedia = default(bool?), bool? breakOnNonKeyFrames = default(bool?), bool? enableRedirection = default(bool?))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling UniversalAudioApi->HeadUniversalAudioStream");

            var localVarPath = "/Audio/{itemId}/universal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "audio/_*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (container != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "container", container)); // query parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceId", deviceId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (audioCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioCodec", audioCodec)); // query parameter
            if (maxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioChannels", maxAudioChannels)); // query parameter
            if (transcodingAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodingAudioChannels", transcodingAudioChannels)); // query parameter
            if (maxStreamingBitrate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxStreamingBitrate", maxStreamingBitrate)); // query parameter
            if (audioBitRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioBitRate", audioBitRate)); // query parameter
            if (startTimeTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeTicks", startTimeTicks)); // query parameter
            if (transcodingContainer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodingContainer", transcodingContainer)); // query parameter
            if (transcodingProtocol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodingProtocol", transcodingProtocol)); // query parameter
            if (maxAudioSampleRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioSampleRate", maxAudioSampleRate)); // query parameter
            if (maxAudioBitDepth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioBitDepth", maxAudioBitDepth)); // query parameter
            if (enableRemoteMedia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableRemoteMedia", enableRemoteMedia)); // query parameter
            if (breakOnNonKeyFrames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "breakOnNonKeyFrames", breakOnNonKeyFrames)); // query parameter
            if (enableRedirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableRedirection", enableRedirection)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadUniversalAudioStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">Optional. The audio container. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="userId">Optional. The user id. (optional)</param>
        /// <param name="audioCodec">Optional. The audio codec to transcode to. (optional)</param>
        /// <param name="maxAudioChannels">Optional. The maximum number of audio channels. (optional)</param>
        /// <param name="transcodingAudioChannels">Optional. The number of how many audio channels to transcode to. (optional)</param>
        /// <param name="maxStreamingBitrate">Optional. The maximum streaming bitrate. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="transcodingContainer">Optional. The container to transcode to. (optional)</param>
        /// <param name="transcodingProtocol">Optional. The transcoding protocol. (optional)</param>
        /// <param name="maxAudioSampleRate">Optional. The maximum audio sample rate. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="enableRemoteMedia">Optional. Whether to enable remote media. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional, default to false)</param>
        /// <param name="enableRedirection">Whether to enable redirection. Defaults to true. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> HeadUniversalAudioStreamAsync (Guid itemId, List<string> container = default(List<string>), string mediaSourceId = default(string), string deviceId = default(string), Guid? userId = default(Guid?), string audioCodec = default(string), int? maxAudioChannels = default(int?), int? transcodingAudioChannels = default(int?), int? maxStreamingBitrate = default(int?), int? audioBitRate = default(int?), long? startTimeTicks = default(long?), string transcodingContainer = default(string), string transcodingProtocol = default(string), int? maxAudioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), bool? enableRemoteMedia = default(bool?), bool? breakOnNonKeyFrames = default(bool?), bool? enableRedirection = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await HeadUniversalAudioStreamWithHttpInfoAsync(itemId, container, mediaSourceId, deviceId, userId, audioCodec, maxAudioChannels, transcodingAudioChannels, maxStreamingBitrate, audioBitRate, startTimeTicks, transcodingContainer, transcodingProtocol, maxAudioSampleRate, maxAudioBitDepth, enableRemoteMedia, breakOnNonKeyFrames, enableRedirection, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">Optional. The audio container. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="userId">Optional. The user id. (optional)</param>
        /// <param name="audioCodec">Optional. The audio codec to transcode to. (optional)</param>
        /// <param name="maxAudioChannels">Optional. The maximum number of audio channels. (optional)</param>
        /// <param name="transcodingAudioChannels">Optional. The number of how many audio channels to transcode to. (optional)</param>
        /// <param name="maxStreamingBitrate">Optional. The maximum streaming bitrate. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="transcodingContainer">Optional. The container to transcode to. (optional)</param>
        /// <param name="transcodingProtocol">Optional. The transcoding protocol. (optional)</param>
        /// <param name="maxAudioSampleRate">Optional. The maximum audio sample rate. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="enableRemoteMedia">Optional. Whether to enable remote media. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional, default to false)</param>
        /// <param name="enableRedirection">Whether to enable redirection. Defaults to true. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadUniversalAudioStreamWithHttpInfoAsync (Guid itemId, List<string> container = default(List<string>), string mediaSourceId = default(string), string deviceId = default(string), Guid? userId = default(Guid?), string audioCodec = default(string), int? maxAudioChannels = default(int?), int? transcodingAudioChannels = default(int?), int? maxStreamingBitrate = default(int?), int? audioBitRate = default(int?), long? startTimeTicks = default(long?), string transcodingContainer = default(string), string transcodingProtocol = default(string), int? maxAudioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), bool? enableRemoteMedia = default(bool?), bool? breakOnNonKeyFrames = default(bool?), bool? enableRedirection = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling UniversalAudioApi->HeadUniversalAudioStream");

            var localVarPath = "/Audio/{itemId}/universal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "audio/_*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (container != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "container", container)); // query parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceId", deviceId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (audioCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioCodec", audioCodec)); // query parameter
            if (maxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioChannels", maxAudioChannels)); // query parameter
            if (transcodingAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodingAudioChannels", transcodingAudioChannels)); // query parameter
            if (maxStreamingBitrate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxStreamingBitrate", maxStreamingBitrate)); // query parameter
            if (audioBitRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioBitRate", audioBitRate)); // query parameter
            if (startTimeTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeTicks", startTimeTicks)); // query parameter
            if (transcodingContainer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodingContainer", transcodingContainer)); // query parameter
            if (transcodingProtocol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodingProtocol", transcodingProtocol)); // query parameter
            if (maxAudioSampleRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioSampleRate", maxAudioSampleRate)); // query parameter
            if (maxAudioBitDepth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioBitDepth", maxAudioBitDepth)); // query parameter
            if (enableRemoteMedia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableRemoteMedia", enableRemoteMedia)); // query parameter
            if (breakOnNonKeyFrames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "breakOnNonKeyFrames", breakOnNonKeyFrames)); // query parameter
            if (enableRedirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableRedirection", enableRedirection)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadUniversalAudioStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

    }
}
