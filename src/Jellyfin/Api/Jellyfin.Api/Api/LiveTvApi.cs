/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Jellyfin.Api.Client;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILiveTvApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a listings provider.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pw">Password. (optional)</param>
        /// <param name="validateListings">Validate listings. (optional, default to false)</param>
        /// <param name="validateLogin">Validate login. (optional, default to false)</param>
        /// <param name="UNKNOWN_BASE_TYPE">New listings info. (optional)</param>
        /// <returns>ListingsProviderInfo</returns>
        ListingsProviderInfo AddListingProvider (string pw = default(string), bool? validateListings = default(bool?), bool? validateLogin = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));

        /// <summary>
        /// Adds a listings provider.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pw">Password. (optional)</param>
        /// <param name="validateListings">Validate listings. (optional, default to false)</param>
        /// <param name="validateLogin">Validate login. (optional, default to false)</param>
        /// <param name="UNKNOWN_BASE_TYPE">New listings info. (optional)</param>
        /// <returns>ApiResponse of ListingsProviderInfo</returns>
        ApiResponse<ListingsProviderInfo> AddListingProviderWithHttpInfo (string pw = default(string), bool? validateListings = default(bool?), bool? validateLogin = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));
        /// <summary>
        /// Adds a tuner host.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New tuner host. (optional)</param>
        /// <returns>TunerHostInfo</returns>
        TunerHostInfo AddTunerHost (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));

        /// <summary>
        /// Adds a tuner host.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New tuner host. (optional)</param>
        /// <returns>ApiResponse of TunerHostInfo</returns>
        ApiResponse<TunerHostInfo> AddTunerHostWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));
        /// <summary>
        /// Cancels a live tv series timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <returns></returns>
        void CancelSeriesTimer (string timerId);

        /// <summary>
        /// Cancels a live tv series timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelSeriesTimerWithHttpInfo (string timerId);
        /// <summary>
        /// Cancels a live tv timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <returns></returns>
        void CancelTimer (string timerId);

        /// <summary>
        /// Cancels a live tv timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelTimerWithHttpInfo (string timerId);
        /// <summary>
        /// Creates a live tv series timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New series timer info. (optional)</param>
        /// <returns></returns>
        void CreateSeriesTimer (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));

        /// <summary>
        /// Creates a live tv series timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New series timer info. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateSeriesTimerWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));
        /// <summary>
        /// Creates a live tv timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New timer info. (optional)</param>
        /// <returns></returns>
        void CreateTimer (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));

        /// <summary>
        /// Creates a live tv timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New timer info. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateTimerWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));
        /// <summary>
        /// Delete listing provider.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing provider id. (optional)</param>
        /// <returns></returns>
        void DeleteListingProvider (string id = default(string));

        /// <summary>
        /// Delete listing provider.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing provider id. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteListingProviderWithHttpInfo (string id = default(string));
        /// <summary>
        /// Deletes a live tv recording.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <returns></returns>
        void DeleteRecording (Guid recordingId);

        /// <summary>
        /// Deletes a live tv recording.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRecordingWithHttpInfo (Guid recordingId);
        /// <summary>
        /// Deletes a tuner host.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Tuner host id. (optional)</param>
        /// <returns></returns>
        void DeleteTunerHost (string id = default(string));

        /// <summary>
        /// Deletes a tuner host.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Tuner host id. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTunerHostWithHttpInfo (string id = default(string));
        /// <summary>
        /// Discover tuners.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDevicesOnly">Only discover new tuners. (optional, default to false)</param>
        /// <returns>List&lt;TunerHostInfo&gt;</returns>
        List<TunerHostInfo> DiscoverTuners (bool? newDevicesOnly = default(bool?));

        /// <summary>
        /// Discover tuners.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDevicesOnly">Only discover new tuners. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;TunerHostInfo&gt;</returns>
        ApiResponse<List<TunerHostInfo>> DiscoverTunersWithHttpInfo (bool? newDevicesOnly = default(bool?));
        /// <summary>
        /// Discover tuners.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDevicesOnly">Only discover new tuners. (optional, default to false)</param>
        /// <returns>List&lt;TunerHostInfo&gt;</returns>
        List<TunerHostInfo> DiscvoverTuners (bool? newDevicesOnly = default(bool?));

        /// <summary>
        /// Discover tuners.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDevicesOnly">Only discover new tuners. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;TunerHostInfo&gt;</returns>
        ApiResponse<List<TunerHostInfo>> DiscvoverTunersWithHttpInfo (bool? newDevicesOnly = default(bool?));
        /// <summary>
        /// Gets a live tv channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <returns>BaseItemDto</returns>
        BaseItemDto GetChannel (Guid channelId, Guid? userId = default(Guid?));

        /// <summary>
        /// Gets a live tv channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <returns>ApiResponse of BaseItemDto</returns>
        ApiResponse<BaseItemDto> GetChannelWithHttpInfo (Guid channelId, Guid? userId = default(Guid?));
        /// <summary>
        /// Get channel mapping options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider id. (optional)</param>
        /// <returns>ChannelMappingOptionsDto</returns>
        ChannelMappingOptionsDto GetChannelMappingOptions (string providerId = default(string));

        /// <summary>
        /// Get channel mapping options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider id. (optional)</param>
        /// <returns>ApiResponse of ChannelMappingOptionsDto</returns>
        ApiResponse<ChannelMappingOptionsDto> GetChannelMappingOptionsWithHttpInfo (string providerId = default(string));
        /// <summary>
        /// Gets default listings provider info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListingsProviderInfo</returns>
        ListingsProviderInfo GetDefaultListingProvider ();

        /// <summary>
        /// Gets default listings provider info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListingsProviderInfo</returns>
        ApiResponse<ListingsProviderInfo> GetDefaultListingProviderWithHttpInfo ();
        /// <summary>
        /// Gets the default values for a new timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Optional. To attach default values based on a program. (optional)</param>
        /// <returns>SeriesTimerInfoDto</returns>
        SeriesTimerInfoDto GetDefaultTimer (string programId = default(string));

        /// <summary>
        /// Gets the default values for a new timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Optional. To attach default values based on a program. (optional)</param>
        /// <returns>ApiResponse of SeriesTimerInfoDto</returns>
        ApiResponse<SeriesTimerInfoDto> GetDefaultTimerWithHttpInfo (string programId = default(string));
        /// <summary>
        /// Get guid info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GuideInfo</returns>
        GuideInfo GetGuideInfo ();

        /// <summary>
        /// Get guid info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GuideInfo</returns>
        ApiResponse<GuideInfo> GetGuideInfoWithHttpInfo ();
        /// <summary>
        /// Gets available lineups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Provider id. (optional)</param>
        /// <param name="type">Provider type. (optional)</param>
        /// <param name="location">Location. (optional)</param>
        /// <param name="country">Country. (optional)</param>
        /// <returns>List&lt;NameIdPair&gt;</returns>
        List<NameIdPair> GetLineups (string id = default(string), string type = default(string), string location = default(string), string country = default(string));

        /// <summary>
        /// Gets available lineups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Provider id. (optional)</param>
        /// <param name="type">Provider type. (optional)</param>
        /// <param name="location">Location. (optional)</param>
        /// <param name="country">Country. (optional)</param>
        /// <returns>ApiResponse of List&lt;NameIdPair&gt;</returns>
        ApiResponse<List<NameIdPair>> GetLineupsWithHttpInfo (string id = default(string), string type = default(string), string location = default(string), string country = default(string));
        /// <summary>
        /// Gets a live tv recording stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetLiveRecordingFile (string recordingId);

        /// <summary>
        /// Gets a live tv recording stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetLiveRecordingFileWithHttpInfo (string recordingId);
        /// <summary>
        /// Gets a live tv channel stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">Stream id.</param>
        /// <param name="container">Container type.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetLiveStreamFile (string streamId, string container);

        /// <summary>
        /// Gets a live tv channel stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">Stream id.</param>
        /// <param name="container">Container type.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetLiveStreamFileWithHttpInfo (string streamId, string container);
        /// <summary>
        /// Gets available live tv channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Optional. Filter by channel type. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="isFavorite">Optional. Filter by channels that are favorites, or not. (optional)</param>
        /// <param name="isLiked">Optional. Filter by channels that are liked, or not. (optional)</param>
        /// <param name="isDisliked">Optional. Filter by channels that are disliked, or not. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">\&quot;Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="sortBy">Optional. Key to sort by. (optional)</param>
        /// <param name="sortOrder">Optional. Sort order. (optional)</param>
        /// <param name="enableFavoriteSorting">Optional. Incorporate favorite and like status into channel sorting. (optional, default to false)</param>
        /// <param name="addCurrentProgram">Optional. Adds current program info to each channel. (optional, default to true)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetLiveTvChannels (ChannelType? type = default(ChannelType?), Guid? userId = default(Guid?), int? startIndex = default(int?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), int? limit = default(int?), bool? isFavorite = default(bool?), bool? isLiked = default(bool?), bool? isDisliked = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), List<string> sortBy = default(List<string>), SortOrder? sortOrder = default(SortOrder?), bool? enableFavoriteSorting = default(bool?), bool? addCurrentProgram = default(bool?));

        /// <summary>
        /// Gets available live tv channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Optional. Filter by channel type. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="isFavorite">Optional. Filter by channels that are favorites, or not. (optional)</param>
        /// <param name="isLiked">Optional. Filter by channels that are liked, or not. (optional)</param>
        /// <param name="isDisliked">Optional. Filter by channels that are disliked, or not. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">\&quot;Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="sortBy">Optional. Key to sort by. (optional)</param>
        /// <param name="sortOrder">Optional. Sort order. (optional)</param>
        /// <param name="enableFavoriteSorting">Optional. Incorporate favorite and like status into channel sorting. (optional, default to false)</param>
        /// <param name="addCurrentProgram">Optional. Adds current program info to each channel. (optional, default to true)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetLiveTvChannelsWithHttpInfo (ChannelType? type = default(ChannelType?), Guid? userId = default(Guid?), int? startIndex = default(int?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), int? limit = default(int?), bool? isFavorite = default(bool?), bool? isLiked = default(bool?), bool? isDisliked = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), List<string> sortBy = default(List<string>), SortOrder? sortOrder = default(SortOrder?), bool? enableFavoriteSorting = default(bool?), bool? addCurrentProgram = default(bool?));
        /// <summary>
        /// Gets available live tv services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LiveTvInfo</returns>
        LiveTvInfo GetLiveTvInfo ();

        /// <summary>
        /// Gets available live tv services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LiveTvInfo</returns>
        ApiResponse<LiveTvInfo> GetLiveTvInfoWithHttpInfo ();
        /// <summary>
        /// Gets available live tv epgs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">The channels to return guide information for. (optional)</param>
        /// <param name="userId">Optional. Filter by user id. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere start date. (optional)</param>
        /// <param name="hasAired">Optional. Filter by programs that have completed airing, or not. (optional)</param>
        /// <param name="isAiring">Optional. Filter by programs that are currently airing, or not. (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere start date. (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere end date. (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere end date. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Name, StartDate. (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending. (optional)</param>
        /// <param name="genres">The genres to return guide information for. (optional)</param>
        /// <param name="genreIds">The genre ids to return guide information for. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by series timer id. (optional)</param>
        /// <param name="librarySeriesId">Optional. Filter by library series id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableTotalRecordCount">Retrieve total record count. (optional, default to true)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetLiveTvPrograms (List<Guid> channelIds = default(List<Guid>), Guid? userId = default(Guid?), DateTime? minStartDate = default(DateTime?), bool? hasAired = default(bool?), bool? isAiring = default(bool?), DateTime? maxStartDate = default(DateTime?), DateTime? minEndDate = default(DateTime?), DateTime? maxEndDate = default(DateTime?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), int? startIndex = default(int?), int? limit = default(int?), List<string> sortBy = default(List<string>), List<SortOrder> sortOrder = default(List<SortOrder>), List<string> genres = default(List<string>), List<Guid> genreIds = default(List<Guid>), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), string seriesTimerId = default(string), Guid? librarySeriesId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), bool? enableTotalRecordCount = default(bool?));

        /// <summary>
        /// Gets available live tv epgs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">The channels to return guide information for. (optional)</param>
        /// <param name="userId">Optional. Filter by user id. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere start date. (optional)</param>
        /// <param name="hasAired">Optional. Filter by programs that have completed airing, or not. (optional)</param>
        /// <param name="isAiring">Optional. Filter by programs that are currently airing, or not. (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere start date. (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere end date. (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere end date. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Name, StartDate. (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending. (optional)</param>
        /// <param name="genres">The genres to return guide information for. (optional)</param>
        /// <param name="genreIds">The genre ids to return guide information for. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by series timer id. (optional)</param>
        /// <param name="librarySeriesId">Optional. Filter by library series id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableTotalRecordCount">Retrieve total record count. (optional, default to true)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetLiveTvProgramsWithHttpInfo (List<Guid> channelIds = default(List<Guid>), Guid? userId = default(Guid?), DateTime? minStartDate = default(DateTime?), bool? hasAired = default(bool?), bool? isAiring = default(bool?), DateTime? maxStartDate = default(DateTime?), DateTime? minEndDate = default(DateTime?), DateTime? maxEndDate = default(DateTime?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), int? startIndex = default(int?), int? limit = default(int?), List<string> sortBy = default(List<string>), List<SortOrder> sortOrder = default(List<SortOrder>), List<string> genres = default(List<string>), List<Guid> genreIds = default(List<Guid>), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), string seriesTimerId = default(string), Guid? librarySeriesId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), bool? enableTotalRecordCount = default(bool?));
        /// <summary>
        /// Gets a live tv program.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Program id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <returns>BaseItemDto</returns>
        BaseItemDto GetProgram (string programId, Guid? userId = default(Guid?));

        /// <summary>
        /// Gets a live tv program.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Program id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <returns>ApiResponse of BaseItemDto</returns>
        ApiResponse<BaseItemDto> GetProgramWithHttpInfo (string programId, Guid? userId = default(Guid?));
        /// <summary>
        /// Gets available live tv epgs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">Request body. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetPrograms (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));

        /// <summary>
        /// Gets available live tv epgs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">Request body. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetProgramsWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));
        /// <summary>
        /// Gets recommended live tv epgs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. filter by user id. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="isAiring">Optional. Filter by programs that are currently airing, or not. (optional)</param>
        /// <param name="hasAired">Optional. Filter by programs that have completed airing, or not. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="genreIds">The genres to return guide information for. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Retrieve total record count. (optional, default to true)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetRecommendedPrograms (Guid? userId = default(Guid?), int? limit = default(int?), bool? isAiring = default(bool?), bool? hasAired = default(bool?), bool? isSeries = default(bool?), bool? isMovie = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<Guid> genreIds = default(List<Guid>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?));

        /// <summary>
        /// Gets recommended live tv epgs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. filter by user id. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="isAiring">Optional. Filter by programs that are currently airing, or not. (optional)</param>
        /// <param name="hasAired">Optional. Filter by programs that have completed airing, or not. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="genreIds">The genres to return guide information for. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Retrieve total record count. (optional, default to true)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetRecommendedProgramsWithHttpInfo (Guid? userId = default(Guid?), int? limit = default(int?), bool? isAiring = default(bool?), bool? hasAired = default(bool?), bool? isSeries = default(bool?), bool? isMovie = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<Guid> genreIds = default(List<Guid>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?));
        /// <summary>
        /// Gets a live tv recording.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <returns>BaseItemDto</returns>
        BaseItemDto GetRecording (Guid recordingId, Guid? userId = default(Guid?));

        /// <summary>
        /// Gets a live tv recording.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <returns>ApiResponse of BaseItemDto</returns>
        ApiResponse<BaseItemDto> GetRecordingWithHttpInfo (Guid recordingId, Guid? userId = default(Guid?));
        /// <summary>
        /// Gets recording folders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetRecordingFolders (Guid? userId = default(Guid?));

        /// <summary>
        /// Gets recording folders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetRecordingFoldersWithHttpInfo (Guid? userId = default(Guid?));
        /// <summary>
        /// Get recording group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group id.</param>
        /// <returns></returns>
        void GetRecordingGroup (Guid groupId);

        /// <summary>
        /// Get recording group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetRecordingGroupWithHttpInfo (Guid groupId);
        /// <summary>
        /// Gets live tv recording groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetRecordingGroups (Guid? userId = default(Guid?));

        /// <summary>
        /// Gets live tv recording groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetRecordingGroupsWithHttpInfo (Guid? userId = default(Guid?));
        /// <summary>
        /// Gets live tv recordings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="status">Optional. Filter by recording status. (optional)</param>
        /// <param name="isInProgress">Optional. Filter by recordings that are in progress, or not. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by recordings belonging to a series timer. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isLibraryItem">Optional. Filter for is library item. (optional)</param>
        /// <param name="enableTotalRecordCount">Optional. Return total record count. (optional, default to true)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetRecordings (string channelId = default(string), Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), RecordingStatus? status = default(RecordingStatus?), bool? isInProgress = default(bool?), string seriesTimerId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? isNews = default(bool?), bool? isLibraryItem = default(bool?), bool? enableTotalRecordCount = default(bool?));

        /// <summary>
        /// Gets live tv recordings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="status">Optional. Filter by recording status. (optional)</param>
        /// <param name="isInProgress">Optional. Filter by recordings that are in progress, or not. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by recordings belonging to a series timer. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isLibraryItem">Optional. Filter for is library item. (optional)</param>
        /// <param name="enableTotalRecordCount">Optional. Return total record count. (optional, default to true)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetRecordingsWithHttpInfo (string channelId = default(string), Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), RecordingStatus? status = default(RecordingStatus?), bool? isInProgress = default(bool?), string seriesTimerId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? isNews = default(bool?), bool? isLibraryItem = default(bool?), bool? enableTotalRecordCount = default(bool?));
        /// <summary>
        /// Gets live tv recording series.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="groupId">Optional. Filter by recording group. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="status">Optional. Filter by recording status. (optional)</param>
        /// <param name="isInProgress">Optional. Filter by recordings that are in progress, or not. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by recordings belonging to a series timer. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Optional. Return total record count. (optional, default to true)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetRecordingsSeries (string channelId = default(string), Guid? userId = default(Guid?), string groupId = default(string), int? startIndex = default(int?), int? limit = default(int?), RecordingStatus? status = default(RecordingStatus?), bool? isInProgress = default(bool?), string seriesTimerId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?));

        /// <summary>
        /// Gets live tv recording series.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="groupId">Optional. Filter by recording group. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="status">Optional. Filter by recording status. (optional)</param>
        /// <param name="isInProgress">Optional. Filter by recordings that are in progress, or not. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by recordings belonging to a series timer. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Optional. Return total record count. (optional, default to true)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetRecordingsSeriesWithHttpInfo (string channelId = default(string), Guid? userId = default(Guid?), string groupId = default(string), int? startIndex = default(int?), int? limit = default(int?), RecordingStatus? status = default(RecordingStatus?), bool? isInProgress = default(bool?), string seriesTimerId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?));
        /// <summary>
        /// Gets available countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetSchedulesDirectCountries ();

        /// <summary>
        /// Gets available countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetSchedulesDirectCountriesWithHttpInfo ();
        /// <summary>
        /// Gets a live tv series timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <returns>SeriesTimerInfoDto</returns>
        SeriesTimerInfoDto GetSeriesTimer (string timerId);

        /// <summary>
        /// Gets a live tv series timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <returns>ApiResponse of SeriesTimerInfoDto</returns>
        ApiResponse<SeriesTimerInfoDto> GetSeriesTimerWithHttpInfo (string timerId);
        /// <summary>
        /// Gets live tv series timers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Sort by SortName or Priority. (optional)</param>
        /// <param name="sortOrder">Optional. Sort in Ascending or Descending order. (optional)</param>
        /// <returns>SeriesTimerInfoDtoQueryResult</returns>
        SeriesTimerInfoDtoQueryResult GetSeriesTimers (string sortBy = default(string), SortOrder? sortOrder = default(SortOrder?));

        /// <summary>
        /// Gets live tv series timers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Sort by SortName or Priority. (optional)</param>
        /// <param name="sortOrder">Optional. Sort in Ascending or Descending order. (optional)</param>
        /// <returns>ApiResponse of SeriesTimerInfoDtoQueryResult</returns>
        ApiResponse<SeriesTimerInfoDtoQueryResult> GetSeriesTimersWithHttpInfo (string sortBy = default(string), SortOrder? sortOrder = default(SortOrder?));
        /// <summary>
        /// Gets a timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <returns>TimerInfoDto</returns>
        TimerInfoDto GetTimer (string timerId);

        /// <summary>
        /// Gets a timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <returns>ApiResponse of TimerInfoDto</returns>
        ApiResponse<TimerInfoDto> GetTimerWithHttpInfo (string timerId);
        /// <summary>
        /// Gets the live tv timers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by timers belonging to a series timer. (optional)</param>
        /// <param name="isActive">Optional. Filter by timers that are active. (optional)</param>
        /// <param name="isScheduled">Optional. Filter by timers that are scheduled. (optional)</param>
        /// <returns>TimerInfoDtoQueryResult</returns>
        TimerInfoDtoQueryResult GetTimers (string channelId = default(string), string seriesTimerId = default(string), bool? isActive = default(bool?), bool? isScheduled = default(bool?));

        /// <summary>
        /// Gets the live tv timers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by timers belonging to a series timer. (optional)</param>
        /// <param name="isActive">Optional. Filter by timers that are active. (optional)</param>
        /// <param name="isScheduled">Optional. Filter by timers that are scheduled. (optional)</param>
        /// <returns>ApiResponse of TimerInfoDtoQueryResult</returns>
        ApiResponse<TimerInfoDtoQueryResult> GetTimersWithHttpInfo (string channelId = default(string), string seriesTimerId = default(string), bool? isActive = default(bool?), bool? isScheduled = default(bool?));
        /// <summary>
        /// Get tuner host types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;NameIdPair&gt;</returns>
        List<NameIdPair> GetTunerHostTypes ();

        /// <summary>
        /// Get tuner host types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;NameIdPair&gt;</returns>
        ApiResponse<List<NameIdPair>> GetTunerHostTypesWithHttpInfo ();
        /// <summary>
        /// Resets a tv tuner.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tunerId">Tuner id.</param>
        /// <returns></returns>
        void ResetTuner (string tunerId);

        /// <summary>
        /// Resets a tv tuner.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tunerId">Tuner id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResetTunerWithHttpInfo (string tunerId);
        /// <summary>
        /// Set channel mappings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The set channel mapping dto.</param>
        /// <returns>TunerChannelMapping</returns>
        TunerChannelMapping SetChannelMapping (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);

        /// <summary>
        /// Set channel mappings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The set channel mapping dto.</param>
        /// <returns>ApiResponse of TunerChannelMapping</returns>
        ApiResponse<TunerChannelMapping> SetChannelMappingWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);
        /// <summary>
        /// Updates a live tv series timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">New series timer info. (optional)</param>
        /// <returns></returns>
        void UpdateSeriesTimer (string timerId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));

        /// <summary>
        /// Updates a live tv series timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">New series timer info. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSeriesTimerWithHttpInfo (string timerId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));
        /// <summary>
        /// Updates a live tv timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">New timer info. (optional)</param>
        /// <returns></returns>
        void UpdateTimer (string timerId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));

        /// <summary>
        /// Updates a live tv timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">New timer info. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTimerWithHttpInfo (string timerId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds a listings provider.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pw">Password. (optional)</param>
        /// <param name="validateListings">Validate listings. (optional, default to false)</param>
        /// <param name="validateLogin">Validate login. (optional, default to false)</param>
        /// <param name="UNKNOWN_BASE_TYPE">New listings info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListingsProviderInfo</returns>
        System.Threading.Tasks.Task<ListingsProviderInfo> AddListingProviderAsync (string pw = default(string), bool? validateListings = default(bool?), bool? validateLogin = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a listings provider.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pw">Password. (optional)</param>
        /// <param name="validateListings">Validate listings. (optional, default to false)</param>
        /// <param name="validateLogin">Validate login. (optional, default to false)</param>
        /// <param name="UNKNOWN_BASE_TYPE">New listings info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListingsProviderInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListingsProviderInfo>> AddListingProviderWithHttpInfoAsync (string pw = default(string), bool? validateListings = default(bool?), bool? validateLogin = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Adds a tuner host.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New tuner host. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TunerHostInfo</returns>
        System.Threading.Tasks.Task<TunerHostInfo> AddTunerHostAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a tuner host.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New tuner host. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TunerHostInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TunerHostInfo>> AddTunerHostWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Cancels a live tv series timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelSeriesTimerAsync (string timerId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancels a live tv series timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelSeriesTimerWithHttpInfoAsync (string timerId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Cancels a live tv timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelTimerAsync (string timerId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancels a live tv timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelTimerWithHttpInfoAsync (string timerId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a live tv series timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New series timer info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateSeriesTimerAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a live tv series timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New series timer info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateSeriesTimerWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a live tv timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New timer info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateTimerAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a live tv timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New timer info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateTimerWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete listing provider.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing provider id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteListingProviderAsync (string id = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete listing provider.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing provider id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListingProviderWithHttpInfoAsync (string id = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes a live tv recording.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRecordingAsync (Guid recordingId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a live tv recording.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRecordingWithHttpInfoAsync (Guid recordingId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes a tuner host.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Tuner host id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTunerHostAsync (string id = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a tuner host.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Tuner host id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTunerHostWithHttpInfoAsync (string id = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Discover tuners.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDevicesOnly">Only discover new tuners. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TunerHostInfo&gt;</returns>
        System.Threading.Tasks.Task<List<TunerHostInfo>> DiscoverTunersAsync (bool? newDevicesOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Discover tuners.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDevicesOnly">Only discover new tuners. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TunerHostInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TunerHostInfo>>> DiscoverTunersWithHttpInfoAsync (bool? newDevicesOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Discover tuners.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDevicesOnly">Only discover new tuners. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TunerHostInfo&gt;</returns>
        System.Threading.Tasks.Task<List<TunerHostInfo>> DiscvoverTunersAsync (bool? newDevicesOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Discover tuners.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDevicesOnly">Only discover new tuners. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TunerHostInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TunerHostInfo>>> DiscvoverTunersWithHttpInfoAsync (bool? newDevicesOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a live tv channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDto</returns>
        System.Threading.Tasks.Task<BaseItemDto> GetChannelAsync (Guid channelId, Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a live tv channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDto>> GetChannelWithHttpInfoAsync (Guid channelId, Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get channel mapping options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ChannelMappingOptionsDto</returns>
        System.Threading.Tasks.Task<ChannelMappingOptionsDto> GetChannelMappingOptionsAsync (string providerId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get channel mapping options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ChannelMappingOptionsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelMappingOptionsDto>> GetChannelMappingOptionsWithHttpInfoAsync (string providerId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets default listings provider info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListingsProviderInfo</returns>
        System.Threading.Tasks.Task<ListingsProviderInfo> GetDefaultListingProviderAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets default listings provider info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListingsProviderInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListingsProviderInfo>> GetDefaultListingProviderWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the default values for a new timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Optional. To attach default values based on a program. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SeriesTimerInfoDto</returns>
        System.Threading.Tasks.Task<SeriesTimerInfoDto> GetDefaultTimerAsync (string programId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the default values for a new timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Optional. To attach default values based on a program. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SeriesTimerInfoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SeriesTimerInfoDto>> GetDefaultTimerWithHttpInfoAsync (string programId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get guid info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GuideInfo</returns>
        System.Threading.Tasks.Task<GuideInfo> GetGuideInfoAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get guid info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GuideInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GuideInfo>> GetGuideInfoWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets available lineups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Provider id. (optional)</param>
        /// <param name="type">Provider type. (optional)</param>
        /// <param name="location">Location. (optional)</param>
        /// <param name="country">Country. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;NameIdPair&gt;</returns>
        System.Threading.Tasks.Task<List<NameIdPair>> GetLineupsAsync (string id = default(string), string type = default(string), string location = default(string), string country = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets available lineups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Provider id. (optional)</param>
        /// <param name="type">Provider type. (optional)</param>
        /// <param name="location">Location. (optional)</param>
        /// <param name="country">Country. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;NameIdPair&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NameIdPair>>> GetLineupsWithHttpInfoAsync (string id = default(string), string type = default(string), string location = default(string), string country = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a live tv recording stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetLiveRecordingFileAsync (string recordingId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a live tv recording stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetLiveRecordingFileWithHttpInfoAsync (string recordingId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a live tv channel stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">Stream id.</param>
        /// <param name="container">Container type.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetLiveStreamFileAsync (string streamId, string container, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a live tv channel stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">Stream id.</param>
        /// <param name="container">Container type.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetLiveStreamFileWithHttpInfoAsync (string streamId, string container, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets available live tv channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Optional. Filter by channel type. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="isFavorite">Optional. Filter by channels that are favorites, or not. (optional)</param>
        /// <param name="isLiked">Optional. Filter by channels that are liked, or not. (optional)</param>
        /// <param name="isDisliked">Optional. Filter by channels that are disliked, or not. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">\&quot;Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="sortBy">Optional. Key to sort by. (optional)</param>
        /// <param name="sortOrder">Optional. Sort order. (optional)</param>
        /// <param name="enableFavoriteSorting">Optional. Incorporate favorite and like status into channel sorting. (optional, default to false)</param>
        /// <param name="addCurrentProgram">Optional. Adds current program info to each channel. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetLiveTvChannelsAsync (ChannelType? type = default(ChannelType?), Guid? userId = default(Guid?), int? startIndex = default(int?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), int? limit = default(int?), bool? isFavorite = default(bool?), bool? isLiked = default(bool?), bool? isDisliked = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), List<string> sortBy = default(List<string>), SortOrder? sortOrder = default(SortOrder?), bool? enableFavoriteSorting = default(bool?), bool? addCurrentProgram = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets available live tv channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Optional. Filter by channel type. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="isFavorite">Optional. Filter by channels that are favorites, or not. (optional)</param>
        /// <param name="isLiked">Optional. Filter by channels that are liked, or not. (optional)</param>
        /// <param name="isDisliked">Optional. Filter by channels that are disliked, or not. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">\&quot;Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="sortBy">Optional. Key to sort by. (optional)</param>
        /// <param name="sortOrder">Optional. Sort order. (optional)</param>
        /// <param name="enableFavoriteSorting">Optional. Incorporate favorite and like status into channel sorting. (optional, default to false)</param>
        /// <param name="addCurrentProgram">Optional. Adds current program info to each channel. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetLiveTvChannelsWithHttpInfoAsync (ChannelType? type = default(ChannelType?), Guid? userId = default(Guid?), int? startIndex = default(int?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), int? limit = default(int?), bool? isFavorite = default(bool?), bool? isLiked = default(bool?), bool? isDisliked = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), List<string> sortBy = default(List<string>), SortOrder? sortOrder = default(SortOrder?), bool? enableFavoriteSorting = default(bool?), bool? addCurrentProgram = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets available live tv services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LiveTvInfo</returns>
        System.Threading.Tasks.Task<LiveTvInfo> GetLiveTvInfoAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets available live tv services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LiveTvInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<LiveTvInfo>> GetLiveTvInfoWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets available live tv epgs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">The channels to return guide information for. (optional)</param>
        /// <param name="userId">Optional. Filter by user id. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere start date. (optional)</param>
        /// <param name="hasAired">Optional. Filter by programs that have completed airing, or not. (optional)</param>
        /// <param name="isAiring">Optional. Filter by programs that are currently airing, or not. (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere start date. (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere end date. (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere end date. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Name, StartDate. (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending. (optional)</param>
        /// <param name="genres">The genres to return guide information for. (optional)</param>
        /// <param name="genreIds">The genre ids to return guide information for. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by series timer id. (optional)</param>
        /// <param name="librarySeriesId">Optional. Filter by library series id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableTotalRecordCount">Retrieve total record count. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetLiveTvProgramsAsync (List<Guid> channelIds = default(List<Guid>), Guid? userId = default(Guid?), DateTime? minStartDate = default(DateTime?), bool? hasAired = default(bool?), bool? isAiring = default(bool?), DateTime? maxStartDate = default(DateTime?), DateTime? minEndDate = default(DateTime?), DateTime? maxEndDate = default(DateTime?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), int? startIndex = default(int?), int? limit = default(int?), List<string> sortBy = default(List<string>), List<SortOrder> sortOrder = default(List<SortOrder>), List<string> genres = default(List<string>), List<Guid> genreIds = default(List<Guid>), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), string seriesTimerId = default(string), Guid? librarySeriesId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), bool? enableTotalRecordCount = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets available live tv epgs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">The channels to return guide information for. (optional)</param>
        /// <param name="userId">Optional. Filter by user id. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere start date. (optional)</param>
        /// <param name="hasAired">Optional. Filter by programs that have completed airing, or not. (optional)</param>
        /// <param name="isAiring">Optional. Filter by programs that are currently airing, or not. (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere start date. (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere end date. (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere end date. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Name, StartDate. (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending. (optional)</param>
        /// <param name="genres">The genres to return guide information for. (optional)</param>
        /// <param name="genreIds">The genre ids to return guide information for. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by series timer id. (optional)</param>
        /// <param name="librarySeriesId">Optional. Filter by library series id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableTotalRecordCount">Retrieve total record count. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetLiveTvProgramsWithHttpInfoAsync (List<Guid> channelIds = default(List<Guid>), Guid? userId = default(Guid?), DateTime? minStartDate = default(DateTime?), bool? hasAired = default(bool?), bool? isAiring = default(bool?), DateTime? maxStartDate = default(DateTime?), DateTime? minEndDate = default(DateTime?), DateTime? maxEndDate = default(DateTime?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), int? startIndex = default(int?), int? limit = default(int?), List<string> sortBy = default(List<string>), List<SortOrder> sortOrder = default(List<SortOrder>), List<string> genres = default(List<string>), List<Guid> genreIds = default(List<Guid>), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), string seriesTimerId = default(string), Guid? librarySeriesId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), bool? enableTotalRecordCount = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a live tv program.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Program id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDto</returns>
        System.Threading.Tasks.Task<BaseItemDto> GetProgramAsync (string programId, Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a live tv program.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Program id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDto>> GetProgramWithHttpInfoAsync (string programId, Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets available live tv epgs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">Request body. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetProgramsAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets available live tv epgs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">Request body. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetProgramsWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets recommended live tv epgs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. filter by user id. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="isAiring">Optional. Filter by programs that are currently airing, or not. (optional)</param>
        /// <param name="hasAired">Optional. Filter by programs that have completed airing, or not. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="genreIds">The genres to return guide information for. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Retrieve total record count. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetRecommendedProgramsAsync (Guid? userId = default(Guid?), int? limit = default(int?), bool? isAiring = default(bool?), bool? hasAired = default(bool?), bool? isSeries = default(bool?), bool? isMovie = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<Guid> genreIds = default(List<Guid>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets recommended live tv epgs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. filter by user id. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="isAiring">Optional. Filter by programs that are currently airing, or not. (optional)</param>
        /// <param name="hasAired">Optional. Filter by programs that have completed airing, or not. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="genreIds">The genres to return guide information for. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Retrieve total record count. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetRecommendedProgramsWithHttpInfoAsync (Guid? userId = default(Guid?), int? limit = default(int?), bool? isAiring = default(bool?), bool? hasAired = default(bool?), bool? isSeries = default(bool?), bool? isMovie = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<Guid> genreIds = default(List<Guid>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a live tv recording.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDto</returns>
        System.Threading.Tasks.Task<BaseItemDto> GetRecordingAsync (Guid recordingId, Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a live tv recording.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDto>> GetRecordingWithHttpInfoAsync (Guid recordingId, Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets recording folders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetRecordingFoldersAsync (Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets recording folders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetRecordingFoldersWithHttpInfoAsync (Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get recording group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetRecordingGroupAsync (Guid groupId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get recording group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetRecordingGroupWithHttpInfoAsync (Guid groupId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets live tv recording groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetRecordingGroupsAsync (Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets live tv recording groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetRecordingGroupsWithHttpInfoAsync (Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets live tv recordings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="status">Optional. Filter by recording status. (optional)</param>
        /// <param name="isInProgress">Optional. Filter by recordings that are in progress, or not. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by recordings belonging to a series timer. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isLibraryItem">Optional. Filter for is library item. (optional)</param>
        /// <param name="enableTotalRecordCount">Optional. Return total record count. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetRecordingsAsync (string channelId = default(string), Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), RecordingStatus? status = default(RecordingStatus?), bool? isInProgress = default(bool?), string seriesTimerId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? isNews = default(bool?), bool? isLibraryItem = default(bool?), bool? enableTotalRecordCount = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets live tv recordings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="status">Optional. Filter by recording status. (optional)</param>
        /// <param name="isInProgress">Optional. Filter by recordings that are in progress, or not. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by recordings belonging to a series timer. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isLibraryItem">Optional. Filter for is library item. (optional)</param>
        /// <param name="enableTotalRecordCount">Optional. Return total record count. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetRecordingsWithHttpInfoAsync (string channelId = default(string), Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), RecordingStatus? status = default(RecordingStatus?), bool? isInProgress = default(bool?), string seriesTimerId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? isNews = default(bool?), bool? isLibraryItem = default(bool?), bool? enableTotalRecordCount = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets live tv recording series.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="groupId">Optional. Filter by recording group. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="status">Optional. Filter by recording status. (optional)</param>
        /// <param name="isInProgress">Optional. Filter by recordings that are in progress, or not. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by recordings belonging to a series timer. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Optional. Return total record count. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetRecordingsSeriesAsync (string channelId = default(string), Guid? userId = default(Guid?), string groupId = default(string), int? startIndex = default(int?), int? limit = default(int?), RecordingStatus? status = default(RecordingStatus?), bool? isInProgress = default(bool?), string seriesTimerId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets live tv recording series.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="groupId">Optional. Filter by recording group. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="status">Optional. Filter by recording status. (optional)</param>
        /// <param name="isInProgress">Optional. Filter by recordings that are in progress, or not. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by recordings belonging to a series timer. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Optional. Return total record count. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetRecordingsSeriesWithHttpInfoAsync (string channelId = default(string), Guid? userId = default(Guid?), string groupId = default(string), int? startIndex = default(int?), int? limit = default(int?), RecordingStatus? status = default(RecordingStatus?), bool? isInProgress = default(bool?), string seriesTimerId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets available countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetSchedulesDirectCountriesAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets available countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetSchedulesDirectCountriesWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a live tv series timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SeriesTimerInfoDto</returns>
        System.Threading.Tasks.Task<SeriesTimerInfoDto> GetSeriesTimerAsync (string timerId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a live tv series timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SeriesTimerInfoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SeriesTimerInfoDto>> GetSeriesTimerWithHttpInfoAsync (string timerId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets live tv series timers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Sort by SortName or Priority. (optional)</param>
        /// <param name="sortOrder">Optional. Sort in Ascending or Descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SeriesTimerInfoDtoQueryResult</returns>
        System.Threading.Tasks.Task<SeriesTimerInfoDtoQueryResult> GetSeriesTimersAsync (string sortBy = default(string), SortOrder? sortOrder = default(SortOrder?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets live tv series timers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Sort by SortName or Priority. (optional)</param>
        /// <param name="sortOrder">Optional. Sort in Ascending or Descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SeriesTimerInfoDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SeriesTimerInfoDtoQueryResult>> GetSeriesTimersWithHttpInfoAsync (string sortBy = default(string), SortOrder? sortOrder = default(SortOrder?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TimerInfoDto</returns>
        System.Threading.Tasks.Task<TimerInfoDto> GetTimerAsync (string timerId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TimerInfoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimerInfoDto>> GetTimerWithHttpInfoAsync (string timerId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the live tv timers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by timers belonging to a series timer. (optional)</param>
        /// <param name="isActive">Optional. Filter by timers that are active. (optional)</param>
        /// <param name="isScheduled">Optional. Filter by timers that are scheduled. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TimerInfoDtoQueryResult</returns>
        System.Threading.Tasks.Task<TimerInfoDtoQueryResult> GetTimersAsync (string channelId = default(string), string seriesTimerId = default(string), bool? isActive = default(bool?), bool? isScheduled = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the live tv timers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by timers belonging to a series timer. (optional)</param>
        /// <param name="isActive">Optional. Filter by timers that are active. (optional)</param>
        /// <param name="isScheduled">Optional. Filter by timers that are scheduled. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TimerInfoDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimerInfoDtoQueryResult>> GetTimersWithHttpInfoAsync (string channelId = default(string), string seriesTimerId = default(string), bool? isActive = default(bool?), bool? isScheduled = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get tuner host types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;NameIdPair&gt;</returns>
        System.Threading.Tasks.Task<List<NameIdPair>> GetTunerHostTypesAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get tuner host types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;NameIdPair&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NameIdPair>>> GetTunerHostTypesWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Resets a tv tuner.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tunerId">Tuner id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResetTunerAsync (string tunerId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Resets a tv tuner.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tunerId">Tuner id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResetTunerWithHttpInfoAsync (string tunerId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set channel mappings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The set channel mapping dto.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TunerChannelMapping</returns>
        System.Threading.Tasks.Task<TunerChannelMapping> SetChannelMappingAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set channel mappings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The set channel mapping dto.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TunerChannelMapping)</returns>
        System.Threading.Tasks.Task<ApiResponse<TunerChannelMapping>> SetChannelMappingWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a live tv series timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">New series timer info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSeriesTimerAsync (string timerId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a live tv series timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">New series timer info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSeriesTimerWithHttpInfoAsync (string timerId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a live tv timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">New timer info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTimerAsync (string timerId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a live tv timer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">New timer info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTimerWithHttpInfoAsync (string timerId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LiveTvApi : ILiveTvApi
    {
        private Jellyfin.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LiveTvApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LiveTvApi(String basePath)
        {
            this.Configuration = new Jellyfin.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LiveTvApi"/> class
        /// </summary>
        /// <returns></returns>
        public LiveTvApi()
        {
            this.Configuration = Jellyfin.Api.Client.Configuration.Default;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LiveTvApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LiveTvApi(Jellyfin.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Jellyfin.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Jellyfin.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Jellyfin.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds a listings provider. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pw">Password. (optional)</param>
        /// <param name="validateListings">Validate listings. (optional, default to false)</param>
        /// <param name="validateLogin">Validate login. (optional, default to false)</param>
        /// <param name="UNKNOWN_BASE_TYPE">New listings info. (optional)</param>
        /// <returns>ListingsProviderInfo</returns>
        public ListingsProviderInfo AddListingProvider (string pw = default(string), bool? validateListings = default(bool?), bool? validateLogin = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
             ApiResponse<ListingsProviderInfo> localVarResponse = AddListingProviderWithHttpInfo(pw, validateListings, validateLogin, UNKNOWN_BASE_TYPE);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a listings provider. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pw">Password. (optional)</param>
        /// <param name="validateListings">Validate listings. (optional, default to false)</param>
        /// <param name="validateLogin">Validate login. (optional, default to false)</param>
        /// <param name="UNKNOWN_BASE_TYPE">New listings info. (optional)</param>
        /// <returns>ApiResponse of ListingsProviderInfo</returns>
        public ApiResponse<ListingsProviderInfo> AddListingProviderWithHttpInfo (string pw = default(string), bool? validateListings = default(bool?), bool? validateLogin = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {

            var localVarPath = "/LiveTv/ListingProviders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pw != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pw", pw)); // query parameter
            if (validateListings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validateListings", validateListings)); // query parameter
            if (validateLogin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validateLogin", validateLogin)); // query parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddListingProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingsProviderInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListingsProviderInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingsProviderInfo)));
        }

        /// <summary>
        /// Adds a listings provider. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pw">Password. (optional)</param>
        /// <param name="validateListings">Validate listings. (optional, default to false)</param>
        /// <param name="validateLogin">Validate login. (optional, default to false)</param>
        /// <param name="UNKNOWN_BASE_TYPE">New listings info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListingsProviderInfo</returns>
        public async System.Threading.Tasks.Task<ListingsProviderInfo> AddListingProviderAsync (string pw = default(string), bool? validateListings = default(bool?), bool? validateLogin = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ListingsProviderInfo> localVarResponse = await AddListingProviderWithHttpInfoAsync(pw, validateListings, validateLogin, UNKNOWN_BASE_TYPE, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a listings provider. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pw">Password. (optional)</param>
        /// <param name="validateListings">Validate listings. (optional, default to false)</param>
        /// <param name="validateLogin">Validate login. (optional, default to false)</param>
        /// <param name="UNKNOWN_BASE_TYPE">New listings info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListingsProviderInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListingsProviderInfo>> AddListingProviderWithHttpInfoAsync (string pw = default(string), bool? validateListings = default(bool?), bool? validateLogin = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/ListingProviders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pw != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pw", pw)); // query parameter
            if (validateListings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validateListings", validateListings)); // query parameter
            if (validateLogin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validateLogin", validateLogin)); // query parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddListingProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingsProviderInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListingsProviderInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingsProviderInfo)));
        }

        /// <summary>
        /// Adds a tuner host. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New tuner host. (optional)</param>
        /// <returns>TunerHostInfo</returns>
        public TunerHostInfo AddTunerHost (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
             ApiResponse<TunerHostInfo> localVarResponse = AddTunerHostWithHttpInfo(UNKNOWN_BASE_TYPE);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a tuner host. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New tuner host. (optional)</param>
        /// <returns>ApiResponse of TunerHostInfo</returns>
        public ApiResponse<TunerHostInfo> AddTunerHostWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {

            var localVarPath = "/LiveTv/TunerHosts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTunerHost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TunerHostInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TunerHostInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TunerHostInfo)));
        }

        /// <summary>
        /// Adds a tuner host. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New tuner host. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TunerHostInfo</returns>
        public async System.Threading.Tasks.Task<TunerHostInfo> AddTunerHostAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TunerHostInfo> localVarResponse = await AddTunerHostWithHttpInfoAsync(UNKNOWN_BASE_TYPE, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a tuner host. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New tuner host. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TunerHostInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TunerHostInfo>> AddTunerHostWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/TunerHosts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTunerHost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TunerHostInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TunerHostInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TunerHostInfo)));
        }

        /// <summary>
        /// Cancels a live tv series timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <returns></returns>
        public void CancelSeriesTimer (string timerId)
        {
             CancelSeriesTimerWithHttpInfo(timerId);
        }

        /// <summary>
        /// Cancels a live tv series timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CancelSeriesTimerWithHttpInfo (string timerId)
        {
            // verify the required parameter 'timerId' is set
            if (timerId == null)
                throw new ApiException(400, "Missing required parameter 'timerId' when calling LiveTvApi->CancelSeriesTimer");

            var localVarPath = "/LiveTv/SeriesTimers/{timerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timerId != null) localVarPathParams.Add("timerId", this.Configuration.ApiClient.ParameterToString(timerId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelSeriesTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Cancels a live tv series timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelSeriesTimerAsync (string timerId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await CancelSeriesTimerWithHttpInfoAsync(timerId, cancellationToken);

        }

        /// <summary>
        /// Cancels a live tv series timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelSeriesTimerWithHttpInfoAsync (string timerId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'timerId' is set
            if (timerId == null)
                throw new ApiException(400, "Missing required parameter 'timerId' when calling LiveTvApi->CancelSeriesTimer");

            var localVarPath = "/LiveTv/SeriesTimers/{timerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timerId != null) localVarPathParams.Add("timerId", this.Configuration.ApiClient.ParameterToString(timerId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelSeriesTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Cancels a live tv timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <returns></returns>
        public void CancelTimer (string timerId)
        {
             CancelTimerWithHttpInfo(timerId);
        }

        /// <summary>
        /// Cancels a live tv timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CancelTimerWithHttpInfo (string timerId)
        {
            // verify the required parameter 'timerId' is set
            if (timerId == null)
                throw new ApiException(400, "Missing required parameter 'timerId' when calling LiveTvApi->CancelTimer");

            var localVarPath = "/LiveTv/Timers/{timerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timerId != null) localVarPathParams.Add("timerId", this.Configuration.ApiClient.ParameterToString(timerId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Cancels a live tv timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelTimerAsync (string timerId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await CancelTimerWithHttpInfoAsync(timerId, cancellationToken);

        }

        /// <summary>
        /// Cancels a live tv timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelTimerWithHttpInfoAsync (string timerId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'timerId' is set
            if (timerId == null)
                throw new ApiException(400, "Missing required parameter 'timerId' when calling LiveTvApi->CancelTimer");

            var localVarPath = "/LiveTv/Timers/{timerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timerId != null) localVarPathParams.Add("timerId", this.Configuration.ApiClient.ParameterToString(timerId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Creates a live tv series timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New series timer info. (optional)</param>
        /// <returns></returns>
        public void CreateSeriesTimer (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
             CreateSeriesTimerWithHttpInfo(UNKNOWN_BASE_TYPE);
        }

        /// <summary>
        /// Creates a live tv series timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New series timer info. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateSeriesTimerWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {

            var localVarPath = "/LiveTv/SeriesTimers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSeriesTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Creates a live tv series timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New series timer info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateSeriesTimerAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {
             await CreateSeriesTimerWithHttpInfoAsync(UNKNOWN_BASE_TYPE, cancellationToken);

        }

        /// <summary>
        /// Creates a live tv series timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New series timer info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateSeriesTimerWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/SeriesTimers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSeriesTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Creates a live tv timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New timer info. (optional)</param>
        /// <returns></returns>
        public void CreateTimer (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
             CreateTimerWithHttpInfo(UNKNOWN_BASE_TYPE);
        }

        /// <summary>
        /// Creates a live tv timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New timer info. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateTimerWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {

            var localVarPath = "/LiveTv/Timers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Creates a live tv timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New timer info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateTimerAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {
             await CreateTimerWithHttpInfoAsync(UNKNOWN_BASE_TYPE, cancellationToken);

        }

        /// <summary>
        /// Creates a live tv timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">New timer info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateTimerWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/Timers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete listing provider. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing provider id. (optional)</param>
        /// <returns></returns>
        public void DeleteListingProvider (string id = default(string))
        {
             DeleteListingProviderWithHttpInfo(id);
        }

        /// <summary>
        /// Delete listing provider. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing provider id. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteListingProviderWithHttpInfo (string id = default(string))
        {

            var localVarPath = "/LiveTv/ListingProviders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteListingProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete listing provider. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing provider id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteListingProviderAsync (string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteListingProviderWithHttpInfoAsync(id, cancellationToken);

        }

        /// <summary>
        /// Delete listing provider. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Listing provider id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListingProviderWithHttpInfoAsync (string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/ListingProviders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteListingProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a live tv recording. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <returns></returns>
        public void DeleteRecording (Guid recordingId)
        {
             DeleteRecordingWithHttpInfo(recordingId);
        }

        /// <summary>
        /// Deletes a live tv recording. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRecordingWithHttpInfo (Guid recordingId)
        {
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling LiveTvApi->DeleteRecording");

            var localVarPath = "/LiveTv/Recordings/{recordingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a live tv recording. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRecordingAsync (Guid recordingId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteRecordingWithHttpInfoAsync(recordingId, cancellationToken);

        }

        /// <summary>
        /// Deletes a live tv recording. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRecordingWithHttpInfoAsync (Guid recordingId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling LiveTvApi->DeleteRecording");

            var localVarPath = "/LiveTv/Recordings/{recordingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a tuner host. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Tuner host id. (optional)</param>
        /// <returns></returns>
        public void DeleteTunerHost (string id = default(string))
        {
             DeleteTunerHostWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes a tuner host. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Tuner host id. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTunerHostWithHttpInfo (string id = default(string))
        {

            var localVarPath = "/LiveTv/TunerHosts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTunerHost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a tuner host. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Tuner host id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTunerHostAsync (string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteTunerHostWithHttpInfoAsync(id, cancellationToken);

        }

        /// <summary>
        /// Deletes a tuner host. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Tuner host id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTunerHostWithHttpInfoAsync (string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/TunerHosts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTunerHost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Discover tuners. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDevicesOnly">Only discover new tuners. (optional, default to false)</param>
        /// <returns>List&lt;TunerHostInfo&gt;</returns>
        public List<TunerHostInfo> DiscoverTuners (bool? newDevicesOnly = default(bool?))
        {
             ApiResponse<List<TunerHostInfo>> localVarResponse = DiscoverTunersWithHttpInfo(newDevicesOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Discover tuners. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDevicesOnly">Only discover new tuners. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;TunerHostInfo&gt;</returns>
        public ApiResponse<List<TunerHostInfo>> DiscoverTunersWithHttpInfo (bool? newDevicesOnly = default(bool?))
        {

            var localVarPath = "/LiveTv/Tuners/Discover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (newDevicesOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newDevicesOnly", newDevicesOnly)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DiscoverTuners", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TunerHostInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TunerHostInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TunerHostInfo>)));
        }

        /// <summary>
        /// Discover tuners. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDevicesOnly">Only discover new tuners. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TunerHostInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<TunerHostInfo>> DiscoverTunersAsync (bool? newDevicesOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<TunerHostInfo>> localVarResponse = await DiscoverTunersWithHttpInfoAsync(newDevicesOnly, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Discover tuners. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDevicesOnly">Only discover new tuners. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TunerHostInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TunerHostInfo>>> DiscoverTunersWithHttpInfoAsync (bool? newDevicesOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/Tuners/Discover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (newDevicesOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newDevicesOnly", newDevicesOnly)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DiscoverTuners", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TunerHostInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TunerHostInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TunerHostInfo>)));
        }

        /// <summary>
        /// Discover tuners. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDevicesOnly">Only discover new tuners. (optional, default to false)</param>
        /// <returns>List&lt;TunerHostInfo&gt;</returns>
        public List<TunerHostInfo> DiscvoverTuners (bool? newDevicesOnly = default(bool?))
        {
             ApiResponse<List<TunerHostInfo>> localVarResponse = DiscvoverTunersWithHttpInfo(newDevicesOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Discover tuners. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDevicesOnly">Only discover new tuners. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;TunerHostInfo&gt;</returns>
        public ApiResponse<List<TunerHostInfo>> DiscvoverTunersWithHttpInfo (bool? newDevicesOnly = default(bool?))
        {

            var localVarPath = "/LiveTv/Tuners/Discvover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (newDevicesOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newDevicesOnly", newDevicesOnly)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DiscvoverTuners", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TunerHostInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TunerHostInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TunerHostInfo>)));
        }

        /// <summary>
        /// Discover tuners. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDevicesOnly">Only discover new tuners. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TunerHostInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<TunerHostInfo>> DiscvoverTunersAsync (bool? newDevicesOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<TunerHostInfo>> localVarResponse = await DiscvoverTunersWithHttpInfoAsync(newDevicesOnly, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Discover tuners. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newDevicesOnly">Only discover new tuners. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TunerHostInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TunerHostInfo>>> DiscvoverTunersWithHttpInfoAsync (bool? newDevicesOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/Tuners/Discvover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (newDevicesOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newDevicesOnly", newDevicesOnly)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DiscvoverTuners", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TunerHostInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TunerHostInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TunerHostInfo>)));
        }

        /// <summary>
        /// Gets a live tv channel. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <returns>BaseItemDto</returns>
        public BaseItemDto GetChannel (Guid channelId, Guid? userId = default(Guid?))
        {
             ApiResponse<BaseItemDto> localVarResponse = GetChannelWithHttpInfo(channelId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a live tv channel. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <returns>ApiResponse of BaseItemDto</returns>
        public ApiResponse<BaseItemDto> GetChannelWithHttpInfo (Guid channelId, Guid? userId = default(Guid?))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling LiveTvApi->GetChannel");

            var localVarPath = "/LiveTv/Channels/{channelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelId != null) localVarPathParams.Add("channelId", this.Configuration.ApiClient.ParameterToString(channelId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDto)));
        }

        /// <summary>
        /// Gets a live tv channel. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDto</returns>
        public async System.Threading.Tasks.Task<BaseItemDto> GetChannelAsync (Guid channelId, Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDto> localVarResponse = await GetChannelWithHttpInfoAsync(channelId, userId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a live tv channel. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDto>> GetChannelWithHttpInfoAsync (Guid channelId, Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling LiveTvApi->GetChannel");

            var localVarPath = "/LiveTv/Channels/{channelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelId != null) localVarPathParams.Add("channelId", this.Configuration.ApiClient.ParameterToString(channelId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDto)));
        }

        /// <summary>
        /// Get channel mapping options. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider id. (optional)</param>
        /// <returns>ChannelMappingOptionsDto</returns>
        public ChannelMappingOptionsDto GetChannelMappingOptions (string providerId = default(string))
        {
             ApiResponse<ChannelMappingOptionsDto> localVarResponse = GetChannelMappingOptionsWithHttpInfo(providerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get channel mapping options. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider id. (optional)</param>
        /// <returns>ApiResponse of ChannelMappingOptionsDto</returns>
        public ApiResponse<ChannelMappingOptionsDto> GetChannelMappingOptionsWithHttpInfo (string providerId = default(string))
        {

            var localVarPath = "/LiveTv/ChannelMappingOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerId", providerId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChannelMappingOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelMappingOptionsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ChannelMappingOptionsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelMappingOptionsDto)));
        }

        /// <summary>
        /// Get channel mapping options. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ChannelMappingOptionsDto</returns>
        public async System.Threading.Tasks.Task<ChannelMappingOptionsDto> GetChannelMappingOptionsAsync (string providerId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ChannelMappingOptionsDto> localVarResponse = await GetChannelMappingOptionsWithHttpInfoAsync(providerId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get channel mapping options. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId">Provider id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ChannelMappingOptionsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChannelMappingOptionsDto>> GetChannelMappingOptionsWithHttpInfoAsync (string providerId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/ChannelMappingOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerId", providerId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChannelMappingOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelMappingOptionsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ChannelMappingOptionsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelMappingOptionsDto)));
        }

        /// <summary>
        /// Gets default listings provider info. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListingsProviderInfo</returns>
        public ListingsProviderInfo GetDefaultListingProvider ()
        {
             ApiResponse<ListingsProviderInfo> localVarResponse = GetDefaultListingProviderWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets default listings provider info. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListingsProviderInfo</returns>
        public ApiResponse<ListingsProviderInfo> GetDefaultListingProviderWithHttpInfo ()
        {

            var localVarPath = "/LiveTv/ListingProviders/Default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDefaultListingProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingsProviderInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListingsProviderInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingsProviderInfo)));
        }

        /// <summary>
        /// Gets default listings provider info. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListingsProviderInfo</returns>
        public async System.Threading.Tasks.Task<ListingsProviderInfo> GetDefaultListingProviderAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ListingsProviderInfo> localVarResponse = await GetDefaultListingProviderWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets default listings provider info. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListingsProviderInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListingsProviderInfo>> GetDefaultListingProviderWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/ListingProviders/Default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDefaultListingProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingsProviderInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListingsProviderInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingsProviderInfo)));
        }

        /// <summary>
        /// Gets the default values for a new timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Optional. To attach default values based on a program. (optional)</param>
        /// <returns>SeriesTimerInfoDto</returns>
        public SeriesTimerInfoDto GetDefaultTimer (string programId = default(string))
        {
             ApiResponse<SeriesTimerInfoDto> localVarResponse = GetDefaultTimerWithHttpInfo(programId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the default values for a new timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Optional. To attach default values based on a program. (optional)</param>
        /// <returns>ApiResponse of SeriesTimerInfoDto</returns>
        public ApiResponse<SeriesTimerInfoDto> GetDefaultTimerWithHttpInfo (string programId = default(string))
        {

            var localVarPath = "/LiveTv/Timers/Defaults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "programId", programId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDefaultTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SeriesTimerInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SeriesTimerInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SeriesTimerInfoDto)));
        }

        /// <summary>
        /// Gets the default values for a new timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Optional. To attach default values based on a program. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SeriesTimerInfoDto</returns>
        public async System.Threading.Tasks.Task<SeriesTimerInfoDto> GetDefaultTimerAsync (string programId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SeriesTimerInfoDto> localVarResponse = await GetDefaultTimerWithHttpInfoAsync(programId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the default values for a new timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Optional. To attach default values based on a program. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SeriesTimerInfoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SeriesTimerInfoDto>> GetDefaultTimerWithHttpInfoAsync (string programId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/Timers/Defaults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "programId", programId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDefaultTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SeriesTimerInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SeriesTimerInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SeriesTimerInfoDto)));
        }

        /// <summary>
        /// Get guid info. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GuideInfo</returns>
        public GuideInfo GetGuideInfo ()
        {
             ApiResponse<GuideInfo> localVarResponse = GetGuideInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get guid info. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GuideInfo</returns>
        public ApiResponse<GuideInfo> GetGuideInfoWithHttpInfo ()
        {

            var localVarPath = "/LiveTv/GuideInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGuideInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GuideInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GuideInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GuideInfo)));
        }

        /// <summary>
        /// Get guid info. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GuideInfo</returns>
        public async System.Threading.Tasks.Task<GuideInfo> GetGuideInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GuideInfo> localVarResponse = await GetGuideInfoWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get guid info. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GuideInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GuideInfo>> GetGuideInfoWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/GuideInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGuideInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GuideInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GuideInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GuideInfo)));
        }

        /// <summary>
        /// Gets available lineups. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Provider id. (optional)</param>
        /// <param name="type">Provider type. (optional)</param>
        /// <param name="location">Location. (optional)</param>
        /// <param name="country">Country. (optional)</param>
        /// <returns>List&lt;NameIdPair&gt;</returns>
        public List<NameIdPair> GetLineups (string id = default(string), string type = default(string), string location = default(string), string country = default(string))
        {
             ApiResponse<List<NameIdPair>> localVarResponse = GetLineupsWithHttpInfo(id, type, location, country);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets available lineups. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Provider id. (optional)</param>
        /// <param name="type">Provider type. (optional)</param>
        /// <param name="location">Location. (optional)</param>
        /// <param name="country">Country. (optional)</param>
        /// <returns>ApiResponse of List&lt;NameIdPair&gt;</returns>
        public ApiResponse<List<NameIdPair>> GetLineupsWithHttpInfo (string id = default(string), string type = default(string), string location = default(string), string country = default(string))
        {

            var localVarPath = "/LiveTv/ListingProviders/Lineups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (location != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "location", location)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLineups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NameIdPair>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<NameIdPair>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NameIdPair>)));
        }

        /// <summary>
        /// Gets available lineups. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Provider id. (optional)</param>
        /// <param name="type">Provider type. (optional)</param>
        /// <param name="location">Location. (optional)</param>
        /// <param name="country">Country. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;NameIdPair&gt;</returns>
        public async System.Threading.Tasks.Task<List<NameIdPair>> GetLineupsAsync (string id = default(string), string type = default(string), string location = default(string), string country = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<NameIdPair>> localVarResponse = await GetLineupsWithHttpInfoAsync(id, type, location, country, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets available lineups. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Provider id. (optional)</param>
        /// <param name="type">Provider type. (optional)</param>
        /// <param name="location">Location. (optional)</param>
        /// <param name="country">Country. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;NameIdPair&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NameIdPair>>> GetLineupsWithHttpInfoAsync (string id = default(string), string type = default(string), string location = default(string), string country = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/ListingProviders/Lineups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (location != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "location", location)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLineups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NameIdPair>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<NameIdPair>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NameIdPair>)));
        }

        /// <summary>
        /// Gets a live tv recording stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetLiveRecordingFile (string recordingId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetLiveRecordingFileWithHttpInfo(recordingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a live tv recording stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetLiveRecordingFileWithHttpInfo (string recordingId)
        {
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling LiveTvApi->GetLiveRecordingFile");

            var localVarPath = "/LiveTv/LiveRecordings/{recordingId}/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "video/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLiveRecordingFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets a live tv recording stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetLiveRecordingFileAsync (string recordingId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetLiveRecordingFileWithHttpInfoAsync(recordingId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a live tv recording stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetLiveRecordingFileWithHttpInfoAsync (string recordingId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling LiveTvApi->GetLiveRecordingFile");

            var localVarPath = "/LiveTv/LiveRecordings/{recordingId}/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "video/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLiveRecordingFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets a live tv channel stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">Stream id.</param>
        /// <param name="container">Container type.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetLiveStreamFile (string streamId, string container)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetLiveStreamFileWithHttpInfo(streamId, container);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a live tv channel stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">Stream id.</param>
        /// <param name="container">Container type.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetLiveStreamFileWithHttpInfo (string streamId, string container)
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling LiveTvApi->GetLiveStreamFile");
            // verify the required parameter 'container' is set
            if (container == null)
                throw new ApiException(400, "Missing required parameter 'container' when calling LiveTvApi->GetLiveStreamFile");

            var localVarPath = "/LiveTv/LiveStreamFiles/{streamId}/stream.{container}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "video/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (container != null) localVarPathParams.Add("container", this.Configuration.ApiClient.ParameterToString(container)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLiveStreamFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets a live tv channel stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">Stream id.</param>
        /// <param name="container">Container type.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetLiveStreamFileAsync (string streamId, string container, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetLiveStreamFileWithHttpInfoAsync(streamId, container, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a live tv channel stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">Stream id.</param>
        /// <param name="container">Container type.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetLiveStreamFileWithHttpInfoAsync (string streamId, string container, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'streamId' is set
            if (streamId == null)
                throw new ApiException(400, "Missing required parameter 'streamId' when calling LiveTvApi->GetLiveStreamFile");
            // verify the required parameter 'container' is set
            if (container == null)
                throw new ApiException(400, "Missing required parameter 'container' when calling LiveTvApi->GetLiveStreamFile");

            var localVarPath = "/LiveTv/LiveStreamFiles/{streamId}/stream.{container}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "video/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (streamId != null) localVarPathParams.Add("streamId", this.Configuration.ApiClient.ParameterToString(streamId)); // path parameter
            if (container != null) localVarPathParams.Add("container", this.Configuration.ApiClient.ParameterToString(container)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLiveStreamFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets available live tv channels. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Optional. Filter by channel type. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="isFavorite">Optional. Filter by channels that are favorites, or not. (optional)</param>
        /// <param name="isLiked">Optional. Filter by channels that are liked, or not. (optional)</param>
        /// <param name="isDisliked">Optional. Filter by channels that are disliked, or not. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">\&quot;Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="sortBy">Optional. Key to sort by. (optional)</param>
        /// <param name="sortOrder">Optional. Sort order. (optional)</param>
        /// <param name="enableFavoriteSorting">Optional. Incorporate favorite and like status into channel sorting. (optional, default to false)</param>
        /// <param name="addCurrentProgram">Optional. Adds current program info to each channel. (optional, default to true)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetLiveTvChannels (ChannelType? type = default(ChannelType?), Guid? userId = default(Guid?), int? startIndex = default(int?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), int? limit = default(int?), bool? isFavorite = default(bool?), bool? isLiked = default(bool?), bool? isDisliked = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), List<string> sortBy = default(List<string>), SortOrder? sortOrder = default(SortOrder?), bool? enableFavoriteSorting = default(bool?), bool? addCurrentProgram = default(bool?))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetLiveTvChannelsWithHttpInfo(type, userId, startIndex, isMovie, isSeries, isNews, isKids, isSports, limit, isFavorite, isLiked, isDisliked, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, sortBy, sortOrder, enableFavoriteSorting, addCurrentProgram);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets available live tv channels. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Optional. Filter by channel type. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="isFavorite">Optional. Filter by channels that are favorites, or not. (optional)</param>
        /// <param name="isLiked">Optional. Filter by channels that are liked, or not. (optional)</param>
        /// <param name="isDisliked">Optional. Filter by channels that are disliked, or not. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">\&quot;Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="sortBy">Optional. Key to sort by. (optional)</param>
        /// <param name="sortOrder">Optional. Sort order. (optional)</param>
        /// <param name="enableFavoriteSorting">Optional. Incorporate favorite and like status into channel sorting. (optional, default to false)</param>
        /// <param name="addCurrentProgram">Optional. Adds current program info to each channel. (optional, default to true)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetLiveTvChannelsWithHttpInfo (ChannelType? type = default(ChannelType?), Guid? userId = default(Guid?), int? startIndex = default(int?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), int? limit = default(int?), bool? isFavorite = default(bool?), bool? isLiked = default(bool?), bool? isDisliked = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), List<string> sortBy = default(List<string>), SortOrder? sortOrder = default(SortOrder?), bool? enableFavoriteSorting = default(bool?), bool? addCurrentProgram = default(bool?))
        {

            var localVarPath = "/LiveTv/Channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isMovie", isMovie)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSeries", isSeries)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isNews", isNews)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isKids", isKids)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSports", isSports)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isFavorite", isFavorite)); // query parameter
            if (isLiked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isLiked", isLiked)); // query parameter
            if (isDisliked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isDisliked", isDisliked)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (enableFavoriteSorting != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableFavoriteSorting", enableFavoriteSorting)); // query parameter
            if (addCurrentProgram != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addCurrentProgram", addCurrentProgram)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLiveTvChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets available live tv channels. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Optional. Filter by channel type. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="isFavorite">Optional. Filter by channels that are favorites, or not. (optional)</param>
        /// <param name="isLiked">Optional. Filter by channels that are liked, or not. (optional)</param>
        /// <param name="isDisliked">Optional. Filter by channels that are disliked, or not. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">\&quot;Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="sortBy">Optional. Key to sort by. (optional)</param>
        /// <param name="sortOrder">Optional. Sort order. (optional)</param>
        /// <param name="enableFavoriteSorting">Optional. Incorporate favorite and like status into channel sorting. (optional, default to false)</param>
        /// <param name="addCurrentProgram">Optional. Adds current program info to each channel. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetLiveTvChannelsAsync (ChannelType? type = default(ChannelType?), Guid? userId = default(Guid?), int? startIndex = default(int?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), int? limit = default(int?), bool? isFavorite = default(bool?), bool? isLiked = default(bool?), bool? isDisliked = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), List<string> sortBy = default(List<string>), SortOrder? sortOrder = default(SortOrder?), bool? enableFavoriteSorting = default(bool?), bool? addCurrentProgram = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetLiveTvChannelsWithHttpInfoAsync(type, userId, startIndex, isMovie, isSeries, isNews, isKids, isSports, limit, isFavorite, isLiked, isDisliked, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, sortBy, sortOrder, enableFavoriteSorting, addCurrentProgram, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets available live tv channels. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Optional. Filter by channel type. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="isFavorite">Optional. Filter by channels that are favorites, or not. (optional)</param>
        /// <param name="isLiked">Optional. Filter by channels that are liked, or not. (optional)</param>
        /// <param name="isDisliked">Optional. Filter by channels that are disliked, or not. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">\&quot;Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="sortBy">Optional. Key to sort by. (optional)</param>
        /// <param name="sortOrder">Optional. Sort order. (optional)</param>
        /// <param name="enableFavoriteSorting">Optional. Incorporate favorite and like status into channel sorting. (optional, default to false)</param>
        /// <param name="addCurrentProgram">Optional. Adds current program info to each channel. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetLiveTvChannelsWithHttpInfoAsync (ChannelType? type = default(ChannelType?), Guid? userId = default(Guid?), int? startIndex = default(int?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), int? limit = default(int?), bool? isFavorite = default(bool?), bool? isLiked = default(bool?), bool? isDisliked = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), List<string> sortBy = default(List<string>), SortOrder? sortOrder = default(SortOrder?), bool? enableFavoriteSorting = default(bool?), bool? addCurrentProgram = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/Channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isMovie", isMovie)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSeries", isSeries)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isNews", isNews)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isKids", isKids)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSports", isSports)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isFavorite", isFavorite)); // query parameter
            if (isLiked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isLiked", isLiked)); // query parameter
            if (isDisliked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isDisliked", isDisliked)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (enableFavoriteSorting != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableFavoriteSorting", enableFavoriteSorting)); // query parameter
            if (addCurrentProgram != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addCurrentProgram", addCurrentProgram)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLiveTvChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets available live tv services. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LiveTvInfo</returns>
        public LiveTvInfo GetLiveTvInfo ()
        {
             ApiResponse<LiveTvInfo> localVarResponse = GetLiveTvInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets available live tv services. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LiveTvInfo</returns>
        public ApiResponse<LiveTvInfo> GetLiveTvInfoWithHttpInfo ()
        {

            var localVarPath = "/LiveTv/Info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLiveTvInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LiveTvInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LiveTvInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LiveTvInfo)));
        }

        /// <summary>
        /// Gets available live tv services. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LiveTvInfo</returns>
        public async System.Threading.Tasks.Task<LiveTvInfo> GetLiveTvInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<LiveTvInfo> localVarResponse = await GetLiveTvInfoWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets available live tv services. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LiveTvInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LiveTvInfo>> GetLiveTvInfoWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/Info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLiveTvInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LiveTvInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LiveTvInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LiveTvInfo)));
        }

        /// <summary>
        /// Gets available live tv epgs. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">The channels to return guide information for. (optional)</param>
        /// <param name="userId">Optional. Filter by user id. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere start date. (optional)</param>
        /// <param name="hasAired">Optional. Filter by programs that have completed airing, or not. (optional)</param>
        /// <param name="isAiring">Optional. Filter by programs that are currently airing, or not. (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere start date. (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere end date. (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere end date. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Name, StartDate. (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending. (optional)</param>
        /// <param name="genres">The genres to return guide information for. (optional)</param>
        /// <param name="genreIds">The genre ids to return guide information for. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by series timer id. (optional)</param>
        /// <param name="librarySeriesId">Optional. Filter by library series id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableTotalRecordCount">Retrieve total record count. (optional, default to true)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetLiveTvPrograms (List<Guid> channelIds = default(List<Guid>), Guid? userId = default(Guid?), DateTime? minStartDate = default(DateTime?), bool? hasAired = default(bool?), bool? isAiring = default(bool?), DateTime? maxStartDate = default(DateTime?), DateTime? minEndDate = default(DateTime?), DateTime? maxEndDate = default(DateTime?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), int? startIndex = default(int?), int? limit = default(int?), List<string> sortBy = default(List<string>), List<SortOrder> sortOrder = default(List<SortOrder>), List<string> genres = default(List<string>), List<Guid> genreIds = default(List<Guid>), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), string seriesTimerId = default(string), Guid? librarySeriesId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), bool? enableTotalRecordCount = default(bool?))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetLiveTvProgramsWithHttpInfo(channelIds, userId, minStartDate, hasAired, isAiring, maxStartDate, minEndDate, maxEndDate, isMovie, isSeries, isNews, isKids, isSports, startIndex, limit, sortBy, sortOrder, genres, genreIds, enableImages, imageTypeLimit, enableImageTypes, enableUserData, seriesTimerId, librarySeriesId, fields, enableTotalRecordCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets available live tv epgs. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">The channels to return guide information for. (optional)</param>
        /// <param name="userId">Optional. Filter by user id. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere start date. (optional)</param>
        /// <param name="hasAired">Optional. Filter by programs that have completed airing, or not. (optional)</param>
        /// <param name="isAiring">Optional. Filter by programs that are currently airing, or not. (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere start date. (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere end date. (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere end date. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Name, StartDate. (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending. (optional)</param>
        /// <param name="genres">The genres to return guide information for. (optional)</param>
        /// <param name="genreIds">The genre ids to return guide information for. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by series timer id. (optional)</param>
        /// <param name="librarySeriesId">Optional. Filter by library series id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableTotalRecordCount">Retrieve total record count. (optional, default to true)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetLiveTvProgramsWithHttpInfo (List<Guid> channelIds = default(List<Guid>), Guid? userId = default(Guid?), DateTime? minStartDate = default(DateTime?), bool? hasAired = default(bool?), bool? isAiring = default(bool?), DateTime? maxStartDate = default(DateTime?), DateTime? minEndDate = default(DateTime?), DateTime? maxEndDate = default(DateTime?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), int? startIndex = default(int?), int? limit = default(int?), List<string> sortBy = default(List<string>), List<SortOrder> sortOrder = default(List<SortOrder>), List<string> genres = default(List<string>), List<Guid> genreIds = default(List<Guid>), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), string seriesTimerId = default(string), Guid? librarySeriesId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), bool? enableTotalRecordCount = default(bool?))
        {

            var localVarPath = "/LiveTv/Programs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "channelIds", channelIds)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (minStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minStartDate", minStartDate)); // query parameter
            if (hasAired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasAired", hasAired)); // query parameter
            if (isAiring != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isAiring", isAiring)); // query parameter
            if (maxStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxStartDate", maxStartDate)); // query parameter
            if (minEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minEndDate", minEndDate)); // query parameter
            if (maxEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxEndDate", maxEndDate)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isMovie", isMovie)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSeries", isSeries)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isNews", isNews)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isKids", isKids)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSports", isSports)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortOrder", sortOrder)); // query parameter
            if (genres != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "genres", genres)); // query parameter
            if (genreIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "genreIds", genreIds)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (seriesTimerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seriesTimerId", seriesTimerId)); // query parameter
            if (librarySeriesId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "librarySeriesId", librarySeriesId)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableTotalRecordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableTotalRecordCount", enableTotalRecordCount)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLiveTvPrograms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets available live tv epgs. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">The channels to return guide information for. (optional)</param>
        /// <param name="userId">Optional. Filter by user id. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere start date. (optional)</param>
        /// <param name="hasAired">Optional. Filter by programs that have completed airing, or not. (optional)</param>
        /// <param name="isAiring">Optional. Filter by programs that are currently airing, or not. (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere start date. (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere end date. (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere end date. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Name, StartDate. (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending. (optional)</param>
        /// <param name="genres">The genres to return guide information for. (optional)</param>
        /// <param name="genreIds">The genre ids to return guide information for. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by series timer id. (optional)</param>
        /// <param name="librarySeriesId">Optional. Filter by library series id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableTotalRecordCount">Retrieve total record count. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetLiveTvProgramsAsync (List<Guid> channelIds = default(List<Guid>), Guid? userId = default(Guid?), DateTime? minStartDate = default(DateTime?), bool? hasAired = default(bool?), bool? isAiring = default(bool?), DateTime? maxStartDate = default(DateTime?), DateTime? minEndDate = default(DateTime?), DateTime? maxEndDate = default(DateTime?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), int? startIndex = default(int?), int? limit = default(int?), List<string> sortBy = default(List<string>), List<SortOrder> sortOrder = default(List<SortOrder>), List<string> genres = default(List<string>), List<Guid> genreIds = default(List<Guid>), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), string seriesTimerId = default(string), Guid? librarySeriesId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), bool? enableTotalRecordCount = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetLiveTvProgramsWithHttpInfoAsync(channelIds, userId, minStartDate, hasAired, isAiring, maxStartDate, minEndDate, maxEndDate, isMovie, isSeries, isNews, isKids, isSports, startIndex, limit, sortBy, sortOrder, genres, genreIds, enableImages, imageTypeLimit, enableImageTypes, enableUserData, seriesTimerId, librarySeriesId, fields, enableTotalRecordCount, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets available live tv epgs. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds">The channels to return guide information for. (optional)</param>
        /// <param name="userId">Optional. Filter by user id. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere start date. (optional)</param>
        /// <param name="hasAired">Optional. Filter by programs that have completed airing, or not. (optional)</param>
        /// <param name="isAiring">Optional. Filter by programs that are currently airing, or not. (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere start date. (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere end date. (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere end date. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Name, StartDate. (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending. (optional)</param>
        /// <param name="genres">The genres to return guide information for. (optional)</param>
        /// <param name="genreIds">The genre ids to return guide information for. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by series timer id. (optional)</param>
        /// <param name="librarySeriesId">Optional. Filter by library series id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableTotalRecordCount">Retrieve total record count. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetLiveTvProgramsWithHttpInfoAsync (List<Guid> channelIds = default(List<Guid>), Guid? userId = default(Guid?), DateTime? minStartDate = default(DateTime?), bool? hasAired = default(bool?), bool? isAiring = default(bool?), DateTime? maxStartDate = default(DateTime?), DateTime? minEndDate = default(DateTime?), DateTime? maxEndDate = default(DateTime?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), int? startIndex = default(int?), int? limit = default(int?), List<string> sortBy = default(List<string>), List<SortOrder> sortOrder = default(List<SortOrder>), List<string> genres = default(List<string>), List<Guid> genreIds = default(List<Guid>), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), string seriesTimerId = default(string), Guid? librarySeriesId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), bool? enableTotalRecordCount = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/Programs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "channelIds", channelIds)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (minStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minStartDate", minStartDate)); // query parameter
            if (hasAired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasAired", hasAired)); // query parameter
            if (isAiring != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isAiring", isAiring)); // query parameter
            if (maxStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxStartDate", maxStartDate)); // query parameter
            if (minEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minEndDate", minEndDate)); // query parameter
            if (maxEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxEndDate", maxEndDate)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isMovie", isMovie)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSeries", isSeries)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isNews", isNews)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isKids", isKids)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSports", isSports)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortOrder", sortOrder)); // query parameter
            if (genres != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "genres", genres)); // query parameter
            if (genreIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "genreIds", genreIds)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (seriesTimerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seriesTimerId", seriesTimerId)); // query parameter
            if (librarySeriesId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "librarySeriesId", librarySeriesId)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableTotalRecordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableTotalRecordCount", enableTotalRecordCount)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLiveTvPrograms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets a live tv program. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Program id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <returns>BaseItemDto</returns>
        public BaseItemDto GetProgram (string programId, Guid? userId = default(Guid?))
        {
             ApiResponse<BaseItemDto> localVarResponse = GetProgramWithHttpInfo(programId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a live tv program. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Program id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <returns>ApiResponse of BaseItemDto</returns>
        public ApiResponse<BaseItemDto> GetProgramWithHttpInfo (string programId, Guid? userId = default(Guid?))
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling LiveTvApi->GetProgram");

            var localVarPath = "/LiveTv/Programs/{programId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProgram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDto)));
        }

        /// <summary>
        /// Gets a live tv program. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Program id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDto</returns>
        public async System.Threading.Tasks.Task<BaseItemDto> GetProgramAsync (string programId, Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDto> localVarResponse = await GetProgramWithHttpInfoAsync(programId, userId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a live tv program. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Program id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDto>> GetProgramWithHttpInfoAsync (string programId, Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling LiveTvApi->GetProgram");

            var localVarPath = "/LiveTv/Programs/{programId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProgram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDto)));
        }

        /// <summary>
        /// Gets available live tv epgs. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">Request body. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetPrograms (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetProgramsWithHttpInfo(UNKNOWN_BASE_TYPE);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets available live tv epgs. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">Request body. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetProgramsWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {

            var localVarPath = "/LiveTv/Programs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrograms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets available live tv epgs. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">Request body. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetProgramsAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetProgramsWithHttpInfoAsync(UNKNOWN_BASE_TYPE, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets available live tv epgs. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">Request body. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetProgramsWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/Programs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrograms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets recommended live tv epgs. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. filter by user id. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="isAiring">Optional. Filter by programs that are currently airing, or not. (optional)</param>
        /// <param name="hasAired">Optional. Filter by programs that have completed airing, or not. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="genreIds">The genres to return guide information for. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Retrieve total record count. (optional, default to true)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetRecommendedPrograms (Guid? userId = default(Guid?), int? limit = default(int?), bool? isAiring = default(bool?), bool? hasAired = default(bool?), bool? isSeries = default(bool?), bool? isMovie = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<Guid> genreIds = default(List<Guid>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetRecommendedProgramsWithHttpInfo(userId, limit, isAiring, hasAired, isSeries, isMovie, isNews, isKids, isSports, enableImages, imageTypeLimit, enableImageTypes, genreIds, fields, enableUserData, enableTotalRecordCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets recommended live tv epgs. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. filter by user id. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="isAiring">Optional. Filter by programs that are currently airing, or not. (optional)</param>
        /// <param name="hasAired">Optional. Filter by programs that have completed airing, or not. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="genreIds">The genres to return guide information for. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Retrieve total record count. (optional, default to true)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetRecommendedProgramsWithHttpInfo (Guid? userId = default(Guid?), int? limit = default(int?), bool? isAiring = default(bool?), bool? hasAired = default(bool?), bool? isSeries = default(bool?), bool? isMovie = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<Guid> genreIds = default(List<Guid>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?))
        {

            var localVarPath = "/LiveTv/Programs/Recommended";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (isAiring != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isAiring", isAiring)); // query parameter
            if (hasAired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasAired", hasAired)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSeries", isSeries)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isMovie", isMovie)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isNews", isNews)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isKids", isKids)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSports", isSports)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter
            if (genreIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "genreIds", genreIds)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (enableTotalRecordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableTotalRecordCount", enableTotalRecordCount)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecommendedPrograms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets recommended live tv epgs. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. filter by user id. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="isAiring">Optional. Filter by programs that are currently airing, or not. (optional)</param>
        /// <param name="hasAired">Optional. Filter by programs that have completed airing, or not. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="genreIds">The genres to return guide information for. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Retrieve total record count. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetRecommendedProgramsAsync (Guid? userId = default(Guid?), int? limit = default(int?), bool? isAiring = default(bool?), bool? hasAired = default(bool?), bool? isSeries = default(bool?), bool? isMovie = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<Guid> genreIds = default(List<Guid>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetRecommendedProgramsWithHttpInfoAsync(userId, limit, isAiring, hasAired, isSeries, isMovie, isNews, isKids, isSports, enableImages, imageTypeLimit, enableImageTypes, genreIds, fields, enableUserData, enableTotalRecordCount, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets recommended live tv epgs. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. filter by user id. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="isAiring">Optional. Filter by programs that are currently airing, or not. (optional)</param>
        /// <param name="hasAired">Optional. Filter by programs that have completed airing, or not. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="genreIds">The genres to return guide information for. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Retrieve total record count. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetRecommendedProgramsWithHttpInfoAsync (Guid? userId = default(Guid?), int? limit = default(int?), bool? isAiring = default(bool?), bool? hasAired = default(bool?), bool? isSeries = default(bool?), bool? isMovie = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<Guid> genreIds = default(List<Guid>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/Programs/Recommended";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (isAiring != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isAiring", isAiring)); // query parameter
            if (hasAired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasAired", hasAired)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSeries", isSeries)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isMovie", isMovie)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isNews", isNews)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isKids", isKids)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSports", isSports)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter
            if (genreIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "genreIds", genreIds)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (enableTotalRecordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableTotalRecordCount", enableTotalRecordCount)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecommendedPrograms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets a live tv recording. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <returns>BaseItemDto</returns>
        public BaseItemDto GetRecording (Guid recordingId, Guid? userId = default(Guid?))
        {
             ApiResponse<BaseItemDto> localVarResponse = GetRecordingWithHttpInfo(recordingId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a live tv recording. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <returns>ApiResponse of BaseItemDto</returns>
        public ApiResponse<BaseItemDto> GetRecordingWithHttpInfo (Guid recordingId, Guid? userId = default(Guid?))
        {
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling LiveTvApi->GetRecording");

            var localVarPath = "/LiveTv/Recordings/{recordingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDto)));
        }

        /// <summary>
        /// Gets a live tv recording. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDto</returns>
        public async System.Threading.Tasks.Task<BaseItemDto> GetRecordingAsync (Guid recordingId, Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDto> localVarResponse = await GetRecordingWithHttpInfoAsync(recordingId, userId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a live tv recording. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">Recording id.</param>
        /// <param name="userId">Optional. Attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDto>> GetRecordingWithHttpInfoAsync (Guid recordingId, Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling LiveTvApi->GetRecording");

            var localVarPath = "/LiveTv/Recordings/{recordingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDto)));
        }

        /// <summary>
        /// Gets recording folders. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetRecordingFolders (Guid? userId = default(Guid?))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetRecordingFoldersWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets recording folders. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetRecordingFoldersWithHttpInfo (Guid? userId = default(Guid?))
        {

            var localVarPath = "/LiveTv/Recordings/Folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecordingFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets recording folders. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetRecordingFoldersAsync (Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetRecordingFoldersWithHttpInfoAsync(userId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets recording folders. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetRecordingFoldersWithHttpInfoAsync (Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/Recordings/Folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecordingFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Get recording group. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group id.</param>
        /// <returns></returns>
        public void GetRecordingGroup (Guid groupId)
        {
             GetRecordingGroupWithHttpInfo(groupId);
        }

        /// <summary>
        /// Get recording group. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetRecordingGroupWithHttpInfo (Guid groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling LiveTvApi->GetRecordingGroup");

            var localVarPath = "/LiveTv/Recordings/Groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecordingGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get recording group. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetRecordingGroupAsync (Guid groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await GetRecordingGroupWithHttpInfoAsync(groupId, cancellationToken);

        }

        /// <summary>
        /// Get recording group. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetRecordingGroupWithHttpInfoAsync (Guid groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling LiveTvApi->GetRecordingGroup");

            var localVarPath = "/LiveTv/Recordings/Groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecordingGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets live tv recording groups. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetRecordingGroups (Guid? userId = default(Guid?))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetRecordingGroupsWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets live tv recording groups. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetRecordingGroupsWithHttpInfo (Guid? userId = default(Guid?))
        {

            var localVarPath = "/LiveTv/Recordings/Groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecordingGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets live tv recording groups. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetRecordingGroupsAsync (Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetRecordingGroupsWithHttpInfoAsync(userId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets live tv recording groups. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetRecordingGroupsWithHttpInfoAsync (Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/Recordings/Groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecordingGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets live tv recordings. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="status">Optional. Filter by recording status. (optional)</param>
        /// <param name="isInProgress">Optional. Filter by recordings that are in progress, or not. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by recordings belonging to a series timer. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isLibraryItem">Optional. Filter for is library item. (optional)</param>
        /// <param name="enableTotalRecordCount">Optional. Return total record count. (optional, default to true)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetRecordings (string channelId = default(string), Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), RecordingStatus? status = default(RecordingStatus?), bool? isInProgress = default(bool?), string seriesTimerId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? isNews = default(bool?), bool? isLibraryItem = default(bool?), bool? enableTotalRecordCount = default(bool?))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetRecordingsWithHttpInfo(channelId, userId, startIndex, limit, status, isInProgress, seriesTimerId, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, isMovie, isSeries, isKids, isSports, isNews, isLibraryItem, enableTotalRecordCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets live tv recordings. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="status">Optional. Filter by recording status. (optional)</param>
        /// <param name="isInProgress">Optional. Filter by recordings that are in progress, or not. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by recordings belonging to a series timer. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isLibraryItem">Optional. Filter for is library item. (optional)</param>
        /// <param name="enableTotalRecordCount">Optional. Return total record count. (optional, default to true)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetRecordingsWithHttpInfo (string channelId = default(string), Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), RecordingStatus? status = default(RecordingStatus?), bool? isInProgress = default(bool?), string seriesTimerId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? isNews = default(bool?), bool? isLibraryItem = default(bool?), bool? enableTotalRecordCount = default(bool?))
        {

            var localVarPath = "/LiveTv/Recordings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channelId", channelId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (isInProgress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isInProgress", isInProgress)); // query parameter
            if (seriesTimerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seriesTimerId", seriesTimerId)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isMovie", isMovie)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSeries", isSeries)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isKids", isKids)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSports", isSports)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isNews", isNews)); // query parameter
            if (isLibraryItem != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isLibraryItem", isLibraryItem)); // query parameter
            if (enableTotalRecordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableTotalRecordCount", enableTotalRecordCount)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecordings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets live tv recordings. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="status">Optional. Filter by recording status. (optional)</param>
        /// <param name="isInProgress">Optional. Filter by recordings that are in progress, or not. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by recordings belonging to a series timer. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isLibraryItem">Optional. Filter for is library item. (optional)</param>
        /// <param name="enableTotalRecordCount">Optional. Return total record count. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetRecordingsAsync (string channelId = default(string), Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), RecordingStatus? status = default(RecordingStatus?), bool? isInProgress = default(bool?), string seriesTimerId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? isNews = default(bool?), bool? isLibraryItem = default(bool?), bool? enableTotalRecordCount = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetRecordingsWithHttpInfoAsync(channelId, userId, startIndex, limit, status, isInProgress, seriesTimerId, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, isMovie, isSeries, isKids, isSports, isNews, isLibraryItem, enableTotalRecordCount, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets live tv recordings. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="status">Optional. Filter by recording status. (optional)</param>
        /// <param name="isInProgress">Optional. Filter by recordings that are in progress, or not. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by recordings belonging to a series timer. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="isMovie">Optional. Filter for movies. (optional)</param>
        /// <param name="isSeries">Optional. Filter for series. (optional)</param>
        /// <param name="isKids">Optional. Filter for kids. (optional)</param>
        /// <param name="isSports">Optional. Filter for sports. (optional)</param>
        /// <param name="isNews">Optional. Filter for news. (optional)</param>
        /// <param name="isLibraryItem">Optional. Filter for is library item. (optional)</param>
        /// <param name="enableTotalRecordCount">Optional. Return total record count. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetRecordingsWithHttpInfoAsync (string channelId = default(string), Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), RecordingStatus? status = default(RecordingStatus?), bool? isInProgress = default(bool?), string seriesTimerId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? isNews = default(bool?), bool? isLibraryItem = default(bool?), bool? enableTotalRecordCount = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/Recordings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channelId", channelId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (isInProgress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isInProgress", isInProgress)); // query parameter
            if (seriesTimerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seriesTimerId", seriesTimerId)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isMovie", isMovie)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSeries", isSeries)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isKids", isKids)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSports", isSports)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isNews", isNews)); // query parameter
            if (isLibraryItem != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isLibraryItem", isLibraryItem)); // query parameter
            if (enableTotalRecordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableTotalRecordCount", enableTotalRecordCount)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecordings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets live tv recording series. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="groupId">Optional. Filter by recording group. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="status">Optional. Filter by recording status. (optional)</param>
        /// <param name="isInProgress">Optional. Filter by recordings that are in progress, or not. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by recordings belonging to a series timer. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Optional. Return total record count. (optional, default to true)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetRecordingsSeries (string channelId = default(string), Guid? userId = default(Guid?), string groupId = default(string), int? startIndex = default(int?), int? limit = default(int?), RecordingStatus? status = default(RecordingStatus?), bool? isInProgress = default(bool?), string seriesTimerId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetRecordingsSeriesWithHttpInfo(channelId, userId, groupId, startIndex, limit, status, isInProgress, seriesTimerId, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, enableTotalRecordCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets live tv recording series. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="groupId">Optional. Filter by recording group. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="status">Optional. Filter by recording status. (optional)</param>
        /// <param name="isInProgress">Optional. Filter by recordings that are in progress, or not. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by recordings belonging to a series timer. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Optional. Return total record count. (optional, default to true)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetRecordingsSeriesWithHttpInfo (string channelId = default(string), Guid? userId = default(Guid?), string groupId = default(string), int? startIndex = default(int?), int? limit = default(int?), RecordingStatus? status = default(RecordingStatus?), bool? isInProgress = default(bool?), string seriesTimerId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?))
        {

            var localVarPath = "/LiveTv/Recordings/Series";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channelId", channelId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (groupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupId", groupId)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (isInProgress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isInProgress", isInProgress)); // query parameter
            if (seriesTimerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seriesTimerId", seriesTimerId)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (enableTotalRecordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableTotalRecordCount", enableTotalRecordCount)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecordingsSeries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets live tv recording series. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="groupId">Optional. Filter by recording group. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="status">Optional. Filter by recording status. (optional)</param>
        /// <param name="isInProgress">Optional. Filter by recordings that are in progress, or not. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by recordings belonging to a series timer. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Optional. Return total record count. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetRecordingsSeriesAsync (string channelId = default(string), Guid? userId = default(Guid?), string groupId = default(string), int? startIndex = default(int?), int? limit = default(int?), RecordingStatus? status = default(RecordingStatus?), bool? isInProgress = default(bool?), string seriesTimerId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetRecordingsSeriesWithHttpInfoAsync(channelId, userId, groupId, startIndex, limit, status, isInProgress, seriesTimerId, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, enableTotalRecordCount, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets live tv recording series. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="userId">Optional. Filter by user and attach user data. (optional)</param>
        /// <param name="groupId">Optional. Filter by recording group. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="status">Optional. Filter by recording status. (optional)</param>
        /// <param name="isInProgress">Optional. Filter by recordings that are in progress, or not. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by recordings belonging to a series timer. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Optional. Return total record count. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetRecordingsSeriesWithHttpInfoAsync (string channelId = default(string), Guid? userId = default(Guid?), string groupId = default(string), int? startIndex = default(int?), int? limit = default(int?), RecordingStatus? status = default(RecordingStatus?), bool? isInProgress = default(bool?), string seriesTimerId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), List<ItemFields> fields = default(List<ItemFields>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/Recordings/Series";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channelId", channelId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (groupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupId", groupId)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (isInProgress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isInProgress", isInProgress)); // query parameter
            if (seriesTimerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seriesTimerId", seriesTimerId)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (enableTotalRecordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableTotalRecordCount", enableTotalRecordCount)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecordingsSeries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets available countries. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetSchedulesDirectCountries ()
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetSchedulesDirectCountriesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets available countries. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetSchedulesDirectCountriesWithHttpInfo ()
        {

            var localVarPath = "/LiveTv/ListingProviders/SchedulesDirect/Countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchedulesDirectCountries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets available countries. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetSchedulesDirectCountriesAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetSchedulesDirectCountriesWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets available countries. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetSchedulesDirectCountriesWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/ListingProviders/SchedulesDirect/Countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchedulesDirectCountries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets a live tv series timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <returns>SeriesTimerInfoDto</returns>
        public SeriesTimerInfoDto GetSeriesTimer (string timerId)
        {
             ApiResponse<SeriesTimerInfoDto> localVarResponse = GetSeriesTimerWithHttpInfo(timerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a live tv series timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <returns>ApiResponse of SeriesTimerInfoDto</returns>
        public ApiResponse<SeriesTimerInfoDto> GetSeriesTimerWithHttpInfo (string timerId)
        {
            // verify the required parameter 'timerId' is set
            if (timerId == null)
                throw new ApiException(400, "Missing required parameter 'timerId' when calling LiveTvApi->GetSeriesTimer");

            var localVarPath = "/LiveTv/SeriesTimers/{timerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timerId != null) localVarPathParams.Add("timerId", this.Configuration.ApiClient.ParameterToString(timerId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSeriesTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SeriesTimerInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SeriesTimerInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SeriesTimerInfoDto)));
        }

        /// <summary>
        /// Gets a live tv series timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SeriesTimerInfoDto</returns>
        public async System.Threading.Tasks.Task<SeriesTimerInfoDto> GetSeriesTimerAsync (string timerId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SeriesTimerInfoDto> localVarResponse = await GetSeriesTimerWithHttpInfoAsync(timerId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a live tv series timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SeriesTimerInfoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SeriesTimerInfoDto>> GetSeriesTimerWithHttpInfoAsync (string timerId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'timerId' is set
            if (timerId == null)
                throw new ApiException(400, "Missing required parameter 'timerId' when calling LiveTvApi->GetSeriesTimer");

            var localVarPath = "/LiveTv/SeriesTimers/{timerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timerId != null) localVarPathParams.Add("timerId", this.Configuration.ApiClient.ParameterToString(timerId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSeriesTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SeriesTimerInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SeriesTimerInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SeriesTimerInfoDto)));
        }

        /// <summary>
        /// Gets live tv series timers. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Sort by SortName or Priority. (optional)</param>
        /// <param name="sortOrder">Optional. Sort in Ascending or Descending order. (optional)</param>
        /// <returns>SeriesTimerInfoDtoQueryResult</returns>
        public SeriesTimerInfoDtoQueryResult GetSeriesTimers (string sortBy = default(string), SortOrder? sortOrder = default(SortOrder?))
        {
             ApiResponse<SeriesTimerInfoDtoQueryResult> localVarResponse = GetSeriesTimersWithHttpInfo(sortBy, sortOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets live tv series timers. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Sort by SortName or Priority. (optional)</param>
        /// <param name="sortOrder">Optional. Sort in Ascending or Descending order. (optional)</param>
        /// <returns>ApiResponse of SeriesTimerInfoDtoQueryResult</returns>
        public ApiResponse<SeriesTimerInfoDtoQueryResult> GetSeriesTimersWithHttpInfo (string sortBy = default(string), SortOrder? sortOrder = default(SortOrder?))
        {

            var localVarPath = "/LiveTv/SeriesTimers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSeriesTimers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SeriesTimerInfoDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SeriesTimerInfoDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SeriesTimerInfoDtoQueryResult)));
        }

        /// <summary>
        /// Gets live tv series timers. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Sort by SortName or Priority. (optional)</param>
        /// <param name="sortOrder">Optional. Sort in Ascending or Descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SeriesTimerInfoDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<SeriesTimerInfoDtoQueryResult> GetSeriesTimersAsync (string sortBy = default(string), SortOrder? sortOrder = default(SortOrder?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SeriesTimerInfoDtoQueryResult> localVarResponse = await GetSeriesTimersWithHttpInfoAsync(sortBy, sortOrder, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets live tv series timers. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sortBy">Optional. Sort by SortName or Priority. (optional)</param>
        /// <param name="sortOrder">Optional. Sort in Ascending or Descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SeriesTimerInfoDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SeriesTimerInfoDtoQueryResult>> GetSeriesTimersWithHttpInfoAsync (string sortBy = default(string), SortOrder? sortOrder = default(SortOrder?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/SeriesTimers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSeriesTimers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SeriesTimerInfoDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SeriesTimerInfoDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SeriesTimerInfoDtoQueryResult)));
        }

        /// <summary>
        /// Gets a timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <returns>TimerInfoDto</returns>
        public TimerInfoDto GetTimer (string timerId)
        {
             ApiResponse<TimerInfoDto> localVarResponse = GetTimerWithHttpInfo(timerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <returns>ApiResponse of TimerInfoDto</returns>
        public ApiResponse<TimerInfoDto> GetTimerWithHttpInfo (string timerId)
        {
            // verify the required parameter 'timerId' is set
            if (timerId == null)
                throw new ApiException(400, "Missing required parameter 'timerId' when calling LiveTvApi->GetTimer");

            var localVarPath = "/LiveTv/Timers/{timerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timerId != null) localVarPathParams.Add("timerId", this.Configuration.ApiClient.ParameterToString(timerId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimerInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TimerInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimerInfoDto)));
        }

        /// <summary>
        /// Gets a timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TimerInfoDto</returns>
        public async System.Threading.Tasks.Task<TimerInfoDto> GetTimerAsync (string timerId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TimerInfoDto> localVarResponse = await GetTimerWithHttpInfoAsync(timerId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TimerInfoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TimerInfoDto>> GetTimerWithHttpInfoAsync (string timerId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'timerId' is set
            if (timerId == null)
                throw new ApiException(400, "Missing required parameter 'timerId' when calling LiveTvApi->GetTimer");

            var localVarPath = "/LiveTv/Timers/{timerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timerId != null) localVarPathParams.Add("timerId", this.Configuration.ApiClient.ParameterToString(timerId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimerInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TimerInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimerInfoDto)));
        }

        /// <summary>
        /// Gets the live tv timers. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by timers belonging to a series timer. (optional)</param>
        /// <param name="isActive">Optional. Filter by timers that are active. (optional)</param>
        /// <param name="isScheduled">Optional. Filter by timers that are scheduled. (optional)</param>
        /// <returns>TimerInfoDtoQueryResult</returns>
        public TimerInfoDtoQueryResult GetTimers (string channelId = default(string), string seriesTimerId = default(string), bool? isActive = default(bool?), bool? isScheduled = default(bool?))
        {
             ApiResponse<TimerInfoDtoQueryResult> localVarResponse = GetTimersWithHttpInfo(channelId, seriesTimerId, isActive, isScheduled);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the live tv timers. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by timers belonging to a series timer. (optional)</param>
        /// <param name="isActive">Optional. Filter by timers that are active. (optional)</param>
        /// <param name="isScheduled">Optional. Filter by timers that are scheduled. (optional)</param>
        /// <returns>ApiResponse of TimerInfoDtoQueryResult</returns>
        public ApiResponse<TimerInfoDtoQueryResult> GetTimersWithHttpInfo (string channelId = default(string), string seriesTimerId = default(string), bool? isActive = default(bool?), bool? isScheduled = default(bool?))
        {

            var localVarPath = "/LiveTv/Timers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channelId", channelId)); // query parameter
            if (seriesTimerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seriesTimerId", seriesTimerId)); // query parameter
            if (isActive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isActive", isActive)); // query parameter
            if (isScheduled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isScheduled", isScheduled)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimerInfoDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TimerInfoDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimerInfoDtoQueryResult)));
        }

        /// <summary>
        /// Gets the live tv timers. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by timers belonging to a series timer. (optional)</param>
        /// <param name="isActive">Optional. Filter by timers that are active. (optional)</param>
        /// <param name="isScheduled">Optional. Filter by timers that are scheduled. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TimerInfoDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<TimerInfoDtoQueryResult> GetTimersAsync (string channelId = default(string), string seriesTimerId = default(string), bool? isActive = default(bool?), bool? isScheduled = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TimerInfoDtoQueryResult> localVarResponse = await GetTimersWithHttpInfoAsync(channelId, seriesTimerId, isActive, isScheduled, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the live tv timers. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Optional. Filter by channel id. (optional)</param>
        /// <param name="seriesTimerId">Optional. Filter by timers belonging to a series timer. (optional)</param>
        /// <param name="isActive">Optional. Filter by timers that are active. (optional)</param>
        /// <param name="isScheduled">Optional. Filter by timers that are scheduled. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TimerInfoDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TimerInfoDtoQueryResult>> GetTimersWithHttpInfoAsync (string channelId = default(string), string seriesTimerId = default(string), bool? isActive = default(bool?), bool? isScheduled = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/Timers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channelId", channelId)); // query parameter
            if (seriesTimerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seriesTimerId", seriesTimerId)); // query parameter
            if (isActive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isActive", isActive)); // query parameter
            if (isScheduled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isScheduled", isScheduled)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimerInfoDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TimerInfoDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimerInfoDtoQueryResult)));
        }

        /// <summary>
        /// Get tuner host types. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;NameIdPair&gt;</returns>
        public List<NameIdPair> GetTunerHostTypes ()
        {
             ApiResponse<List<NameIdPair>> localVarResponse = GetTunerHostTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get tuner host types. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;NameIdPair&gt;</returns>
        public ApiResponse<List<NameIdPair>> GetTunerHostTypesWithHttpInfo ()
        {

            var localVarPath = "/LiveTv/TunerHosts/Types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTunerHostTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NameIdPair>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<NameIdPair>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NameIdPair>)));
        }

        /// <summary>
        /// Get tuner host types. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;NameIdPair&gt;</returns>
        public async System.Threading.Tasks.Task<List<NameIdPair>> GetTunerHostTypesAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<NameIdPair>> localVarResponse = await GetTunerHostTypesWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get tuner host types. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;NameIdPair&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NameIdPair>>> GetTunerHostTypesWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveTv/TunerHosts/Types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTunerHostTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NameIdPair>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<NameIdPair>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NameIdPair>)));
        }

        /// <summary>
        /// Resets a tv tuner. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tunerId">Tuner id.</param>
        /// <returns></returns>
        public void ResetTuner (string tunerId)
        {
             ResetTunerWithHttpInfo(tunerId);
        }

        /// <summary>
        /// Resets a tv tuner. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tunerId">Tuner id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ResetTunerWithHttpInfo (string tunerId)
        {
            // verify the required parameter 'tunerId' is set
            if (tunerId == null)
                throw new ApiException(400, "Missing required parameter 'tunerId' when calling LiveTvApi->ResetTuner");

            var localVarPath = "/LiveTv/Tuners/{tunerId}/Reset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tunerId != null) localVarPathParams.Add("tunerId", this.Configuration.ApiClient.ParameterToString(tunerId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetTuner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Resets a tv tuner. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tunerId">Tuner id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResetTunerAsync (string tunerId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ResetTunerWithHttpInfoAsync(tunerId, cancellationToken);

        }

        /// <summary>
        /// Resets a tv tuner. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tunerId">Tuner id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ResetTunerWithHttpInfoAsync (string tunerId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'tunerId' is set
            if (tunerId == null)
                throw new ApiException(400, "Missing required parameter 'tunerId' when calling LiveTvApi->ResetTuner");

            var localVarPath = "/LiveTv/Tuners/{tunerId}/Reset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tunerId != null) localVarPathParams.Add("tunerId", this.Configuration.ApiClient.ParameterToString(tunerId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetTuner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Set channel mappings. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The set channel mapping dto.</param>
        /// <returns>TunerChannelMapping</returns>
        public TunerChannelMapping SetChannelMapping (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
             ApiResponse<TunerChannelMapping> localVarResponse = SetChannelMappingWithHttpInfo(UNKNOWN_BASE_TYPE);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set channel mappings. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The set channel mapping dto.</param>
        /// <returns>ApiResponse of TunerChannelMapping</returns>
        public ApiResponse<TunerChannelMapping> SetChannelMappingWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling LiveTvApi->SetChannelMapping");

            var localVarPath = "/LiveTv/ChannelMappings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetChannelMapping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TunerChannelMapping>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TunerChannelMapping) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TunerChannelMapping)));
        }

        /// <summary>
        /// Set channel mappings. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The set channel mapping dto.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TunerChannelMapping</returns>
        public async System.Threading.Tasks.Task<TunerChannelMapping> SetChannelMappingAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TunerChannelMapping> localVarResponse = await SetChannelMappingWithHttpInfoAsync(UNKNOWN_BASE_TYPE, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set channel mappings. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The set channel mapping dto.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TunerChannelMapping)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TunerChannelMapping>> SetChannelMappingWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling LiveTvApi->SetChannelMapping");

            var localVarPath = "/LiveTv/ChannelMappings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetChannelMapping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TunerChannelMapping>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TunerChannelMapping) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TunerChannelMapping)));
        }

        /// <summary>
        /// Updates a live tv series timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">New series timer info. (optional)</param>
        /// <returns></returns>
        public void UpdateSeriesTimer (string timerId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
             UpdateSeriesTimerWithHttpInfo(timerId, UNKNOWN_BASE_TYPE);
        }

        /// <summary>
        /// Updates a live tv series timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">New series timer info. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateSeriesTimerWithHttpInfo (string timerId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
            // verify the required parameter 'timerId' is set
            if (timerId == null)
                throw new ApiException(400, "Missing required parameter 'timerId' when calling LiveTvApi->UpdateSeriesTimer");

            var localVarPath = "/LiveTv/SeriesTimers/{timerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timerId != null) localVarPathParams.Add("timerId", this.Configuration.ApiClient.ParameterToString(timerId)); // path parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSeriesTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates a live tv series timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">New series timer info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSeriesTimerAsync (string timerId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateSeriesTimerWithHttpInfoAsync(timerId, UNKNOWN_BASE_TYPE, cancellationToken);

        }

        /// <summary>
        /// Updates a live tv series timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">New series timer info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSeriesTimerWithHttpInfoAsync (string timerId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'timerId' is set
            if (timerId == null)
                throw new ApiException(400, "Missing required parameter 'timerId' when calling LiveTvApi->UpdateSeriesTimer");

            var localVarPath = "/LiveTv/SeriesTimers/{timerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timerId != null) localVarPathParams.Add("timerId", this.Configuration.ApiClient.ParameterToString(timerId)); // path parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSeriesTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates a live tv timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">New timer info. (optional)</param>
        /// <returns></returns>
        public void UpdateTimer (string timerId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
             UpdateTimerWithHttpInfo(timerId, UNKNOWN_BASE_TYPE);
        }

        /// <summary>
        /// Updates a live tv timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">New timer info. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateTimerWithHttpInfo (string timerId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
            // verify the required parameter 'timerId' is set
            if (timerId == null)
                throw new ApiException(400, "Missing required parameter 'timerId' when calling LiveTvApi->UpdateTimer");

            var localVarPath = "/LiveTv/Timers/{timerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timerId != null) localVarPathParams.Add("timerId", this.Configuration.ApiClient.ParameterToString(timerId)); // path parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates a live tv timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">New timer info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTimerAsync (string timerId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateTimerWithHttpInfoAsync(timerId, UNKNOWN_BASE_TYPE, cancellationToken);

        }

        /// <summary>
        /// Updates a live tv timer. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timerId">Timer id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">New timer info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTimerWithHttpInfoAsync (string timerId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'timerId' is set
            if (timerId == null)
                throw new ApiException(400, "Missing required parameter 'timerId' when calling LiveTvApi->UpdateTimer");

            var localVarPath = "/LiveTv/Timers/{timerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timerId != null) localVarPathParams.Add("timerId", this.Configuration.ApiClient.ParameterToString(timerId)); // path parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
