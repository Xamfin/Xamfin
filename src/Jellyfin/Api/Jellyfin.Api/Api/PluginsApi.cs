/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Jellyfin.Api.Client;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPluginsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Disable a plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <returns></returns>
        void DisablePlugin (Guid pluginId, Version version);

        /// <summary>
        /// Disable a plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DisablePluginWithHttpInfo (Guid pluginId, Version version);
        /// <summary>
        /// Enables a disabled plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <returns></returns>
        void EnablePlugin (Guid pluginId, Version version);

        /// <summary>
        /// Enables a disabled plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EnablePluginWithHttpInfo (Guid pluginId, Version version);
        /// <summary>
        /// Gets plugin configuration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <returns>Object</returns>
        Object GetPluginConfiguration (Guid pluginId);

        /// <summary>
        /// Gets plugin configuration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetPluginConfigurationWithHttpInfo (Guid pluginId);
        /// <summary>
        /// Gets a plugin&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPluginImage (Guid pluginId, Version version);

        /// <summary>
        /// Gets a plugin&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPluginImageWithHttpInfo (Guid pluginId, Version version);
        /// <summary>
        /// Gets a plugin&#39;s manifest.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <returns></returns>
        void GetPluginManifest (Guid pluginId);

        /// <summary>
        /// Gets a plugin&#39;s manifest.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPluginManifestWithHttpInfo (Guid pluginId);
        /// <summary>
        /// Gets a list of currently installed plugins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PluginInfo&gt;</returns>
        List<PluginInfo> GetPlugins ();

        /// <summary>
        /// Gets a list of currently installed plugins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PluginInfo&gt;</returns>
        ApiResponse<List<PluginInfo>> GetPluginsWithHttpInfo ();
        /// <summary>
        /// Uninstalls a plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <returns></returns>
        void UninstallPlugin (Guid pluginId);

        /// <summary>
        /// Uninstalls a plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UninstallPluginWithHttpInfo (Guid pluginId);
        /// <summary>
        /// Uninstalls a plugin by version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <returns></returns>
        void UninstallPluginByVersion (Guid pluginId, Version version);

        /// <summary>
        /// Uninstalls a plugin by version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UninstallPluginByVersionWithHttpInfo (Guid pluginId, Version version);
        /// <summary>
        /// Updates plugin configuration.
        /// </summary>
        /// <remarks>
        /// Accepts plugin configuration as JSON body.
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <returns></returns>
        void UpdatePluginConfiguration (Guid pluginId);

        /// <summary>
        /// Updates plugin configuration.
        /// </summary>
        /// <remarks>
        /// Accepts plugin configuration as JSON body.
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePluginConfigurationWithHttpInfo (Guid pluginId);
        /// <summary>
        /// Updates plugin security info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">Plugin security info.</param>
        /// <returns></returns>
        void UpdatePluginSecurityInfo (PluginSecurityInfo pluginSecurityInfo);

        /// <summary>
        /// Updates plugin security info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">Plugin security info.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePluginSecurityInfoWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Disable a plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DisablePluginAsync (Guid pluginId, Version version, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Disable a plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DisablePluginWithHttpInfoAsync (Guid pluginId, Version version, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Enables a disabled plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EnablePluginAsync (Guid pluginId, Version version, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Enables a disabled plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EnablePluginWithHttpInfoAsync (Guid pluginId, Version version, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets plugin configuration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetPluginConfigurationAsync (Guid pluginId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets plugin configuration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPluginConfigurationWithHttpInfoAsync (Guid pluginId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a plugin&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPluginImageAsync (Guid pluginId, Version version, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a plugin&#39;s image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPluginImageWithHttpInfoAsync (Guid pluginId, Version version, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a plugin&#39;s manifest.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetPluginManifestAsync (Guid pluginId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a plugin&#39;s manifest.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPluginManifestWithHttpInfoAsync (Guid pluginId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a list of currently installed plugins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;PluginInfo&gt;</returns>
        System.Threading.Tasks.Task<List<PluginInfo>> GetPluginsAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of currently installed plugins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;PluginInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PluginInfo>>> GetPluginsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Uninstalls a plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UninstallPluginAsync (Guid pluginId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Uninstalls a plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UninstallPluginWithHttpInfoAsync (Guid pluginId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Uninstalls a plugin by version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UninstallPluginByVersionAsync (Guid pluginId, Version version, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Uninstalls a plugin by version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UninstallPluginByVersionWithHttpInfoAsync (Guid pluginId, Version version, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates plugin configuration.
        /// </summary>
        /// <remarks>
        /// Accepts plugin configuration as JSON body.
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePluginConfigurationAsync (Guid pluginId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates plugin configuration.
        /// </summary>
        /// <remarks>
        /// Accepts plugin configuration as JSON body.
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePluginConfigurationWithHttpInfoAsync (Guid pluginId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates plugin security info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">Plugin security info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePluginSecurityInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates plugin security info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">Plugin security info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePluginSecurityInfoWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PluginsApi : IPluginsApi
    {
        private Jellyfin.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PluginsApi(String basePath)
        {
            this.Configuration = new Jellyfin.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsApi"/> class
        /// </summary>
        /// <returns></returns>
        public PluginsApi()
        {
            this.Configuration = Jellyfin.Api.Client.Configuration.Default;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PluginsApi(Jellyfin.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Jellyfin.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Jellyfin.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Jellyfin.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Disable a plugin. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <returns></returns>
        public void DisablePlugin (Guid pluginId, Version version)
        {
             DisablePluginWithHttpInfo(pluginId, version);
        }

        /// <summary>
        /// Disable a plugin. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DisablePluginWithHttpInfo (Guid pluginId, Version version)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->DisablePlugin");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling PluginsApi->DisablePlugin");

            var localVarPath = "/Plugins/{pluginId}/{version}/Disable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisablePlugin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Disable a plugin. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DisablePluginAsync (Guid pluginId, Version version, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DisablePluginWithHttpInfoAsync(pluginId, version, cancellationToken);

        }

        /// <summary>
        /// Disable a plugin. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DisablePluginWithHttpInfoAsync (Guid pluginId, Version version, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->DisablePlugin");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling PluginsApi->DisablePlugin");

            var localVarPath = "/Plugins/{pluginId}/{version}/Disable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisablePlugin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Enables a disabled plugin. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <returns></returns>
        public void EnablePlugin (Guid pluginId, Version version)
        {
             EnablePluginWithHttpInfo(pluginId, version);
        }

        /// <summary>
        /// Enables a disabled plugin. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EnablePluginWithHttpInfo (Guid pluginId, Version version)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->EnablePlugin");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling PluginsApi->EnablePlugin");

            var localVarPath = "/Plugins/{pluginId}/{version}/Enable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnablePlugin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Enables a disabled plugin. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EnablePluginAsync (Guid pluginId, Version version, CancellationToken cancellationToken = default(CancellationToken))
        {
             await EnablePluginWithHttpInfoAsync(pluginId, version, cancellationToken);

        }

        /// <summary>
        /// Enables a disabled plugin. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EnablePluginWithHttpInfoAsync (Guid pluginId, Version version, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->EnablePlugin");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling PluginsApi->EnablePlugin");

            var localVarPath = "/Plugins/{pluginId}/{version}/Enable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnablePlugin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets plugin configuration. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <returns>Object</returns>
        public Object GetPluginConfiguration (Guid pluginId)
        {
             ApiResponse<Object> localVarResponse = GetPluginConfigurationWithHttpInfo(pluginId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets plugin configuration. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetPluginConfigurationWithHttpInfo (Guid pluginId)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->GetPluginConfiguration");

            var localVarPath = "/Plugins/{pluginId}/Configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPluginConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Gets plugin configuration. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetPluginConfigurationAsync (Guid pluginId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await GetPluginConfigurationWithHttpInfoAsync(pluginId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets plugin configuration. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPluginConfigurationWithHttpInfoAsync (Guid pluginId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->GetPluginConfiguration");

            var localVarPath = "/Plugins/{pluginId}/Configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPluginConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Gets a plugin&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPluginImage (Guid pluginId, Version version)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetPluginImageWithHttpInfo(pluginId, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a plugin&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetPluginImageWithHttpInfo (Guid pluginId, Version version)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->GetPluginImage");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling PluginsApi->GetPluginImage");

            var localVarPath = "/Plugins/{pluginId}/{version}/Image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPluginImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets a plugin&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPluginImageAsync (Guid pluginId, Version version, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetPluginImageWithHttpInfoAsync(pluginId, version, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a plugin&#39;s image. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPluginImageWithHttpInfoAsync (Guid pluginId, Version version, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->GetPluginImage");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling PluginsApi->GetPluginImage");

            var localVarPath = "/Plugins/{pluginId}/{version}/Image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPluginImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets a plugin&#39;s manifest. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <returns></returns>
        public void GetPluginManifest (Guid pluginId)
        {
             GetPluginManifestWithHttpInfo(pluginId);
        }

        /// <summary>
        /// Gets a plugin&#39;s manifest. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetPluginManifestWithHttpInfo (Guid pluginId)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->GetPluginManifest");

            var localVarPath = "/Plugins/{pluginId}/Manifest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPluginManifest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets a plugin&#39;s manifest. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetPluginManifestAsync (Guid pluginId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await GetPluginManifestWithHttpInfoAsync(pluginId, cancellationToken);

        }

        /// <summary>
        /// Gets a plugin&#39;s manifest. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPluginManifestWithHttpInfoAsync (Guid pluginId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->GetPluginManifest");

            var localVarPath = "/Plugins/{pluginId}/Manifest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPluginManifest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets a list of currently installed plugins. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PluginInfo&gt;</returns>
        public List<PluginInfo> GetPlugins ()
        {
             ApiResponse<List<PluginInfo>> localVarResponse = GetPluginsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of currently installed plugins. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PluginInfo&gt;</returns>
        public ApiResponse<List<PluginInfo>> GetPluginsWithHttpInfo ()
        {

            var localVarPath = "/Plugins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlugins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PluginInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PluginInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PluginInfo>)));
        }

        /// <summary>
        /// Gets a list of currently installed plugins. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;PluginInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<PluginInfo>> GetPluginsAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<PluginInfo>> localVarResponse = await GetPluginsWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of currently installed plugins. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;PluginInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PluginInfo>>> GetPluginsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Plugins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlugins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PluginInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PluginInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PluginInfo>)));
        }

        /// <summary>
        /// Uninstalls a plugin. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <returns></returns>
        public void UninstallPlugin (Guid pluginId)
        {
             UninstallPluginWithHttpInfo(pluginId);
        }

        /// <summary>
        /// Uninstalls a plugin. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UninstallPluginWithHttpInfo (Guid pluginId)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->UninstallPlugin");

            var localVarPath = "/Plugins/{pluginId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UninstallPlugin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Uninstalls a plugin. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UninstallPluginAsync (Guid pluginId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UninstallPluginWithHttpInfoAsync(pluginId, cancellationToken);

        }

        /// <summary>
        /// Uninstalls a plugin. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UninstallPluginWithHttpInfoAsync (Guid pluginId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->UninstallPlugin");

            var localVarPath = "/Plugins/{pluginId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UninstallPlugin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Uninstalls a plugin by version. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <returns></returns>
        public void UninstallPluginByVersion (Guid pluginId, Version version)
        {
             UninstallPluginByVersionWithHttpInfo(pluginId, version);
        }

        /// <summary>
        /// Uninstalls a plugin by version. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UninstallPluginByVersionWithHttpInfo (Guid pluginId, Version version)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->UninstallPluginByVersion");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling PluginsApi->UninstallPluginByVersion");

            var localVarPath = "/Plugins/{pluginId}/{version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UninstallPluginByVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Uninstalls a plugin by version. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UninstallPluginByVersionAsync (Guid pluginId, Version version, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UninstallPluginByVersionWithHttpInfoAsync(pluginId, version, cancellationToken);

        }

        /// <summary>
        /// Uninstalls a plugin by version. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="version">Plugin version.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UninstallPluginByVersionWithHttpInfoAsync (Guid pluginId, Version version, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->UninstallPluginByVersion");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling PluginsApi->UninstallPluginByVersion");

            var localVarPath = "/Plugins/{pluginId}/{version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UninstallPluginByVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates plugin configuration. Accepts plugin configuration as JSON body.
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <returns></returns>
        public void UpdatePluginConfiguration (Guid pluginId)
        {
             UpdatePluginConfigurationWithHttpInfo(pluginId);
        }

        /// <summary>
        /// Updates plugin configuration. Accepts plugin configuration as JSON body.
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdatePluginConfigurationWithHttpInfo (Guid pluginId)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->UpdatePluginConfiguration");

            var localVarPath = "/Plugins/{pluginId}/Configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePluginConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates plugin configuration. Accepts plugin configuration as JSON body.
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePluginConfigurationAsync (Guid pluginId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdatePluginConfigurationWithHttpInfoAsync(pluginId, cancellationToken);

        }

        /// <summary>
        /// Updates plugin configuration. Accepts plugin configuration as JSON body.
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePluginConfigurationWithHttpInfoAsync (Guid pluginId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->UpdatePluginConfiguration");

            var localVarPath = "/Plugins/{pluginId}/Configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pluginId != null) localVarPathParams.Add("pluginId", this.Configuration.ApiClient.ParameterToString(pluginId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePluginConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates plugin security info. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">Plugin security info.</param>
        /// <returns></returns>
        public void UpdatePluginSecurityInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
             UpdatePluginSecurityInfoWithHttpInfo(UNKNOWN_BASE_TYPE);
        }

        /// <summary>
        /// Updates plugin security info. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">Plugin security info.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdatePluginSecurityInfoWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling PluginsApi->UpdatePluginSecurityInfo");

            var localVarPath = "/Plugins/SecurityInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePluginSecurityInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates plugin security info. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">Plugin security info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePluginSecurityInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdatePluginSecurityInfoWithHttpInfoAsync(UNKNOWN_BASE_TYPE, cancellationToken);

        }

        /// <summary>
        /// Updates plugin security info. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">Plugin security info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePluginSecurityInfoWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling PluginsApi->UpdatePluginSecurityInfo");

            var localVarPath = "/Plugins/SecurityInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePluginSecurityInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
