/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Jellyfin.Api.Client;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlaylistsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds items to a playlist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="ids">Item id, comma delimited. (optional)</param>
        /// <param name="userId">The userId. (optional)</param>
        /// <returns></returns>
        void AddToPlaylist (Guid playlistId, List<Guid> ids = default(List<Guid>), Guid? userId = default(Guid?));

        /// <summary>
        /// Adds items to a playlist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="ids">Item id, comma delimited. (optional)</param>
        /// <param name="userId">The userId. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddToPlaylistWithHttpInfo (Guid playlistId, List<Guid> ids = default(List<Guid>), Guid? userId = default(Guid?));
        /// <summary>
        /// Creates a new playlist.
        /// </summary>
        /// <remarks>
        /// For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The playlist name. (optional)</param>
        /// <param name="ids">The item ids. (optional)</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="mediaType">The media type. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The create playlist payload. (optional)</param>
        /// <returns>PlaylistCreationResult</returns>
        PlaylistCreationResult CreatePlaylist (string name = default(string), List<Guid> ids = default(List<Guid>), Guid? userId = default(Guid?), string mediaType = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));

        /// <summary>
        /// Creates a new playlist.
        /// </summary>
        /// <remarks>
        /// For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The playlist name. (optional)</param>
        /// <param name="ids">The item ids. (optional)</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="mediaType">The media type. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The create playlist payload. (optional)</param>
        /// <returns>ApiResponse of PlaylistCreationResult</returns>
        ApiResponse<PlaylistCreationResult> CreatePlaylistWithHttpInfo (string name = default(string), List<Guid> ids = default(List<Guid>), Guid? userId = default(Guid?), string mediaType = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));
        /// <summary>
        /// Gets the original items of a playlist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="userId">User id.</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetPlaylistItems (Guid playlistId, Guid userId, int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>));

        /// <summary>
        /// Gets the original items of a playlist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="userId">User id.</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetPlaylistItemsWithHttpInfo (Guid playlistId, Guid userId, int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>));
        /// <summary>
        /// Moves a playlist item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="itemId">The item id.</param>
        /// <param name="newIndex">The new index.</param>
        /// <returns></returns>
        void MoveItem (string playlistId, string itemId, int newIndex);

        /// <summary>
        /// Moves a playlist item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="itemId">The item id.</param>
        /// <param name="newIndex">The new index.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MoveItemWithHttpInfo (string playlistId, string itemId, int newIndex);
        /// <summary>
        /// Removes items from a playlist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="entryIds">The item ids, comma delimited. (optional)</param>
        /// <returns></returns>
        void RemoveFromPlaylist (string playlistId, List<string> entryIds = default(List<string>));

        /// <summary>
        /// Removes items from a playlist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="entryIds">The item ids, comma delimited. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveFromPlaylistWithHttpInfo (string playlistId, List<string> entryIds = default(List<string>));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds items to a playlist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="ids">Item id, comma delimited. (optional)</param>
        /// <param name="userId">The userId. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddToPlaylistAsync (Guid playlistId, List<Guid> ids = default(List<Guid>), Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds items to a playlist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="ids">Item id, comma delimited. (optional)</param>
        /// <param name="userId">The userId. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddToPlaylistWithHttpInfoAsync (Guid playlistId, List<Guid> ids = default(List<Guid>), Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a new playlist.
        /// </summary>
        /// <remarks>
        /// For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The playlist name. (optional)</param>
        /// <param name="ids">The item ids. (optional)</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="mediaType">The media type. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The create playlist payload. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PlaylistCreationResult</returns>
        System.Threading.Tasks.Task<PlaylistCreationResult> CreatePlaylistAsync (string name = default(string), List<Guid> ids = default(List<Guid>), Guid? userId = default(Guid?), string mediaType = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new playlist.
        /// </summary>
        /// <remarks>
        /// For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The playlist name. (optional)</param>
        /// <param name="ids">The item ids. (optional)</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="mediaType">The media type. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The create playlist payload. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PlaylistCreationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlaylistCreationResult>> CreatePlaylistWithHttpInfoAsync (string name = default(string), List<Guid> ids = default(List<Guid>), Guid? userId = default(Guid?), string mediaType = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the original items of a playlist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="userId">User id.</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetPlaylistItemsAsync (Guid playlistId, Guid userId, int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the original items of a playlist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="userId">User id.</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetPlaylistItemsWithHttpInfoAsync (Guid playlistId, Guid userId, int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Moves a playlist item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="itemId">The item id.</param>
        /// <param name="newIndex">The new index.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MoveItemAsync (string playlistId, string itemId, int newIndex, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Moves a playlist item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="itemId">The item id.</param>
        /// <param name="newIndex">The new index.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MoveItemWithHttpInfoAsync (string playlistId, string itemId, int newIndex, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Removes items from a playlist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="entryIds">The item ids, comma delimited. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveFromPlaylistAsync (string playlistId, List<string> entryIds = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes items from a playlist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="entryIds">The item ids, comma delimited. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveFromPlaylistWithHttpInfoAsync (string playlistId, List<string> entryIds = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlaylistsApi : IPlaylistsApi
    {
        private Jellyfin.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaylistsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlaylistsApi(String basePath)
        {
            this.Configuration = new Jellyfin.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaylistsApi"/> class
        /// </summary>
        /// <returns></returns>
        public PlaylistsApi()
        {
            this.Configuration = Jellyfin.Api.Client.Configuration.Default;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaylistsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlaylistsApi(Jellyfin.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Jellyfin.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Jellyfin.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Jellyfin.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds items to a playlist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="ids">Item id, comma delimited. (optional)</param>
        /// <param name="userId">The userId. (optional)</param>
        /// <returns></returns>
        public void AddToPlaylist (Guid playlistId, List<Guid> ids = default(List<Guid>), Guid? userId = default(Guid?))
        {
             AddToPlaylistWithHttpInfo(playlistId, ids, userId);
        }

        /// <summary>
        /// Adds items to a playlist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="ids">Item id, comma delimited. (optional)</param>
        /// <param name="userId">The userId. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddToPlaylistWithHttpInfo (Guid playlistId, List<Guid> ids = default(List<Guid>), Guid? userId = default(Guid?))
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->AddToPlaylist");

            var localVarPath = "/Playlists/{playlistId}/Items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ids", ids)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddToPlaylist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Adds items to a playlist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="ids">Item id, comma delimited. (optional)</param>
        /// <param name="userId">The userId. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddToPlaylistAsync (Guid playlistId, List<Guid> ids = default(List<Guid>), Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken))
        {
             await AddToPlaylistWithHttpInfoAsync(playlistId, ids, userId, cancellationToken);

        }

        /// <summary>
        /// Adds items to a playlist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="ids">Item id, comma delimited. (optional)</param>
        /// <param name="userId">The userId. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddToPlaylistWithHttpInfoAsync (Guid playlistId, List<Guid> ids = default(List<Guid>), Guid? userId = default(Guid?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->AddToPlaylist");

            var localVarPath = "/Playlists/{playlistId}/Items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ids", ids)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddToPlaylist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Creates a new playlist. For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The playlist name. (optional)</param>
        /// <param name="ids">The item ids. (optional)</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="mediaType">The media type. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The create playlist payload. (optional)</param>
        /// <returns>PlaylistCreationResult</returns>
        public PlaylistCreationResult CreatePlaylist (string name = default(string), List<Guid> ids = default(List<Guid>), Guid? userId = default(Guid?), string mediaType = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
             ApiResponse<PlaylistCreationResult> localVarResponse = CreatePlaylistWithHttpInfo(name, ids, userId, mediaType, UNKNOWN_BASE_TYPE);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new playlist. For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The playlist name. (optional)</param>
        /// <param name="ids">The item ids. (optional)</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="mediaType">The media type. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The create playlist payload. (optional)</param>
        /// <returns>ApiResponse of PlaylistCreationResult</returns>
        public ApiResponse<PlaylistCreationResult> CreatePlaylistWithHttpInfo (string name = default(string), List<Guid> ids = default(List<Guid>), Guid? userId = default(Guid?), string mediaType = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {

            var localVarPath = "/Playlists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ids", ids)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (mediaType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaType", mediaType)); // query parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePlaylist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlaylistCreationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlaylistCreationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlaylistCreationResult)));
        }

        /// <summary>
        /// Creates a new playlist. For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The playlist name. (optional)</param>
        /// <param name="ids">The item ids. (optional)</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="mediaType">The media type. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The create playlist payload. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PlaylistCreationResult</returns>
        public async System.Threading.Tasks.Task<PlaylistCreationResult> CreatePlaylistAsync (string name = default(string), List<Guid> ids = default(List<Guid>), Guid? userId = default(Guid?), string mediaType = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PlaylistCreationResult> localVarResponse = await CreatePlaylistWithHttpInfoAsync(name, ids, userId, mediaType, UNKNOWN_BASE_TYPE, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new playlist. For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The playlist name. (optional)</param>
        /// <param name="ids">The item ids. (optional)</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="mediaType">The media type. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The create playlist payload. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PlaylistCreationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlaylistCreationResult>> CreatePlaylistWithHttpInfoAsync (string name = default(string), List<Guid> ids = default(List<Guid>), Guid? userId = default(Guid?), string mediaType = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Playlists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ids", ids)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (mediaType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaType", mediaType)); // query parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePlaylist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlaylistCreationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlaylistCreationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlaylistCreationResult)));
        }

        /// <summary>
        /// Gets the original items of a playlist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="userId">User id.</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetPlaylistItems (Guid playlistId, Guid userId, int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetPlaylistItemsWithHttpInfo(playlistId, userId, startIndex, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the original items of a playlist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="userId">User id.</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetPlaylistItemsWithHttpInfo (Guid playlistId, Guid userId, int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>))
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->GetPlaylistItems");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PlaylistsApi->GetPlaylistItems");

            var localVarPath = "/Playlists/{playlistId}/Items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlaylistItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets the original items of a playlist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="userId">User id.</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetPlaylistItemsAsync (Guid playlistId, Guid userId, int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetPlaylistItemsWithHttpInfoAsync(playlistId, userId, startIndex, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the original items of a playlist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="userId">User id.</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetPlaylistItemsWithHttpInfoAsync (Guid playlistId, Guid userId, int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->GetPlaylistItems");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PlaylistsApi->GetPlaylistItems");

            var localVarPath = "/Playlists/{playlistId}/Items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlaylistItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Moves a playlist item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="itemId">The item id.</param>
        /// <param name="newIndex">The new index.</param>
        /// <returns></returns>
        public void MoveItem (string playlistId, string itemId, int newIndex)
        {
             MoveItemWithHttpInfo(playlistId, itemId, newIndex);
        }

        /// <summary>
        /// Moves a playlist item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="itemId">The item id.</param>
        /// <param name="newIndex">The new index.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MoveItemWithHttpInfo (string playlistId, string itemId, int newIndex)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->MoveItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling PlaylistsApi->MoveItem");
            // verify the required parameter 'newIndex' is set
            if (newIndex == null)
                throw new ApiException(400, "Missing required parameter 'newIndex' when calling PlaylistsApi->MoveItem");

            var localVarPath = "/Playlists/{playlistId}/Items/{itemId}/Move/{newIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (newIndex != null) localVarPathParams.Add("newIndex", this.Configuration.ApiClient.ParameterToString(newIndex)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Moves a playlist item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="itemId">The item id.</param>
        /// <param name="newIndex">The new index.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MoveItemAsync (string playlistId, string itemId, int newIndex, CancellationToken cancellationToken = default(CancellationToken))
        {
             await MoveItemWithHttpInfoAsync(playlistId, itemId, newIndex, cancellationToken);

        }

        /// <summary>
        /// Moves a playlist item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="itemId">The item id.</param>
        /// <param name="newIndex">The new index.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MoveItemWithHttpInfoAsync (string playlistId, string itemId, int newIndex, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->MoveItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling PlaylistsApi->MoveItem");
            // verify the required parameter 'newIndex' is set
            if (newIndex == null)
                throw new ApiException(400, "Missing required parameter 'newIndex' when calling PlaylistsApi->MoveItem");

            var localVarPath = "/Playlists/{playlistId}/Items/{itemId}/Move/{newIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (newIndex != null) localVarPathParams.Add("newIndex", this.Configuration.ApiClient.ParameterToString(newIndex)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Removes items from a playlist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="entryIds">The item ids, comma delimited. (optional)</param>
        /// <returns></returns>
        public void RemoveFromPlaylist (string playlistId, List<string> entryIds = default(List<string>))
        {
             RemoveFromPlaylistWithHttpInfo(playlistId, entryIds);
        }

        /// <summary>
        /// Removes items from a playlist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="entryIds">The item ids, comma delimited. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveFromPlaylistWithHttpInfo (string playlistId, List<string> entryIds = default(List<string>))
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->RemoveFromPlaylist");

            var localVarPath = "/Playlists/{playlistId}/Items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (entryIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "entryIds", entryIds)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveFromPlaylist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Removes items from a playlist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="entryIds">The item ids, comma delimited. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveFromPlaylistAsync (string playlistId, List<string> entryIds = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             await RemoveFromPlaylistWithHttpInfoAsync(playlistId, entryIds, cancellationToken);

        }

        /// <summary>
        /// Removes items from a playlist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="entryIds">The item ids, comma delimited. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveFromPlaylistWithHttpInfoAsync (string playlistId, List<string> entryIds = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->RemoveFromPlaylist");

            var localVarPath = "/Playlists/{playlistId}/Items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (entryIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "entryIds", entryIds)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveFromPlaylist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
