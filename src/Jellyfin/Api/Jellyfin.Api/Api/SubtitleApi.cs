/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Jellyfin.Api.Client;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubtitleApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes an external subtitle file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="index">The index of the subtitle file.</param>
        /// <returns></returns>
        void DeleteSubtitle (Guid itemId, int index);

        /// <summary>
        /// Deletes an external subtitle file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="index">The index of the subtitle file.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSubtitleWithHttpInfo (Guid itemId, int index);
        /// <summary>
        /// Downloads a remote subtitle.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="subtitleId">The subtitle id.</param>
        /// <returns></returns>
        void DownloadRemoteSubtitles (Guid itemId, string subtitleId);

        /// <summary>
        /// Downloads a remote subtitle.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="subtitleId">The subtitle id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DownloadRemoteSubtitlesWithHttpInfo (Guid itemId, string subtitleId);
        /// <summary>
        /// Gets a fallback font file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the fallback font file to get.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetFallbackFont (string name);

        /// <summary>
        /// Gets a fallback font file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the fallback font file to get.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetFallbackFontWithHttpInfo (string name);
        /// <summary>
        /// Gets a list of available fallback font files.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FontFile&gt;</returns>
        List<FontFile> GetFallbackFontList ();

        /// <summary>
        /// Gets a list of available fallback font files.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FontFile&gt;</returns>
        ApiResponse<List<FontFile>> GetFallbackFontListWithHttpInfo ();
        /// <summary>
        /// Gets the remote subtitles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetRemoteSubtitles (string id);

        /// <summary>
        /// Gets the remote subtitles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetRemoteSubtitlesWithHttpInfo (string id);
        /// <summary>
        /// Gets subtitles in a specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeItemId">The (route) item id.</param>
        /// <param name="routeMediaSourceId">The (route) media source id.</param>
        /// <param name="routeIndex">The (route) subtitle stream index.</param>
        /// <param name="routeFormat">The (route) format of the returned subtitle.</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="index">The subtitle stream index. (optional)</param>
        /// <param name="format">The format of the returned subtitle. (optional)</param>
        /// <param name="endPositionTicks">Optional. The end position of the subtitle in ticks. (optional)</param>
        /// <param name="copyTimestamps">Optional. Whether to copy the timestamps. (optional, default to false)</param>
        /// <param name="addVttTimeMap">Optional. Whether to add a VTT time map. (optional, default to false)</param>
        /// <param name="startPositionTicks">The start position of the subtitle in ticks. (optional, default to 0)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetSubtitle (Guid routeItemId, string routeMediaSourceId, int routeIndex, string routeFormat, Guid? itemId = default(Guid?), string mediaSourceId = default(string), int? index = default(int?), string format = default(string), long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), bool? addVttTimeMap = default(bool?), long? startPositionTicks = default(long?));

        /// <summary>
        /// Gets subtitles in a specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeItemId">The (route) item id.</param>
        /// <param name="routeMediaSourceId">The (route) media source id.</param>
        /// <param name="routeIndex">The (route) subtitle stream index.</param>
        /// <param name="routeFormat">The (route) format of the returned subtitle.</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="index">The subtitle stream index. (optional)</param>
        /// <param name="format">The format of the returned subtitle. (optional)</param>
        /// <param name="endPositionTicks">Optional. The end position of the subtitle in ticks. (optional)</param>
        /// <param name="copyTimestamps">Optional. Whether to copy the timestamps. (optional, default to false)</param>
        /// <param name="addVttTimeMap">Optional. Whether to add a VTT time map. (optional, default to false)</param>
        /// <param name="startPositionTicks">The start position of the subtitle in ticks. (optional, default to 0)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetSubtitleWithHttpInfo (Guid routeItemId, string routeMediaSourceId, int routeIndex, string routeFormat, Guid? itemId = default(Guid?), string mediaSourceId = default(string), int? index = default(int?), string format = default(string), long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), bool? addVttTimeMap = default(bool?), long? startPositionTicks = default(long?));
        /// <summary>
        /// Gets an HLS subtitle playlist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="index">The subtitle stream index.</param>
        /// <param name="mediaSourceId">The media source id.</param>
        /// <param name="segmentLength">The subtitle segment length.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetSubtitlePlaylist (Guid itemId, int index, string mediaSourceId, int segmentLength);

        /// <summary>
        /// Gets an HLS subtitle playlist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="index">The subtitle stream index.</param>
        /// <param name="mediaSourceId">The media source id.</param>
        /// <param name="segmentLength">The subtitle segment length.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetSubtitlePlaylistWithHttpInfo (Guid itemId, int index, string mediaSourceId, int segmentLength);
        /// <summary>
        /// Gets subtitles in a specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeItemId">The (route) item id.</param>
        /// <param name="routeMediaSourceId">The (route) media source id.</param>
        /// <param name="routeIndex">The (route) subtitle stream index.</param>
        /// <param name="routeStartPositionTicks">The (route) start position of the subtitle in ticks.</param>
        /// <param name="routeFormat">The (route) format of the returned subtitle.</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="index">The subtitle stream index. (optional)</param>
        /// <param name="startPositionTicks">The start position of the subtitle in ticks. (optional)</param>
        /// <param name="format">The format of the returned subtitle. (optional)</param>
        /// <param name="endPositionTicks">Optional. The end position of the subtitle in ticks. (optional)</param>
        /// <param name="copyTimestamps">Optional. Whether to copy the timestamps. (optional, default to false)</param>
        /// <param name="addVttTimeMap">Optional. Whether to add a VTT time map. (optional, default to false)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetSubtitleWithTicks (Guid routeItemId, string routeMediaSourceId, int routeIndex, long routeStartPositionTicks, string routeFormat, Guid? itemId = default(Guid?), string mediaSourceId = default(string), int? index = default(int?), long? startPositionTicks = default(long?), string format = default(string), long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), bool? addVttTimeMap = default(bool?));

        /// <summary>
        /// Gets subtitles in a specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeItemId">The (route) item id.</param>
        /// <param name="routeMediaSourceId">The (route) media source id.</param>
        /// <param name="routeIndex">The (route) subtitle stream index.</param>
        /// <param name="routeStartPositionTicks">The (route) start position of the subtitle in ticks.</param>
        /// <param name="routeFormat">The (route) format of the returned subtitle.</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="index">The subtitle stream index. (optional)</param>
        /// <param name="startPositionTicks">The start position of the subtitle in ticks. (optional)</param>
        /// <param name="format">The format of the returned subtitle. (optional)</param>
        /// <param name="endPositionTicks">Optional. The end position of the subtitle in ticks. (optional)</param>
        /// <param name="copyTimestamps">Optional. Whether to copy the timestamps. (optional, default to false)</param>
        /// <param name="addVttTimeMap">Optional. Whether to add a VTT time map. (optional, default to false)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetSubtitleWithTicksWithHttpInfo (Guid routeItemId, string routeMediaSourceId, int routeIndex, long routeStartPositionTicks, string routeFormat, Guid? itemId = default(Guid?), string mediaSourceId = default(string), int? index = default(int?), long? startPositionTicks = default(long?), string format = default(string), long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), bool? addVttTimeMap = default(bool?));
        /// <summary>
        /// Search remote subtitles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="language">The language of the subtitles.</param>
        /// <param name="isPerfectMatch">Optional. Only show subtitles which are a perfect match. (optional)</param>
        /// <returns>List&lt;RemoteSubtitleInfo&gt;</returns>
        List<RemoteSubtitleInfo> SearchRemoteSubtitles (Guid itemId, string language, bool? isPerfectMatch = default(bool?));

        /// <summary>
        /// Search remote subtitles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="language">The language of the subtitles.</param>
        /// <param name="isPerfectMatch">Optional. Only show subtitles which are a perfect match. (optional)</param>
        /// <returns>ApiResponse of List&lt;RemoteSubtitleInfo&gt;</returns>
        ApiResponse<List<RemoteSubtitleInfo>> SearchRemoteSubtitlesWithHttpInfo (Guid itemId, string language, bool? isPerfectMatch = default(bool?));
        /// <summary>
        /// Upload an external subtitle file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item the subtitle belongs to.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The request body.</param>
        /// <returns></returns>
        void UploadSubtitle (Guid itemId, UploadSubtitleDto body);

        /// <summary>
        /// Upload an external subtitle file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item the subtitle belongs to.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The request body.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UploadSubtitleWithHttpInfo (Guid itemId, UploadSubtitleDto body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes an external subtitle file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="index">The index of the subtitle file.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSubtitleAsync (Guid itemId, int index, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes an external subtitle file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="index">The index of the subtitle file.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSubtitleWithHttpInfoAsync (Guid itemId, int index, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Downloads a remote subtitle.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="subtitleId">The subtitle id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DownloadRemoteSubtitlesAsync (Guid itemId, string subtitleId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Downloads a remote subtitle.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="subtitleId">The subtitle id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DownloadRemoteSubtitlesWithHttpInfoAsync (Guid itemId, string subtitleId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a fallback font file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the fallback font file to get.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetFallbackFontAsync (string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a fallback font file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the fallback font file to get.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetFallbackFontWithHttpInfoAsync (string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a list of available fallback font files.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;FontFile&gt;</returns>
        System.Threading.Tasks.Task<List<FontFile>> GetFallbackFontListAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of available fallback font files.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;FontFile&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FontFile>>> GetFallbackFontListWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the remote subtitles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetRemoteSubtitlesAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the remote subtitles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetRemoteSubtitlesWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets subtitles in a specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeItemId">The (route) item id.</param>
        /// <param name="routeMediaSourceId">The (route) media source id.</param>
        /// <param name="routeIndex">The (route) subtitle stream index.</param>
        /// <param name="routeFormat">The (route) format of the returned subtitle.</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="index">The subtitle stream index. (optional)</param>
        /// <param name="format">The format of the returned subtitle. (optional)</param>
        /// <param name="endPositionTicks">Optional. The end position of the subtitle in ticks. (optional)</param>
        /// <param name="copyTimestamps">Optional. Whether to copy the timestamps. (optional, default to false)</param>
        /// <param name="addVttTimeMap">Optional. Whether to add a VTT time map. (optional, default to false)</param>
        /// <param name="startPositionTicks">The start position of the subtitle in ticks. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetSubtitleAsync (Guid routeItemId, string routeMediaSourceId, int routeIndex, string routeFormat, Guid? itemId = default(Guid?), string mediaSourceId = default(string), int? index = default(int?), string format = default(string), long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), bool? addVttTimeMap = default(bool?), long? startPositionTicks = default(long?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets subtitles in a specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeItemId">The (route) item id.</param>
        /// <param name="routeMediaSourceId">The (route) media source id.</param>
        /// <param name="routeIndex">The (route) subtitle stream index.</param>
        /// <param name="routeFormat">The (route) format of the returned subtitle.</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="index">The subtitle stream index. (optional)</param>
        /// <param name="format">The format of the returned subtitle. (optional)</param>
        /// <param name="endPositionTicks">Optional. The end position of the subtitle in ticks. (optional)</param>
        /// <param name="copyTimestamps">Optional. Whether to copy the timestamps. (optional, default to false)</param>
        /// <param name="addVttTimeMap">Optional. Whether to add a VTT time map. (optional, default to false)</param>
        /// <param name="startPositionTicks">The start position of the subtitle in ticks. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetSubtitleWithHttpInfoAsync (Guid routeItemId, string routeMediaSourceId, int routeIndex, string routeFormat, Guid? itemId = default(Guid?), string mediaSourceId = default(string), int? index = default(int?), string format = default(string), long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), bool? addVttTimeMap = default(bool?), long? startPositionTicks = default(long?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets an HLS subtitle playlist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="index">The subtitle stream index.</param>
        /// <param name="mediaSourceId">The media source id.</param>
        /// <param name="segmentLength">The subtitle segment length.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetSubtitlePlaylistAsync (Guid itemId, int index, string mediaSourceId, int segmentLength, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets an HLS subtitle playlist.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="index">The subtitle stream index.</param>
        /// <param name="mediaSourceId">The media source id.</param>
        /// <param name="segmentLength">The subtitle segment length.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetSubtitlePlaylistWithHttpInfoAsync (Guid itemId, int index, string mediaSourceId, int segmentLength, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets subtitles in a specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeItemId">The (route) item id.</param>
        /// <param name="routeMediaSourceId">The (route) media source id.</param>
        /// <param name="routeIndex">The (route) subtitle stream index.</param>
        /// <param name="routeStartPositionTicks">The (route) start position of the subtitle in ticks.</param>
        /// <param name="routeFormat">The (route) format of the returned subtitle.</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="index">The subtitle stream index. (optional)</param>
        /// <param name="startPositionTicks">The start position of the subtitle in ticks. (optional)</param>
        /// <param name="format">The format of the returned subtitle. (optional)</param>
        /// <param name="endPositionTicks">Optional. The end position of the subtitle in ticks. (optional)</param>
        /// <param name="copyTimestamps">Optional. Whether to copy the timestamps. (optional, default to false)</param>
        /// <param name="addVttTimeMap">Optional. Whether to add a VTT time map. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetSubtitleWithTicksAsync (Guid routeItemId, string routeMediaSourceId, int routeIndex, long routeStartPositionTicks, string routeFormat, Guid? itemId = default(Guid?), string mediaSourceId = default(string), int? index = default(int?), long? startPositionTicks = default(long?), string format = default(string), long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), bool? addVttTimeMap = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets subtitles in a specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeItemId">The (route) item id.</param>
        /// <param name="routeMediaSourceId">The (route) media source id.</param>
        /// <param name="routeIndex">The (route) subtitle stream index.</param>
        /// <param name="routeStartPositionTicks">The (route) start position of the subtitle in ticks.</param>
        /// <param name="routeFormat">The (route) format of the returned subtitle.</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="index">The subtitle stream index. (optional)</param>
        /// <param name="startPositionTicks">The start position of the subtitle in ticks. (optional)</param>
        /// <param name="format">The format of the returned subtitle. (optional)</param>
        /// <param name="endPositionTicks">Optional. The end position of the subtitle in ticks. (optional)</param>
        /// <param name="copyTimestamps">Optional. Whether to copy the timestamps. (optional, default to false)</param>
        /// <param name="addVttTimeMap">Optional. Whether to add a VTT time map. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetSubtitleWithTicksWithHttpInfoAsync (Guid routeItemId, string routeMediaSourceId, int routeIndex, long routeStartPositionTicks, string routeFormat, Guid? itemId = default(Guid?), string mediaSourceId = default(string), int? index = default(int?), long? startPositionTicks = default(long?), string format = default(string), long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), bool? addVttTimeMap = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Search remote subtitles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="language">The language of the subtitles.</param>
        /// <param name="isPerfectMatch">Optional. Only show subtitles which are a perfect match. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;RemoteSubtitleInfo&gt;</returns>
        System.Threading.Tasks.Task<List<RemoteSubtitleInfo>> SearchRemoteSubtitlesAsync (Guid itemId, string language, bool? isPerfectMatch = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search remote subtitles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="language">The language of the subtitles.</param>
        /// <param name="isPerfectMatch">Optional. Only show subtitles which are a perfect match. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;RemoteSubtitleInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RemoteSubtitleInfo>>> SearchRemoteSubtitlesWithHttpInfoAsync (Guid itemId, string language, bool? isPerfectMatch = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Upload an external subtitle file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item the subtitle belongs to.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The request body.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UploadSubtitleAsync (Guid itemId, UploadSubtitleDto body, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Upload an external subtitle file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item the subtitle belongs to.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The request body.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadSubtitleWithHttpInfoAsync (Guid itemId, UploadSubtitleDto body, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubtitleApi : ISubtitleApi
    {
        private Jellyfin.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubtitleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubtitleApi(String basePath)
        {
            this.Configuration = new Jellyfin.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubtitleApi"/> class
        /// </summary>
        /// <returns></returns>
        public SubtitleApi()
        {
            this.Configuration = Jellyfin.Api.Client.Configuration.Default;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubtitleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubtitleApi(Jellyfin.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Jellyfin.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Jellyfin.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Jellyfin.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes an external subtitle file. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="index">The index of the subtitle file.</param>
        /// <returns></returns>
        public void DeleteSubtitle (Guid itemId, int index)
        {
             DeleteSubtitleWithHttpInfo(itemId, index);
        }

        /// <summary>
        /// Deletes an external subtitle file. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="index">The index of the subtitle file.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSubtitleWithHttpInfo (Guid itemId, int index)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling SubtitleApi->DeleteSubtitle");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling SubtitleApi->DeleteSubtitle");

            var localVarPath = "/Videos/{itemId}/Subtitles/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubtitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes an external subtitle file. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="index">The index of the subtitle file.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSubtitleAsync (Guid itemId, int index, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteSubtitleWithHttpInfoAsync(itemId, index, cancellationToken);

        }

        /// <summary>
        /// Deletes an external subtitle file. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="index">The index of the subtitle file.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSubtitleWithHttpInfoAsync (Guid itemId, int index, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling SubtitleApi->DeleteSubtitle");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling SubtitleApi->DeleteSubtitle");

            var localVarPath = "/Videos/{itemId}/Subtitles/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubtitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Downloads a remote subtitle. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="subtitleId">The subtitle id.</param>
        /// <returns></returns>
        public void DownloadRemoteSubtitles (Guid itemId, string subtitleId)
        {
             DownloadRemoteSubtitlesWithHttpInfo(itemId, subtitleId);
        }

        /// <summary>
        /// Downloads a remote subtitle. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="subtitleId">The subtitle id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DownloadRemoteSubtitlesWithHttpInfo (Guid itemId, string subtitleId)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling SubtitleApi->DownloadRemoteSubtitles");
            // verify the required parameter 'subtitleId' is set
            if (subtitleId == null)
                throw new ApiException(400, "Missing required parameter 'subtitleId' when calling SubtitleApi->DownloadRemoteSubtitles");

            var localVarPath = "/Items/{itemId}/RemoteSearch/Subtitles/{subtitleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (subtitleId != null) localVarPathParams.Add("subtitleId", this.Configuration.ApiClient.ParameterToString(subtitleId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadRemoteSubtitles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Downloads a remote subtitle. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="subtitleId">The subtitle id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DownloadRemoteSubtitlesAsync (Guid itemId, string subtitleId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DownloadRemoteSubtitlesWithHttpInfoAsync(itemId, subtitleId, cancellationToken);

        }

        /// <summary>
        /// Downloads a remote subtitle. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="subtitleId">The subtitle id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DownloadRemoteSubtitlesWithHttpInfoAsync (Guid itemId, string subtitleId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling SubtitleApi->DownloadRemoteSubtitles");
            // verify the required parameter 'subtitleId' is set
            if (subtitleId == null)
                throw new ApiException(400, "Missing required parameter 'subtitleId' when calling SubtitleApi->DownloadRemoteSubtitles");

            var localVarPath = "/Items/{itemId}/RemoteSearch/Subtitles/{subtitleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (subtitleId != null) localVarPathParams.Add("subtitleId", this.Configuration.ApiClient.ParameterToString(subtitleId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadRemoteSubtitles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets a fallback font file. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the fallback font file to get.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetFallbackFont (string name)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetFallbackFontWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a fallback font file. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the fallback font file to get.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetFallbackFontWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SubtitleApi->GetFallbackFont");

            var localVarPath = "/FallbackFont/Fonts/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "font/_*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFallbackFont", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets a fallback font file. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the fallback font file to get.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetFallbackFontAsync (string name, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetFallbackFontWithHttpInfoAsync(name, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a fallback font file. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the fallback font file to get.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetFallbackFontWithHttpInfoAsync (string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SubtitleApi->GetFallbackFont");

            var localVarPath = "/FallbackFont/Fonts/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "font/_*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFallbackFont", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets a list of available fallback font files. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FontFile&gt;</returns>
        public List<FontFile> GetFallbackFontList ()
        {
             ApiResponse<List<FontFile>> localVarResponse = GetFallbackFontListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of available fallback font files. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FontFile&gt;</returns>
        public ApiResponse<List<FontFile>> GetFallbackFontListWithHttpInfo ()
        {

            var localVarPath = "/FallbackFont/Fonts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFallbackFontList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FontFile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FontFile>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FontFile>)));
        }

        /// <summary>
        /// Gets a list of available fallback font files. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;FontFile&gt;</returns>
        public async System.Threading.Tasks.Task<List<FontFile>> GetFallbackFontListAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<FontFile>> localVarResponse = await GetFallbackFontListWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of available fallback font files. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;FontFile&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FontFile>>> GetFallbackFontListWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/FallbackFont/Fonts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFallbackFontList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FontFile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FontFile>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FontFile>)));
        }

        /// <summary>
        /// Gets the remote subtitles. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetRemoteSubtitles (string id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetRemoteSubtitlesWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the remote subtitles. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetRemoteSubtitlesWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubtitleApi->GetRemoteSubtitles");

            var localVarPath = "/Providers/Subtitles/Subtitles/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/_*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRemoteSubtitles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets the remote subtitles. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetRemoteSubtitlesAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetRemoteSubtitlesWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the remote subtitles. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetRemoteSubtitlesWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubtitleApi->GetRemoteSubtitles");

            var localVarPath = "/Providers/Subtitles/Subtitles/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/_*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRemoteSubtitles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets subtitles in a specified format. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeItemId">The (route) item id.</param>
        /// <param name="routeMediaSourceId">The (route) media source id.</param>
        /// <param name="routeIndex">The (route) subtitle stream index.</param>
        /// <param name="routeFormat">The (route) format of the returned subtitle.</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="index">The subtitle stream index. (optional)</param>
        /// <param name="format">The format of the returned subtitle. (optional)</param>
        /// <param name="endPositionTicks">Optional. The end position of the subtitle in ticks. (optional)</param>
        /// <param name="copyTimestamps">Optional. Whether to copy the timestamps. (optional, default to false)</param>
        /// <param name="addVttTimeMap">Optional. Whether to add a VTT time map. (optional, default to false)</param>
        /// <param name="startPositionTicks">The start position of the subtitle in ticks. (optional, default to 0)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetSubtitle (Guid routeItemId, string routeMediaSourceId, int routeIndex, string routeFormat, Guid? itemId = default(Guid?), string mediaSourceId = default(string), int? index = default(int?), string format = default(string), long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), bool? addVttTimeMap = default(bool?), long? startPositionTicks = default(long?))
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetSubtitleWithHttpInfo(routeItemId, routeMediaSourceId, routeIndex, routeFormat, itemId, mediaSourceId, index, format, endPositionTicks, copyTimestamps, addVttTimeMap, startPositionTicks);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets subtitles in a specified format. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeItemId">The (route) item id.</param>
        /// <param name="routeMediaSourceId">The (route) media source id.</param>
        /// <param name="routeIndex">The (route) subtitle stream index.</param>
        /// <param name="routeFormat">The (route) format of the returned subtitle.</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="index">The subtitle stream index. (optional)</param>
        /// <param name="format">The format of the returned subtitle. (optional)</param>
        /// <param name="endPositionTicks">Optional. The end position of the subtitle in ticks. (optional)</param>
        /// <param name="copyTimestamps">Optional. Whether to copy the timestamps. (optional, default to false)</param>
        /// <param name="addVttTimeMap">Optional. Whether to add a VTT time map. (optional, default to false)</param>
        /// <param name="startPositionTicks">The start position of the subtitle in ticks. (optional, default to 0)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetSubtitleWithHttpInfo (Guid routeItemId, string routeMediaSourceId, int routeIndex, string routeFormat, Guid? itemId = default(Guid?), string mediaSourceId = default(string), int? index = default(int?), string format = default(string), long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), bool? addVttTimeMap = default(bool?), long? startPositionTicks = default(long?))
        {
            // verify the required parameter 'routeItemId' is set
            if (routeItemId == null)
                throw new ApiException(400, "Missing required parameter 'routeItemId' when calling SubtitleApi->GetSubtitle");
            // verify the required parameter 'routeMediaSourceId' is set
            if (routeMediaSourceId == null)
                throw new ApiException(400, "Missing required parameter 'routeMediaSourceId' when calling SubtitleApi->GetSubtitle");
            // verify the required parameter 'routeIndex' is set
            if (routeIndex == null)
                throw new ApiException(400, "Missing required parameter 'routeIndex' when calling SubtitleApi->GetSubtitle");
            // verify the required parameter 'routeFormat' is set
            if (routeFormat == null)
                throw new ApiException(400, "Missing required parameter 'routeFormat' when calling SubtitleApi->GetSubtitle");

            var localVarPath = "/Videos/{routeItemId}/{routeMediaSourceId}/Subtitles/{routeIndex}/Stream.{routeFormat}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/_*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (routeItemId != null) localVarPathParams.Add("routeItemId", this.Configuration.ApiClient.ParameterToString(routeItemId)); // path parameter
            if (routeMediaSourceId != null) localVarPathParams.Add("routeMediaSourceId", this.Configuration.ApiClient.ParameterToString(routeMediaSourceId)); // path parameter
            if (routeIndex != null) localVarPathParams.Add("routeIndex", this.Configuration.ApiClient.ParameterToString(routeIndex)); // path parameter
            if (routeFormat != null) localVarPathParams.Add("routeFormat", this.Configuration.ApiClient.ParameterToString(routeFormat)); // path parameter
            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemId", itemId)); // query parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "index", index)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (endPositionTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endPositionTicks", endPositionTicks)); // query parameter
            if (copyTimestamps != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "copyTimestamps", copyTimestamps)); // query parameter
            if (addVttTimeMap != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addVttTimeMap", addVttTimeMap)); // query parameter
            if (startPositionTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startPositionTicks", startPositionTicks)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubtitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets subtitles in a specified format. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeItemId">The (route) item id.</param>
        /// <param name="routeMediaSourceId">The (route) media source id.</param>
        /// <param name="routeIndex">The (route) subtitle stream index.</param>
        /// <param name="routeFormat">The (route) format of the returned subtitle.</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="index">The subtitle stream index. (optional)</param>
        /// <param name="format">The format of the returned subtitle. (optional)</param>
        /// <param name="endPositionTicks">Optional. The end position of the subtitle in ticks. (optional)</param>
        /// <param name="copyTimestamps">Optional. Whether to copy the timestamps. (optional, default to false)</param>
        /// <param name="addVttTimeMap">Optional. Whether to add a VTT time map. (optional, default to false)</param>
        /// <param name="startPositionTicks">The start position of the subtitle in ticks. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetSubtitleAsync (Guid routeItemId, string routeMediaSourceId, int routeIndex, string routeFormat, Guid? itemId = default(Guid?), string mediaSourceId = default(string), int? index = default(int?), string format = default(string), long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), bool? addVttTimeMap = default(bool?), long? startPositionTicks = default(long?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetSubtitleWithHttpInfoAsync(routeItemId, routeMediaSourceId, routeIndex, routeFormat, itemId, mediaSourceId, index, format, endPositionTicks, copyTimestamps, addVttTimeMap, startPositionTicks, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets subtitles in a specified format. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeItemId">The (route) item id.</param>
        /// <param name="routeMediaSourceId">The (route) media source id.</param>
        /// <param name="routeIndex">The (route) subtitle stream index.</param>
        /// <param name="routeFormat">The (route) format of the returned subtitle.</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="index">The subtitle stream index. (optional)</param>
        /// <param name="format">The format of the returned subtitle. (optional)</param>
        /// <param name="endPositionTicks">Optional. The end position of the subtitle in ticks. (optional)</param>
        /// <param name="copyTimestamps">Optional. Whether to copy the timestamps. (optional, default to false)</param>
        /// <param name="addVttTimeMap">Optional. Whether to add a VTT time map. (optional, default to false)</param>
        /// <param name="startPositionTicks">The start position of the subtitle in ticks. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetSubtitleWithHttpInfoAsync (Guid routeItemId, string routeMediaSourceId, int routeIndex, string routeFormat, Guid? itemId = default(Guid?), string mediaSourceId = default(string), int? index = default(int?), string format = default(string), long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), bool? addVttTimeMap = default(bool?), long? startPositionTicks = default(long?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'routeItemId' is set
            if (routeItemId == null)
                throw new ApiException(400, "Missing required parameter 'routeItemId' when calling SubtitleApi->GetSubtitle");
            // verify the required parameter 'routeMediaSourceId' is set
            if (routeMediaSourceId == null)
                throw new ApiException(400, "Missing required parameter 'routeMediaSourceId' when calling SubtitleApi->GetSubtitle");
            // verify the required parameter 'routeIndex' is set
            if (routeIndex == null)
                throw new ApiException(400, "Missing required parameter 'routeIndex' when calling SubtitleApi->GetSubtitle");
            // verify the required parameter 'routeFormat' is set
            if (routeFormat == null)
                throw new ApiException(400, "Missing required parameter 'routeFormat' when calling SubtitleApi->GetSubtitle");

            var localVarPath = "/Videos/{routeItemId}/{routeMediaSourceId}/Subtitles/{routeIndex}/Stream.{routeFormat}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/_*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (routeItemId != null) localVarPathParams.Add("routeItemId", this.Configuration.ApiClient.ParameterToString(routeItemId)); // path parameter
            if (routeMediaSourceId != null) localVarPathParams.Add("routeMediaSourceId", this.Configuration.ApiClient.ParameterToString(routeMediaSourceId)); // path parameter
            if (routeIndex != null) localVarPathParams.Add("routeIndex", this.Configuration.ApiClient.ParameterToString(routeIndex)); // path parameter
            if (routeFormat != null) localVarPathParams.Add("routeFormat", this.Configuration.ApiClient.ParameterToString(routeFormat)); // path parameter
            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemId", itemId)); // query parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "index", index)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (endPositionTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endPositionTicks", endPositionTicks)); // query parameter
            if (copyTimestamps != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "copyTimestamps", copyTimestamps)); // query parameter
            if (addVttTimeMap != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addVttTimeMap", addVttTimeMap)); // query parameter
            if (startPositionTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startPositionTicks", startPositionTicks)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubtitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets an HLS subtitle playlist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="index">The subtitle stream index.</param>
        /// <param name="mediaSourceId">The media source id.</param>
        /// <param name="segmentLength">The subtitle segment length.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetSubtitlePlaylist (Guid itemId, int index, string mediaSourceId, int segmentLength)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetSubtitlePlaylistWithHttpInfo(itemId, index, mediaSourceId, segmentLength);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets an HLS subtitle playlist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="index">The subtitle stream index.</param>
        /// <param name="mediaSourceId">The media source id.</param>
        /// <param name="segmentLength">The subtitle segment length.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetSubtitlePlaylistWithHttpInfo (Guid itemId, int index, string mediaSourceId, int segmentLength)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling SubtitleApi->GetSubtitlePlaylist");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling SubtitleApi->GetSubtitlePlaylist");
            // verify the required parameter 'mediaSourceId' is set
            if (mediaSourceId == null)
                throw new ApiException(400, "Missing required parameter 'mediaSourceId' when calling SubtitleApi->GetSubtitlePlaylist");
            // verify the required parameter 'segmentLength' is set
            if (segmentLength == null)
                throw new ApiException(400, "Missing required parameter 'segmentLength' when calling SubtitleApi->GetSubtitlePlaylist");

            var localVarPath = "/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/subtitles.m3u8";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/x-mpegURL"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (mediaSourceId != null) localVarPathParams.Add("mediaSourceId", this.Configuration.ApiClient.ParameterToString(mediaSourceId)); // path parameter
            if (segmentLength != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segmentLength", segmentLength)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubtitlePlaylist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets an HLS subtitle playlist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="index">The subtitle stream index.</param>
        /// <param name="mediaSourceId">The media source id.</param>
        /// <param name="segmentLength">The subtitle segment length.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetSubtitlePlaylistAsync (Guid itemId, int index, string mediaSourceId, int segmentLength, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetSubtitlePlaylistWithHttpInfoAsync(itemId, index, mediaSourceId, segmentLength, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets an HLS subtitle playlist. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="index">The subtitle stream index.</param>
        /// <param name="mediaSourceId">The media source id.</param>
        /// <param name="segmentLength">The subtitle segment length.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetSubtitlePlaylistWithHttpInfoAsync (Guid itemId, int index, string mediaSourceId, int segmentLength, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling SubtitleApi->GetSubtitlePlaylist");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling SubtitleApi->GetSubtitlePlaylist");
            // verify the required parameter 'mediaSourceId' is set
            if (mediaSourceId == null)
                throw new ApiException(400, "Missing required parameter 'mediaSourceId' when calling SubtitleApi->GetSubtitlePlaylist");
            // verify the required parameter 'segmentLength' is set
            if (segmentLength == null)
                throw new ApiException(400, "Missing required parameter 'segmentLength' when calling SubtitleApi->GetSubtitlePlaylist");

            var localVarPath = "/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/subtitles.m3u8";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/x-mpegURL"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (mediaSourceId != null) localVarPathParams.Add("mediaSourceId", this.Configuration.ApiClient.ParameterToString(mediaSourceId)); // path parameter
            if (segmentLength != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segmentLength", segmentLength)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubtitlePlaylist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets subtitles in a specified format. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeItemId">The (route) item id.</param>
        /// <param name="routeMediaSourceId">The (route) media source id.</param>
        /// <param name="routeIndex">The (route) subtitle stream index.</param>
        /// <param name="routeStartPositionTicks">The (route) start position of the subtitle in ticks.</param>
        /// <param name="routeFormat">The (route) format of the returned subtitle.</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="index">The subtitle stream index. (optional)</param>
        /// <param name="startPositionTicks">The start position of the subtitle in ticks. (optional)</param>
        /// <param name="format">The format of the returned subtitle. (optional)</param>
        /// <param name="endPositionTicks">Optional. The end position of the subtitle in ticks. (optional)</param>
        /// <param name="copyTimestamps">Optional. Whether to copy the timestamps. (optional, default to false)</param>
        /// <param name="addVttTimeMap">Optional. Whether to add a VTT time map. (optional, default to false)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetSubtitleWithTicks (Guid routeItemId, string routeMediaSourceId, int routeIndex, long routeStartPositionTicks, string routeFormat, Guid? itemId = default(Guid?), string mediaSourceId = default(string), int? index = default(int?), long? startPositionTicks = default(long?), string format = default(string), long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), bool? addVttTimeMap = default(bool?))
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetSubtitleWithTicksWithHttpInfo(routeItemId, routeMediaSourceId, routeIndex, routeStartPositionTicks, routeFormat, itemId, mediaSourceId, index, startPositionTicks, format, endPositionTicks, copyTimestamps, addVttTimeMap);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets subtitles in a specified format. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeItemId">The (route) item id.</param>
        /// <param name="routeMediaSourceId">The (route) media source id.</param>
        /// <param name="routeIndex">The (route) subtitle stream index.</param>
        /// <param name="routeStartPositionTicks">The (route) start position of the subtitle in ticks.</param>
        /// <param name="routeFormat">The (route) format of the returned subtitle.</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="index">The subtitle stream index. (optional)</param>
        /// <param name="startPositionTicks">The start position of the subtitle in ticks. (optional)</param>
        /// <param name="format">The format of the returned subtitle. (optional)</param>
        /// <param name="endPositionTicks">Optional. The end position of the subtitle in ticks. (optional)</param>
        /// <param name="copyTimestamps">Optional. Whether to copy the timestamps. (optional, default to false)</param>
        /// <param name="addVttTimeMap">Optional. Whether to add a VTT time map. (optional, default to false)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetSubtitleWithTicksWithHttpInfo (Guid routeItemId, string routeMediaSourceId, int routeIndex, long routeStartPositionTicks, string routeFormat, Guid? itemId = default(Guid?), string mediaSourceId = default(string), int? index = default(int?), long? startPositionTicks = default(long?), string format = default(string), long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), bool? addVttTimeMap = default(bool?))
        {
            // verify the required parameter 'routeItemId' is set
            if (routeItemId == null)
                throw new ApiException(400, "Missing required parameter 'routeItemId' when calling SubtitleApi->GetSubtitleWithTicks");
            // verify the required parameter 'routeMediaSourceId' is set
            if (routeMediaSourceId == null)
                throw new ApiException(400, "Missing required parameter 'routeMediaSourceId' when calling SubtitleApi->GetSubtitleWithTicks");
            // verify the required parameter 'routeIndex' is set
            if (routeIndex == null)
                throw new ApiException(400, "Missing required parameter 'routeIndex' when calling SubtitleApi->GetSubtitleWithTicks");
            // verify the required parameter 'routeStartPositionTicks' is set
            if (routeStartPositionTicks == null)
                throw new ApiException(400, "Missing required parameter 'routeStartPositionTicks' when calling SubtitleApi->GetSubtitleWithTicks");
            // verify the required parameter 'routeFormat' is set
            if (routeFormat == null)
                throw new ApiException(400, "Missing required parameter 'routeFormat' when calling SubtitleApi->GetSubtitleWithTicks");

            var localVarPath = "/Videos/{routeItemId}/{routeMediaSourceId}/Subtitles/{routeIndex}/{routeStartPositionTicks}/Stream.{routeFormat}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/_*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (routeItemId != null) localVarPathParams.Add("routeItemId", this.Configuration.ApiClient.ParameterToString(routeItemId)); // path parameter
            if (routeMediaSourceId != null) localVarPathParams.Add("routeMediaSourceId", this.Configuration.ApiClient.ParameterToString(routeMediaSourceId)); // path parameter
            if (routeIndex != null) localVarPathParams.Add("routeIndex", this.Configuration.ApiClient.ParameterToString(routeIndex)); // path parameter
            if (routeStartPositionTicks != null) localVarPathParams.Add("routeStartPositionTicks", this.Configuration.ApiClient.ParameterToString(routeStartPositionTicks)); // path parameter
            if (routeFormat != null) localVarPathParams.Add("routeFormat", this.Configuration.ApiClient.ParameterToString(routeFormat)); // path parameter
            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemId", itemId)); // query parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "index", index)); // query parameter
            if (startPositionTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startPositionTicks", startPositionTicks)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (endPositionTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endPositionTicks", endPositionTicks)); // query parameter
            if (copyTimestamps != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "copyTimestamps", copyTimestamps)); // query parameter
            if (addVttTimeMap != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addVttTimeMap", addVttTimeMap)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubtitleWithTicks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets subtitles in a specified format. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeItemId">The (route) item id.</param>
        /// <param name="routeMediaSourceId">The (route) media source id.</param>
        /// <param name="routeIndex">The (route) subtitle stream index.</param>
        /// <param name="routeStartPositionTicks">The (route) start position of the subtitle in ticks.</param>
        /// <param name="routeFormat">The (route) format of the returned subtitle.</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="index">The subtitle stream index. (optional)</param>
        /// <param name="startPositionTicks">The start position of the subtitle in ticks. (optional)</param>
        /// <param name="format">The format of the returned subtitle. (optional)</param>
        /// <param name="endPositionTicks">Optional. The end position of the subtitle in ticks. (optional)</param>
        /// <param name="copyTimestamps">Optional. Whether to copy the timestamps. (optional, default to false)</param>
        /// <param name="addVttTimeMap">Optional. Whether to add a VTT time map. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetSubtitleWithTicksAsync (Guid routeItemId, string routeMediaSourceId, int routeIndex, long routeStartPositionTicks, string routeFormat, Guid? itemId = default(Guid?), string mediaSourceId = default(string), int? index = default(int?), long? startPositionTicks = default(long?), string format = default(string), long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), bool? addVttTimeMap = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetSubtitleWithTicksWithHttpInfoAsync(routeItemId, routeMediaSourceId, routeIndex, routeStartPositionTicks, routeFormat, itemId, mediaSourceId, index, startPositionTicks, format, endPositionTicks, copyTimestamps, addVttTimeMap, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets subtitles in a specified format. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeItemId">The (route) item id.</param>
        /// <param name="routeMediaSourceId">The (route) media source id.</param>
        /// <param name="routeIndex">The (route) subtitle stream index.</param>
        /// <param name="routeStartPositionTicks">The (route) start position of the subtitle in ticks.</param>
        /// <param name="routeFormat">The (route) format of the returned subtitle.</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="index">The subtitle stream index. (optional)</param>
        /// <param name="startPositionTicks">The start position of the subtitle in ticks. (optional)</param>
        /// <param name="format">The format of the returned subtitle. (optional)</param>
        /// <param name="endPositionTicks">Optional. The end position of the subtitle in ticks. (optional)</param>
        /// <param name="copyTimestamps">Optional. Whether to copy the timestamps. (optional, default to false)</param>
        /// <param name="addVttTimeMap">Optional. Whether to add a VTT time map. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetSubtitleWithTicksWithHttpInfoAsync (Guid routeItemId, string routeMediaSourceId, int routeIndex, long routeStartPositionTicks, string routeFormat, Guid? itemId = default(Guid?), string mediaSourceId = default(string), int? index = default(int?), long? startPositionTicks = default(long?), string format = default(string), long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), bool? addVttTimeMap = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'routeItemId' is set
            if (routeItemId == null)
                throw new ApiException(400, "Missing required parameter 'routeItemId' when calling SubtitleApi->GetSubtitleWithTicks");
            // verify the required parameter 'routeMediaSourceId' is set
            if (routeMediaSourceId == null)
                throw new ApiException(400, "Missing required parameter 'routeMediaSourceId' when calling SubtitleApi->GetSubtitleWithTicks");
            // verify the required parameter 'routeIndex' is set
            if (routeIndex == null)
                throw new ApiException(400, "Missing required parameter 'routeIndex' when calling SubtitleApi->GetSubtitleWithTicks");
            // verify the required parameter 'routeStartPositionTicks' is set
            if (routeStartPositionTicks == null)
                throw new ApiException(400, "Missing required parameter 'routeStartPositionTicks' when calling SubtitleApi->GetSubtitleWithTicks");
            // verify the required parameter 'routeFormat' is set
            if (routeFormat == null)
                throw new ApiException(400, "Missing required parameter 'routeFormat' when calling SubtitleApi->GetSubtitleWithTicks");

            var localVarPath = "/Videos/{routeItemId}/{routeMediaSourceId}/Subtitles/{routeIndex}/{routeStartPositionTicks}/Stream.{routeFormat}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/_*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (routeItemId != null) localVarPathParams.Add("routeItemId", this.Configuration.ApiClient.ParameterToString(routeItemId)); // path parameter
            if (routeMediaSourceId != null) localVarPathParams.Add("routeMediaSourceId", this.Configuration.ApiClient.ParameterToString(routeMediaSourceId)); // path parameter
            if (routeIndex != null) localVarPathParams.Add("routeIndex", this.Configuration.ApiClient.ParameterToString(routeIndex)); // path parameter
            if (routeStartPositionTicks != null) localVarPathParams.Add("routeStartPositionTicks", this.Configuration.ApiClient.ParameterToString(routeStartPositionTicks)); // path parameter
            if (routeFormat != null) localVarPathParams.Add("routeFormat", this.Configuration.ApiClient.ParameterToString(routeFormat)); // path parameter
            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemId", itemId)); // query parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "index", index)); // query parameter
            if (startPositionTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startPositionTicks", startPositionTicks)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (endPositionTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endPositionTicks", endPositionTicks)); // query parameter
            if (copyTimestamps != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "copyTimestamps", copyTimestamps)); // query parameter
            if (addVttTimeMap != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addVttTimeMap", addVttTimeMap)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubtitleWithTicks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Search remote subtitles. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="language">The language of the subtitles.</param>
        /// <param name="isPerfectMatch">Optional. Only show subtitles which are a perfect match. (optional)</param>
        /// <returns>List&lt;RemoteSubtitleInfo&gt;</returns>
        public List<RemoteSubtitleInfo> SearchRemoteSubtitles (Guid itemId, string language, bool? isPerfectMatch = default(bool?))
        {
             ApiResponse<List<RemoteSubtitleInfo>> localVarResponse = SearchRemoteSubtitlesWithHttpInfo(itemId, language, isPerfectMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search remote subtitles. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="language">The language of the subtitles.</param>
        /// <param name="isPerfectMatch">Optional. Only show subtitles which are a perfect match. (optional)</param>
        /// <returns>ApiResponse of List&lt;RemoteSubtitleInfo&gt;</returns>
        public ApiResponse<List<RemoteSubtitleInfo>> SearchRemoteSubtitlesWithHttpInfo (Guid itemId, string language, bool? isPerfectMatch = default(bool?))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling SubtitleApi->SearchRemoteSubtitles");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling SubtitleApi->SearchRemoteSubtitles");

            var localVarPath = "/Items/{itemId}/RemoteSearch/Subtitles/{language}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (language != null) localVarPathParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // path parameter
            if (isPerfectMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isPerfectMatch", isPerfectMatch)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchRemoteSubtitles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RemoteSubtitleInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RemoteSubtitleInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RemoteSubtitleInfo>)));
        }

        /// <summary>
        /// Search remote subtitles. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="language">The language of the subtitles.</param>
        /// <param name="isPerfectMatch">Optional. Only show subtitles which are a perfect match. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;RemoteSubtitleInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<RemoteSubtitleInfo>> SearchRemoteSubtitlesAsync (Guid itemId, string language, bool? isPerfectMatch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<RemoteSubtitleInfo>> localVarResponse = await SearchRemoteSubtitlesWithHttpInfoAsync(itemId, language, isPerfectMatch, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search remote subtitles. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="language">The language of the subtitles.</param>
        /// <param name="isPerfectMatch">Optional. Only show subtitles which are a perfect match. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;RemoteSubtitleInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RemoteSubtitleInfo>>> SearchRemoteSubtitlesWithHttpInfoAsync (Guid itemId, string language, bool? isPerfectMatch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling SubtitleApi->SearchRemoteSubtitles");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling SubtitleApi->SearchRemoteSubtitles");

            var localVarPath = "/Items/{itemId}/RemoteSearch/Subtitles/{language}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (language != null) localVarPathParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // path parameter
            if (isPerfectMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isPerfectMatch", isPerfectMatch)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchRemoteSubtitles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RemoteSubtitleInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RemoteSubtitleInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RemoteSubtitleInfo>)));
        }

        /// <summary>
        /// Upload an external subtitle file. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item the subtitle belongs to.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The request body.</param>
        /// <returns></returns>
        public void UploadSubtitle (Guid itemId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
             UploadSubtitleWithHttpInfo(itemId, UNKNOWN_BASE_TYPE);
        }

        /// <summary>
        /// Upload an external subtitle file. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item the subtitle belongs to.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The request body.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UploadSubtitleWithHttpInfo (Guid itemId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling SubtitleApi->UploadSubtitle");
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling SubtitleApi->UploadSubtitle");

            var localVarPath = "/Videos/{itemId}/Subtitles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadSubtitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Upload an external subtitle file. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item the subtitle belongs to.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The request body.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UploadSubtitleAsync (Guid itemId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UploadSubtitleWithHttpInfoAsync(itemId, UNKNOWN_BASE_TYPE, cancellationToken);

        }

        /// <summary>
        /// Upload an external subtitle file. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item the subtitle belongs to.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The request body.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UploadSubtitleWithHttpInfoAsync (Guid itemId, UploadSubtitleDto uploadSubtitleDto, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling SubtitleApi->UploadSubtitle");
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (uploadSubtitleDto == null)
                throw new ApiException(400, "Missing required parameter 'uploadSubtitleDto' when calling SubtitleApi->UploadSubtitle");

            var localVarPath = "/Videos/{itemId}/Subtitles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (uploadSubtitleDto != null && uploadSubtitleDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(uploadSubtitleDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uploadSubtitleDto; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadSubtitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
