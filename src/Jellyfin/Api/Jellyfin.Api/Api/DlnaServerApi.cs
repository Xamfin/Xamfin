/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Jellyfin.Api.Client;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDlnaServerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetConnectionManager (string serverId);

        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetConnectionManagerWithHttpInfo (string serverId);
        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetConnectionManager2 (string serverId);

        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetConnectionManager2WithHttpInfo (string serverId);
        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetConnectionManager3 (string serverId);

        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetConnectionManager3WithHttpInfo (string serverId);
        /// <summary>
        /// Gets Dlna content directory xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetContentDirectory (string serverId);

        /// <summary>
        /// Gets Dlna content directory xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetContentDirectoryWithHttpInfo (string serverId);
        /// <summary>
        /// Gets Dlna content directory xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetContentDirectory2 (string serverId);

        /// <summary>
        /// Gets Dlna content directory xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetContentDirectory2WithHttpInfo (string serverId);
        /// <summary>
        /// Gets Dlna content directory xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetContentDirectory3 (string serverId);

        /// <summary>
        /// Gets Dlna content directory xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetContentDirectory3WithHttpInfo (string serverId);
        /// <summary>
        /// Get Description Xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDescriptionXml (string serverId);

        /// <summary>
        /// Get Description Xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDescriptionXmlWithHttpInfo (string serverId);
        /// <summary>
        /// Get Description Xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDescriptionXml2 (string serverId);

        /// <summary>
        /// Get Description Xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDescriptionXml2WithHttpInfo (string serverId);
        /// <summary>
        /// Gets a server icon.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileName">The icon filename.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetIcon (string fileName);

        /// <summary>
        /// Gets a server icon.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileName">The icon filename.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetIconWithHttpInfo (string fileName);
        /// <summary>
        /// Gets a server icon.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="fileName">The icon filename.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetIconId (string serverId, string fileName);

        /// <summary>
        /// Gets a server icon.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="fileName">The icon filename.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetIconIdWithHttpInfo (string serverId, string fileName);
        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetMediaReceiverRegistrar (string serverId);

        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetMediaReceiverRegistrarWithHttpInfo (string serverId);
        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetMediaReceiverRegistrar2 (string serverId);

        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetMediaReceiverRegistrar2WithHttpInfo (string serverId);
        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetMediaReceiverRegistrar3 (string serverId);

        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetMediaReceiverRegistrar3WithHttpInfo (string serverId);
        /// <summary>
        /// Process a connection manager control request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ProcessConnectionManagerControlRequest (string serverId);

        /// <summary>
        /// Process a connection manager control request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ProcessConnectionManagerControlRequestWithHttpInfo (string serverId);
        /// <summary>
        /// Process a content directory control request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ProcessContentDirectoryControlRequest (string serverId);

        /// <summary>
        /// Process a content directory control request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ProcessContentDirectoryControlRequestWithHttpInfo (string serverId);
        /// <summary>
        /// Process a media receiver registrar control request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ProcessMediaReceiverRegistrarControlRequest (string serverId);

        /// <summary>
        /// Process a media receiver registrar control request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ProcessMediaReceiverRegistrarControlRequestWithHttpInfo (string serverId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetConnectionManagerAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetConnectionManagerWithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetConnectionManager2Async (string serverId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetConnectionManager2WithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetConnectionManager3Async (string serverId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetConnectionManager3WithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets Dlna content directory xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetContentDirectoryAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Dlna content directory xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetContentDirectoryWithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets Dlna content directory xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetContentDirectory2Async (string serverId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Dlna content directory xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetContentDirectory2WithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets Dlna content directory xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetContentDirectory3Async (string serverId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Dlna content directory xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetContentDirectory3WithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Description Xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDescriptionXmlAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Description Xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDescriptionXmlWithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Description Xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDescriptionXml2Async (string serverId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Description Xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDescriptionXml2WithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a server icon.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileName">The icon filename.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetIconAsync (string fileName, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a server icon.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileName">The icon filename.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetIconWithHttpInfoAsync (string fileName, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a server icon.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="fileName">The icon filename.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetIconIdAsync (string serverId, string fileName, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a server icon.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="fileName">The icon filename.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetIconIdWithHttpInfoAsync (string serverId, string fileName, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetMediaReceiverRegistrarAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetMediaReceiverRegistrarWithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetMediaReceiverRegistrar2Async (string serverId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetMediaReceiverRegistrar2WithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetMediaReceiverRegistrar3Async (string serverId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Dlna media receiver registrar xml.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetMediaReceiverRegistrar3WithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Process a connection manager control request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ProcessConnectionManagerControlRequestAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Process a connection manager control request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ProcessConnectionManagerControlRequestWithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Process a content directory control request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ProcessContentDirectoryControlRequestAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Process a content directory control request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ProcessContentDirectoryControlRequestWithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Process a media receiver registrar control request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ProcessMediaReceiverRegistrarControlRequestAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Process a media receiver registrar control request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ProcessMediaReceiverRegistrarControlRequestWithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DlnaServerApi : IDlnaServerApi
    {
        private Jellyfin.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DlnaServerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DlnaServerApi(String basePath)
        {
            this.Configuration = new Jellyfin.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DlnaServerApi"/> class
        /// </summary>
        /// <returns></returns>
        public DlnaServerApi()
        {
            this.Configuration = Jellyfin.Api.Client.Configuration.Default;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DlnaServerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DlnaServerApi(Jellyfin.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Jellyfin.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Jellyfin.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Jellyfin.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetConnectionManager (string serverId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetConnectionManagerWithHttpInfo(serverId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetConnectionManagerWithHttpInfo (string serverId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetConnectionManager");

            var localVarPath = "/Dlna/{serverId}/ConnectionManager";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnectionManager", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetConnectionManagerAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetConnectionManagerWithHttpInfoAsync(serverId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetConnectionManagerWithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetConnectionManager");

            var localVarPath = "/Dlna/{serverId}/ConnectionManager";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnectionManager", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetConnectionManager2 (string serverId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetConnectionManager2WithHttpInfo(serverId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetConnectionManager2WithHttpInfo (string serverId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetConnectionManager2");

            var localVarPath = "/Dlna/{serverId}/ConnectionManager/ConnectionManager";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnectionManager2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetConnectionManager2Async (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetConnectionManager2WithHttpInfoAsync(serverId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetConnectionManager2WithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetConnectionManager2");

            var localVarPath = "/Dlna/{serverId}/ConnectionManager/ConnectionManager";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnectionManager2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetConnectionManager3 (string serverId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetConnectionManager3WithHttpInfo(serverId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetConnectionManager3WithHttpInfo (string serverId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetConnectionManager3");

            var localVarPath = "/Dlna/{serverId}/ConnectionManager/ConnectionManager.xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnectionManager3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetConnectionManager3Async (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetConnectionManager3WithHttpInfoAsync(serverId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetConnectionManager3WithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetConnectionManager3");

            var localVarPath = "/Dlna/{serverId}/ConnectionManager/ConnectionManager.xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnectionManager3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets Dlna content directory xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetContentDirectory (string serverId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetContentDirectoryWithHttpInfo(serverId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Dlna content directory xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetContentDirectoryWithHttpInfo (string serverId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetContentDirectory");

            var localVarPath = "/Dlna/{serverId}/ContentDirectory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentDirectory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets Dlna content directory xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetContentDirectoryAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetContentDirectoryWithHttpInfoAsync(serverId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Dlna content directory xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetContentDirectoryWithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetContentDirectory");

            var localVarPath = "/Dlna/{serverId}/ContentDirectory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentDirectory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets Dlna content directory xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetContentDirectory2 (string serverId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetContentDirectory2WithHttpInfo(serverId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Dlna content directory xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetContentDirectory2WithHttpInfo (string serverId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetContentDirectory2");

            var localVarPath = "/Dlna/{serverId}/ContentDirectory/ContentDirectory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentDirectory2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets Dlna content directory xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetContentDirectory2Async (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetContentDirectory2WithHttpInfoAsync(serverId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Dlna content directory xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetContentDirectory2WithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetContentDirectory2");

            var localVarPath = "/Dlna/{serverId}/ContentDirectory/ContentDirectory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentDirectory2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets Dlna content directory xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetContentDirectory3 (string serverId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetContentDirectory3WithHttpInfo(serverId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Dlna content directory xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetContentDirectory3WithHttpInfo (string serverId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetContentDirectory3");

            var localVarPath = "/Dlna/{serverId}/ContentDirectory/ContentDirectory.xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentDirectory3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets Dlna content directory xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetContentDirectory3Async (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetContentDirectory3WithHttpInfoAsync(serverId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Dlna content directory xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetContentDirectory3WithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetContentDirectory3");

            var localVarPath = "/Dlna/{serverId}/ContentDirectory/ContentDirectory.xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentDirectory3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Description Xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDescriptionXml (string serverId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetDescriptionXmlWithHttpInfo(serverId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Description Xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetDescriptionXmlWithHttpInfo (string serverId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetDescriptionXml");

            var localVarPath = "/Dlna/{serverId}/description";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDescriptionXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Description Xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDescriptionXmlAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetDescriptionXmlWithHttpInfoAsync(serverId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Description Xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDescriptionXmlWithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetDescriptionXml");

            var localVarPath = "/Dlna/{serverId}/description";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDescriptionXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Description Xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDescriptionXml2 (string serverId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetDescriptionXml2WithHttpInfo(serverId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Description Xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetDescriptionXml2WithHttpInfo (string serverId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetDescriptionXml2");

            var localVarPath = "/Dlna/{serverId}/description.xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDescriptionXml2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Description Xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDescriptionXml2Async (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetDescriptionXml2WithHttpInfoAsync(serverId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Description Xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDescriptionXml2WithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetDescriptionXml2");

            var localVarPath = "/Dlna/{serverId}/description.xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDescriptionXml2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets a server icon. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileName">The icon filename.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetIcon (string fileName)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetIconWithHttpInfo(fileName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a server icon. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileName">The icon filename.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetIconWithHttpInfo (string fileName)
        {
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling DlnaServerApi->GetIcon");

            var localVarPath = "/Dlna/icons/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileName != null) localVarPathParams.Add("fileName", this.Configuration.ApiClient.ParameterToString(fileName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIcon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets a server icon. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileName">The icon filename.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetIconAsync (string fileName, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetIconWithHttpInfoAsync(fileName, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a server icon. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileName">The icon filename.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetIconWithHttpInfoAsync (string fileName, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling DlnaServerApi->GetIcon");

            var localVarPath = "/Dlna/icons/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileName != null) localVarPathParams.Add("fileName", this.Configuration.ApiClient.ParameterToString(fileName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIcon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets a server icon. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="fileName">The icon filename.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetIconId (string serverId, string fileName)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetIconIdWithHttpInfo(serverId, fileName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a server icon. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="fileName">The icon filename.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetIconIdWithHttpInfo (string serverId, string fileName)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetIconId");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling DlnaServerApi->GetIconId");

            var localVarPath = "/Dlna/{serverId}/icons/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", this.Configuration.ApiClient.ParameterToString(fileName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIconId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets a server icon. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="fileName">The icon filename.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetIconIdAsync (string serverId, string fileName, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetIconIdWithHttpInfoAsync(serverId, fileName, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a server icon. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="fileName">The icon filename.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetIconIdWithHttpInfoAsync (string serverId, string fileName, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetIconId");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling DlnaServerApi->GetIconId");

            var localVarPath = "/Dlna/{serverId}/icons/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/_*",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", this.Configuration.ApiClient.ParameterToString(fileName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIconId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetMediaReceiverRegistrar (string serverId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetMediaReceiverRegistrarWithHttpInfo(serverId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetMediaReceiverRegistrarWithHttpInfo (string serverId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetMediaReceiverRegistrar");

            var localVarPath = "/Dlna/{serverId}/MediaReceiverRegistrar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMediaReceiverRegistrar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetMediaReceiverRegistrarAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetMediaReceiverRegistrarWithHttpInfoAsync(serverId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetMediaReceiverRegistrarWithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetMediaReceiverRegistrar");

            var localVarPath = "/Dlna/{serverId}/MediaReceiverRegistrar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMediaReceiverRegistrar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetMediaReceiverRegistrar2 (string serverId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetMediaReceiverRegistrar2WithHttpInfo(serverId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetMediaReceiverRegistrar2WithHttpInfo (string serverId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetMediaReceiverRegistrar2");

            var localVarPath = "/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMediaReceiverRegistrar2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetMediaReceiverRegistrar2Async (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetMediaReceiverRegistrar2WithHttpInfoAsync(serverId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetMediaReceiverRegistrar2WithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetMediaReceiverRegistrar2");

            var localVarPath = "/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMediaReceiverRegistrar2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetMediaReceiverRegistrar3 (string serverId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetMediaReceiverRegistrar3WithHttpInfo(serverId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetMediaReceiverRegistrar3WithHttpInfo (string serverId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetMediaReceiverRegistrar3");

            var localVarPath = "/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar.xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMediaReceiverRegistrar3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetMediaReceiverRegistrar3Async (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetMediaReceiverRegistrar3WithHttpInfoAsync(serverId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Dlna media receiver registrar xml. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetMediaReceiverRegistrar3WithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->GetMediaReceiverRegistrar3");

            var localVarPath = "/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar.xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMediaReceiverRegistrar3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Process a connection manager control request. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ProcessConnectionManagerControlRequest (string serverId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = ProcessConnectionManagerControlRequestWithHttpInfo(serverId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Process a connection manager control request. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> ProcessConnectionManagerControlRequestWithHttpInfo (string serverId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->ProcessConnectionManagerControlRequest");

            var localVarPath = "/Dlna/{serverId}/ConnectionManager/Control";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessConnectionManagerControlRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Process a connection manager control request. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ProcessConnectionManagerControlRequestAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await ProcessConnectionManagerControlRequestWithHttpInfoAsync(serverId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Process a connection manager control request. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ProcessConnectionManagerControlRequestWithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->ProcessConnectionManagerControlRequest");

            var localVarPath = "/Dlna/{serverId}/ConnectionManager/Control";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessConnectionManagerControlRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Process a content directory control request. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ProcessContentDirectoryControlRequest (string serverId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = ProcessContentDirectoryControlRequestWithHttpInfo(serverId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Process a content directory control request. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> ProcessContentDirectoryControlRequestWithHttpInfo (string serverId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->ProcessContentDirectoryControlRequest");

            var localVarPath = "/Dlna/{serverId}/ContentDirectory/Control";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessContentDirectoryControlRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Process a content directory control request. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ProcessContentDirectoryControlRequestAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await ProcessContentDirectoryControlRequestWithHttpInfoAsync(serverId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Process a content directory control request. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ProcessContentDirectoryControlRequestWithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->ProcessContentDirectoryControlRequest");

            var localVarPath = "/Dlna/{serverId}/ContentDirectory/Control";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessContentDirectoryControlRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Process a media receiver registrar control request. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ProcessMediaReceiverRegistrarControlRequest (string serverId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = ProcessMediaReceiverRegistrarControlRequestWithHttpInfo(serverId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Process a media receiver registrar control request. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> ProcessMediaReceiverRegistrarControlRequestWithHttpInfo (string serverId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->ProcessMediaReceiverRegistrarControlRequest");

            var localVarPath = "/Dlna/{serverId}/MediaReceiverRegistrar/Control";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessMediaReceiverRegistrarControlRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Process a media receiver registrar control request. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ProcessMediaReceiverRegistrarControlRequestAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await ProcessMediaReceiverRegistrarControlRequestWithHttpInfoAsync(serverId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Process a media receiver registrar control request. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">Server UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ProcessMediaReceiverRegistrarControlRequestWithHttpInfoAsync (string serverId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling DlnaServerApi->ProcessMediaReceiverRegistrarControlRequest");

            var localVarPath = "/Dlna/{serverId}/MediaReceiverRegistrar/Control";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("serverId", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessMediaReceiverRegistrarControlRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

    }
}
