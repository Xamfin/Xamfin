/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Jellyfin.Api.Client;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilterApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets query filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User id. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)</param>
        /// <param name="isAiring">Optional. Is item airing. (optional)</param>
        /// <param name="isMovie">Optional. Is item movie. (optional)</param>
        /// <param name="isSports">Optional. Is item sports. (optional)</param>
        /// <param name="isKids">Optional. Is item kids. (optional)</param>
        /// <param name="isNews">Optional. Is item news. (optional)</param>
        /// <param name="isSeries">Optional. Is item series. (optional)</param>
        /// <param name="recursive">Optional. Search recursive. (optional)</param>
        /// <returns>QueryFilters</returns>
        QueryFilters GetQueryFilters (Guid? userId = default(Guid?), Guid? parentId = default(Guid?), List<string> includeItemTypes = default(List<string>), bool? isAiring = default(bool?), bool? isMovie = default(bool?), bool? isSports = default(bool?), bool? isKids = default(bool?), bool? isNews = default(bool?), bool? isSeries = default(bool?), bool? recursive = default(bool?));

        /// <summary>
        /// Gets query filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User id. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)</param>
        /// <param name="isAiring">Optional. Is item airing. (optional)</param>
        /// <param name="isMovie">Optional. Is item movie. (optional)</param>
        /// <param name="isSports">Optional. Is item sports. (optional)</param>
        /// <param name="isKids">Optional. Is item kids. (optional)</param>
        /// <param name="isNews">Optional. Is item news. (optional)</param>
        /// <param name="isSeries">Optional. Is item series. (optional)</param>
        /// <param name="recursive">Optional. Search recursive. (optional)</param>
        /// <returns>ApiResponse of QueryFilters</returns>
        ApiResponse<QueryFilters> GetQueryFiltersWithHttpInfo (Guid? userId = default(Guid?), Guid? parentId = default(Guid?), List<string> includeItemTypes = default(List<string>), bool? isAiring = default(bool?), bool? isMovie = default(bool?), bool? isSports = default(bool?), bool? isKids = default(bool?), bool? isNews = default(bool?), bool? isSeries = default(bool?), bool? recursive = default(bool?));
        /// <summary>
        /// Gets legacy query filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User id. (optional)</param>
        /// <param name="parentId">Optional. Parent id. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)</param>
        /// <param name="mediaTypes">Optional. Filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <returns>QueryFiltersLegacy</returns>
        QueryFiltersLegacy GetQueryFiltersLegacy (Guid? userId = default(Guid?), Guid? parentId = default(Guid?), List<string> includeItemTypes = default(List<string>), List<string> mediaTypes = default(List<string>));

        /// <summary>
        /// Gets legacy query filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User id. (optional)</param>
        /// <param name="parentId">Optional. Parent id. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)</param>
        /// <param name="mediaTypes">Optional. Filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <returns>ApiResponse of QueryFiltersLegacy</returns>
        ApiResponse<QueryFiltersLegacy> GetQueryFiltersLegacyWithHttpInfo (Guid? userId = default(Guid?), Guid? parentId = default(Guid?), List<string> includeItemTypes = default(List<string>), List<string> mediaTypes = default(List<string>));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets query filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User id. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)</param>
        /// <param name="isAiring">Optional. Is item airing. (optional)</param>
        /// <param name="isMovie">Optional. Is item movie. (optional)</param>
        /// <param name="isSports">Optional. Is item sports. (optional)</param>
        /// <param name="isKids">Optional. Is item kids. (optional)</param>
        /// <param name="isNews">Optional. Is item news. (optional)</param>
        /// <param name="isSeries">Optional. Is item series. (optional)</param>
        /// <param name="recursive">Optional. Search recursive. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of QueryFilters</returns>
        System.Threading.Tasks.Task<QueryFilters> GetQueryFiltersAsync (Guid? userId = default(Guid?), Guid? parentId = default(Guid?), List<string> includeItemTypes = default(List<string>), bool? isAiring = default(bool?), bool? isMovie = default(bool?), bool? isSports = default(bool?), bool? isKids = default(bool?), bool? isNews = default(bool?), bool? isSeries = default(bool?), bool? recursive = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets query filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User id. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)</param>
        /// <param name="isAiring">Optional. Is item airing. (optional)</param>
        /// <param name="isMovie">Optional. Is item movie. (optional)</param>
        /// <param name="isSports">Optional. Is item sports. (optional)</param>
        /// <param name="isKids">Optional. Is item kids. (optional)</param>
        /// <param name="isNews">Optional. Is item news. (optional)</param>
        /// <param name="isSeries">Optional. Is item series. (optional)</param>
        /// <param name="recursive">Optional. Search recursive. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (QueryFilters)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryFilters>> GetQueryFiltersWithHttpInfoAsync (Guid? userId = default(Guid?), Guid? parentId = default(Guid?), List<string> includeItemTypes = default(List<string>), bool? isAiring = default(bool?), bool? isMovie = default(bool?), bool? isSports = default(bool?), bool? isKids = default(bool?), bool? isNews = default(bool?), bool? isSeries = default(bool?), bool? recursive = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets legacy query filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User id. (optional)</param>
        /// <param name="parentId">Optional. Parent id. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)</param>
        /// <param name="mediaTypes">Optional. Filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of QueryFiltersLegacy</returns>
        System.Threading.Tasks.Task<QueryFiltersLegacy> GetQueryFiltersLegacyAsync (Guid? userId = default(Guid?), Guid? parentId = default(Guid?), List<string> includeItemTypes = default(List<string>), List<string> mediaTypes = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets legacy query filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User id. (optional)</param>
        /// <param name="parentId">Optional. Parent id. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)</param>
        /// <param name="mediaTypes">Optional. Filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (QueryFiltersLegacy)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryFiltersLegacy>> GetQueryFiltersLegacyWithHttpInfoAsync (Guid? userId = default(Guid?), Guid? parentId = default(Guid?), List<string> includeItemTypes = default(List<string>), List<string> mediaTypes = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FilterApi : IFilterApi
    {
        private Jellyfin.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FilterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilterApi(String basePath)
        {
            this.Configuration = new Jellyfin.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilterApi"/> class
        /// </summary>
        /// <returns></returns>
        public FilterApi()
        {
            this.Configuration = Jellyfin.Api.Client.Configuration.Default;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilterApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FilterApi(Jellyfin.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Jellyfin.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Jellyfin.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Jellyfin.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets query filters. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User id. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)</param>
        /// <param name="isAiring">Optional. Is item airing. (optional)</param>
        /// <param name="isMovie">Optional. Is item movie. (optional)</param>
        /// <param name="isSports">Optional. Is item sports. (optional)</param>
        /// <param name="isKids">Optional. Is item kids. (optional)</param>
        /// <param name="isNews">Optional. Is item news. (optional)</param>
        /// <param name="isSeries">Optional. Is item series. (optional)</param>
        /// <param name="recursive">Optional. Search recursive. (optional)</param>
        /// <returns>QueryFilters</returns>
        public QueryFilters GetQueryFilters (Guid? userId = default(Guid?), Guid? parentId = default(Guid?), List<string> includeItemTypes = default(List<string>), bool? isAiring = default(bool?), bool? isMovie = default(bool?), bool? isSports = default(bool?), bool? isKids = default(bool?), bool? isNews = default(bool?), bool? isSeries = default(bool?), bool? recursive = default(bool?))
        {
             ApiResponse<QueryFilters> localVarResponse = GetQueryFiltersWithHttpInfo(userId, parentId, includeItemTypes, isAiring, isMovie, isSports, isKids, isNews, isSeries, recursive);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets query filters. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User id. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)</param>
        /// <param name="isAiring">Optional. Is item airing. (optional)</param>
        /// <param name="isMovie">Optional. Is item movie. (optional)</param>
        /// <param name="isSports">Optional. Is item sports. (optional)</param>
        /// <param name="isKids">Optional. Is item kids. (optional)</param>
        /// <param name="isNews">Optional. Is item news. (optional)</param>
        /// <param name="isSeries">Optional. Is item series. (optional)</param>
        /// <param name="recursive">Optional. Search recursive. (optional)</param>
        /// <returns>ApiResponse of QueryFilters</returns>
        public ApiResponse<QueryFilters> GetQueryFiltersWithHttpInfo (Guid? userId = default(Guid?), Guid? parentId = default(Guid?), List<string> includeItemTypes = default(List<string>), bool? isAiring = default(bool?), bool? isMovie = default(bool?), bool? isSports = default(bool?), bool? isKids = default(bool?), bool? isNews = default(bool?), bool? isSeries = default(bool?), bool? recursive = default(bool?))
        {

            var localVarPath = "/Items/Filters2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (includeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "includeItemTypes", includeItemTypes)); // query parameter
            if (isAiring != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isAiring", isAiring)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isMovie", isMovie)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSports", isSports)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isKids", isKids)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isNews", isNews)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSeries", isSeries)); // query parameter
            if (recursive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recursive", recursive)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueryFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryFilters>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueryFilters) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryFilters)));
        }

        /// <summary>
        /// Gets query filters. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User id. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)</param>
        /// <param name="isAiring">Optional. Is item airing. (optional)</param>
        /// <param name="isMovie">Optional. Is item movie. (optional)</param>
        /// <param name="isSports">Optional. Is item sports. (optional)</param>
        /// <param name="isKids">Optional. Is item kids. (optional)</param>
        /// <param name="isNews">Optional. Is item news. (optional)</param>
        /// <param name="isSeries">Optional. Is item series. (optional)</param>
        /// <param name="recursive">Optional. Search recursive. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of QueryFilters</returns>
        public async System.Threading.Tasks.Task<QueryFilters> GetQueryFiltersAsync (Guid? userId = default(Guid?), Guid? parentId = default(Guid?), List<string> includeItemTypes = default(List<string>), bool? isAiring = default(bool?), bool? isMovie = default(bool?), bool? isSports = default(bool?), bool? isKids = default(bool?), bool? isNews = default(bool?), bool? isSeries = default(bool?), bool? recursive = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<QueryFilters> localVarResponse = await GetQueryFiltersWithHttpInfoAsync(userId, parentId, includeItemTypes, isAiring, isMovie, isSports, isKids, isNews, isSeries, recursive, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets query filters. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User id. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)</param>
        /// <param name="isAiring">Optional. Is item airing. (optional)</param>
        /// <param name="isMovie">Optional. Is item movie. (optional)</param>
        /// <param name="isSports">Optional. Is item sports. (optional)</param>
        /// <param name="isKids">Optional. Is item kids. (optional)</param>
        /// <param name="isNews">Optional. Is item news. (optional)</param>
        /// <param name="isSeries">Optional. Is item series. (optional)</param>
        /// <param name="recursive">Optional. Search recursive. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (QueryFilters)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueryFilters>> GetQueryFiltersWithHttpInfoAsync (Guid? userId = default(Guid?), Guid? parentId = default(Guid?), List<string> includeItemTypes = default(List<string>), bool? isAiring = default(bool?), bool? isMovie = default(bool?), bool? isSports = default(bool?), bool? isKids = default(bool?), bool? isNews = default(bool?), bool? isSeries = default(bool?), bool? recursive = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Items/Filters2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (includeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "includeItemTypes", includeItemTypes)); // query parameter
            if (isAiring != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isAiring", isAiring)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isMovie", isMovie)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSports", isSports)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isKids", isKids)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isNews", isNews)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSeries", isSeries)); // query parameter
            if (recursive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recursive", recursive)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueryFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryFilters>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueryFilters) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryFilters)));
        }

        /// <summary>
        /// Gets legacy query filters. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User id. (optional)</param>
        /// <param name="parentId">Optional. Parent id. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)</param>
        /// <param name="mediaTypes">Optional. Filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <returns>QueryFiltersLegacy</returns>
        public QueryFiltersLegacy GetQueryFiltersLegacy (Guid? userId = default(Guid?), Guid? parentId = default(Guid?), List<string> includeItemTypes = default(List<string>), List<string> mediaTypes = default(List<string>))
        {
             ApiResponse<QueryFiltersLegacy> localVarResponse = GetQueryFiltersLegacyWithHttpInfo(userId, parentId, includeItemTypes, mediaTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets legacy query filters. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User id. (optional)</param>
        /// <param name="parentId">Optional. Parent id. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)</param>
        /// <param name="mediaTypes">Optional. Filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <returns>ApiResponse of QueryFiltersLegacy</returns>
        public ApiResponse<QueryFiltersLegacy> GetQueryFiltersLegacyWithHttpInfo (Guid? userId = default(Guid?), Guid? parentId = default(Guid?), List<string> includeItemTypes = default(List<string>), List<string> mediaTypes = default(List<string>))
        {

            var localVarPath = "/Items/Filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (includeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "includeItemTypes", includeItemTypes)); // query parameter
            if (mediaTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "mediaTypes", mediaTypes)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueryFiltersLegacy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryFiltersLegacy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueryFiltersLegacy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryFiltersLegacy)));
        }

        /// <summary>
        /// Gets legacy query filters. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User id. (optional)</param>
        /// <param name="parentId">Optional. Parent id. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)</param>
        /// <param name="mediaTypes">Optional. Filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of QueryFiltersLegacy</returns>
        public async System.Threading.Tasks.Task<QueryFiltersLegacy> GetQueryFiltersLegacyAsync (Guid? userId = default(Guid?), Guid? parentId = default(Guid?), List<string> includeItemTypes = default(List<string>), List<string> mediaTypes = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<QueryFiltersLegacy> localVarResponse = await GetQueryFiltersLegacyWithHttpInfoAsync(userId, parentId, includeItemTypes, mediaTypes, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets legacy query filters. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. User id. (optional)</param>
        /// <param name="parentId">Optional. Parent id. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)</param>
        /// <param name="mediaTypes">Optional. Filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (QueryFiltersLegacy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueryFiltersLegacy>> GetQueryFiltersLegacyWithHttpInfoAsync (Guid? userId = default(Guid?), Guid? parentId = default(Guid?), List<string> includeItemTypes = default(List<string>), List<string> mediaTypes = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Items/Filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (includeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "includeItemTypes", includeItemTypes)); // query parameter
            if (mediaTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "mediaTypes", mediaTypes)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueryFiltersLegacy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryFiltersLegacy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueryFiltersLegacy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryFiltersLegacy)));
        }

    }
}
