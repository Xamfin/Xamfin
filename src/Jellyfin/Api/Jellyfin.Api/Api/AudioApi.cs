/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Jellyfin.Api.Client;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAudioApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container. (optional)</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment length. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamorphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetAudioStream (Guid itemId, string container = default(string), bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>));

        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container. (optional)</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment length. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamorphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetAudioStreamWithHttpInfo (Guid itemId, string container = default(string), bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>));
        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container.</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment lenght. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamporphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetAudioStreamByContainer (Guid itemId, string container, bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>));

        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container.</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment lenght. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamporphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetAudioStreamByContainerWithHttpInfo (Guid itemId, string container, bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>));
        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container. (optional)</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment length. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamorphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream HeadAudioStream (Guid itemId, string container = default(string), bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>));

        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container. (optional)</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment length. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamorphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> HeadAudioStreamWithHttpInfo (Guid itemId, string container = default(string), bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>));
        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container.</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment lenght. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamporphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream HeadAudioStreamByContainer (Guid itemId, string container, bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>));

        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container.</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment lenght. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamporphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> HeadAudioStreamByContainerWithHttpInfo (Guid itemId, string container, bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container. (optional)</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment length. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamorphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetAudioStreamAsync (Guid itemId, string container = default(string), bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container. (optional)</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment length. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamorphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetAudioStreamWithHttpInfoAsync (Guid itemId, string container = default(string), bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container.</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment lenght. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamporphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetAudioStreamByContainerAsync (Guid itemId, string container, bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container.</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment lenght. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamporphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetAudioStreamByContainerWithHttpInfoAsync (Guid itemId, string container, bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container. (optional)</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment length. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamorphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> HeadAudioStreamAsync (Guid itemId, string container = default(string), bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container. (optional)</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment length. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamorphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadAudioStreamWithHttpInfoAsync (Guid itemId, string container = default(string), bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container.</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment lenght. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamporphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> HeadAudioStreamByContainerAsync (Guid itemId, string container, bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container.</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment lenght. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamporphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadAudioStreamByContainerWithHttpInfoAsync (Guid itemId, string container, bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AudioApi : IAudioApi
    {
        private Jellyfin.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AudioApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AudioApi(String basePath)
        {
            this.Configuration = new Jellyfin.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AudioApi"/> class
        /// </summary>
        /// <returns></returns>
        public AudioApi()
        {
            this.Configuration = Jellyfin.Api.Client.Configuration.Default;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AudioApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AudioApi(Jellyfin.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Jellyfin.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Jellyfin.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Jellyfin.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container. (optional)</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment length. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamorphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetAudioStream (Guid itemId, string container = default(string), bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>))
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetAudioStreamWithHttpInfo(itemId, container, _static, _params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container. (optional)</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment length. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamorphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetAudioStreamWithHttpInfo (Guid itemId, string container = default(string), bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling AudioApi->GetAudioStream");

            var localVarPath = "/Audio/{itemId}/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "audio/_*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (container != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "container", container)); // query parameter
            if (_static != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "static", _static)); // query parameter
            if (_params != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "params", _params)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (deviceProfileId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceProfileId", deviceProfileId)); // query parameter
            if (playSessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playSessionId", playSessionId)); // query parameter
            if (segmentContainer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segmentContainer", segmentContainer)); // query parameter
            if (segmentLength != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segmentLength", segmentLength)); // query parameter
            if (minSegments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minSegments", minSegments)); // query parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceId", deviceId)); // query parameter
            if (audioCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioCodec", audioCodec)); // query parameter
            if (enableAutoStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableAutoStreamCopy", enableAutoStreamCopy)); // query parameter
            if (allowVideoStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowVideoStreamCopy", allowVideoStreamCopy)); // query parameter
            if (allowAudioStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowAudioStreamCopy", allowAudioStreamCopy)); // query parameter
            if (breakOnNonKeyFrames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "breakOnNonKeyFrames", breakOnNonKeyFrames)); // query parameter
            if (audioSampleRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioSampleRate", audioSampleRate)); // query parameter
            if (maxAudioBitDepth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioBitDepth", maxAudioBitDepth)); // query parameter
            if (audioBitRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioBitRate", audioBitRate)); // query parameter
            if (audioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioChannels", audioChannels)); // query parameter
            if (maxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioChannels", maxAudioChannels)); // query parameter
            if (profile != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "profile", profile)); // query parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (framerate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "framerate", framerate)); // query parameter
            if (maxFramerate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxFramerate", maxFramerate)); // query parameter
            if (copyTimestamps != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "copyTimestamps", copyTimestamps)); // query parameter
            if (startTimeTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeTicks", startTimeTicks)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (videoBitRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoBitRate", videoBitRate)); // query parameter
            if (subtitleStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleStreamIndex", subtitleStreamIndex)); // query parameter
            if (subtitleMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleMethod", subtitleMethod)); // query parameter
            if (maxRefFrames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxRefFrames", maxRefFrames)); // query parameter
            if (maxVideoBitDepth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxVideoBitDepth", maxVideoBitDepth)); // query parameter
            if (requireAvc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requireAvc", requireAvc)); // query parameter
            if (deInterlace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deInterlace", deInterlace)); // query parameter
            if (requireNonAnamorphic != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requireNonAnamorphic", requireNonAnamorphic)); // query parameter
            if (transcodingMaxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodingMaxAudioChannels", transcodingMaxAudioChannels)); // query parameter
            if (cpuCoreLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cpuCoreLimit", cpuCoreLimit)); // query parameter
            if (liveStreamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "liveStreamId", liveStreamId)); // query parameter
            if (enableMpegtsM2TsMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableMpegtsM2TsMode", enableMpegtsM2TsMode)); // query parameter
            if (videoCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoCodec", videoCodec)); // query parameter
            if (subtitleCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleCodec", subtitleCodec)); // query parameter
            if (transcodeReasons != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodeReasons", transcodeReasons)); // query parameter
            if (audioStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioStreamIndex", audioStreamIndex)); // query parameter
            if (videoStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoStreamIndex", videoStreamIndex)); // query parameter
            if (context != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "context", context)); // query parameter
            if (streamOptions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streamOptions", streamOptions)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAudioStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container. (optional)</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment length. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamorphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetAudioStreamAsync (Guid itemId, string container = default(string), bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetAudioStreamWithHttpInfoAsync(itemId, container, _static, _params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container. (optional)</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment length. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamorphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetAudioStreamWithHttpInfoAsync (Guid itemId, string container = default(string), bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling AudioApi->GetAudioStream");

            var localVarPath = "/Audio/{itemId}/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "audio/_*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (container != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "container", container)); // query parameter
            if (_static != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "static", _static)); // query parameter
            if (_params != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "params", _params)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (deviceProfileId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceProfileId", deviceProfileId)); // query parameter
            if (playSessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playSessionId", playSessionId)); // query parameter
            if (segmentContainer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segmentContainer", segmentContainer)); // query parameter
            if (segmentLength != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segmentLength", segmentLength)); // query parameter
            if (minSegments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minSegments", minSegments)); // query parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceId", deviceId)); // query parameter
            if (audioCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioCodec", audioCodec)); // query parameter
            if (enableAutoStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableAutoStreamCopy", enableAutoStreamCopy)); // query parameter
            if (allowVideoStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowVideoStreamCopy", allowVideoStreamCopy)); // query parameter
            if (allowAudioStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowAudioStreamCopy", allowAudioStreamCopy)); // query parameter
            if (breakOnNonKeyFrames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "breakOnNonKeyFrames", breakOnNonKeyFrames)); // query parameter
            if (audioSampleRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioSampleRate", audioSampleRate)); // query parameter
            if (maxAudioBitDepth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioBitDepth", maxAudioBitDepth)); // query parameter
            if (audioBitRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioBitRate", audioBitRate)); // query parameter
            if (audioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioChannels", audioChannels)); // query parameter
            if (maxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioChannels", maxAudioChannels)); // query parameter
            if (profile != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "profile", profile)); // query parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (framerate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "framerate", framerate)); // query parameter
            if (maxFramerate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxFramerate", maxFramerate)); // query parameter
            if (copyTimestamps != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "copyTimestamps", copyTimestamps)); // query parameter
            if (startTimeTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeTicks", startTimeTicks)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (videoBitRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoBitRate", videoBitRate)); // query parameter
            if (subtitleStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleStreamIndex", subtitleStreamIndex)); // query parameter
            if (subtitleMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleMethod", subtitleMethod)); // query parameter
            if (maxRefFrames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxRefFrames", maxRefFrames)); // query parameter
            if (maxVideoBitDepth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxVideoBitDepth", maxVideoBitDepth)); // query parameter
            if (requireAvc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requireAvc", requireAvc)); // query parameter
            if (deInterlace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deInterlace", deInterlace)); // query parameter
            if (requireNonAnamorphic != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requireNonAnamorphic", requireNonAnamorphic)); // query parameter
            if (transcodingMaxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodingMaxAudioChannels", transcodingMaxAudioChannels)); // query parameter
            if (cpuCoreLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cpuCoreLimit", cpuCoreLimit)); // query parameter
            if (liveStreamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "liveStreamId", liveStreamId)); // query parameter
            if (enableMpegtsM2TsMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableMpegtsM2TsMode", enableMpegtsM2TsMode)); // query parameter
            if (videoCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoCodec", videoCodec)); // query parameter
            if (subtitleCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleCodec", subtitleCodec)); // query parameter
            if (transcodeReasons != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodeReasons", transcodeReasons)); // query parameter
            if (audioStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioStreamIndex", audioStreamIndex)); // query parameter
            if (videoStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoStreamIndex", videoStreamIndex)); // query parameter
            if (context != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "context", context)); // query parameter
            if (streamOptions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streamOptions", streamOptions)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAudioStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container.</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment lenght. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamporphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetAudioStreamByContainer (Guid itemId, string container, bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>))
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetAudioStreamByContainerWithHttpInfo(itemId, container, _static, _params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container.</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment lenght. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamporphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetAudioStreamByContainerWithHttpInfo (Guid itemId, string container, bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling AudioApi->GetAudioStreamByContainer");
            // verify the required parameter 'container' is set
            if (container == null)
                throw new ApiException(400, "Missing required parameter 'container' when calling AudioApi->GetAudioStreamByContainer");

            var localVarPath = "/Audio/{itemId}/stream.{container}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "audio/_*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (container != null) localVarPathParams.Add("container", this.Configuration.ApiClient.ParameterToString(container)); // path parameter
            if (_static != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "static", _static)); // query parameter
            if (_params != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "params", _params)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (deviceProfileId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceProfileId", deviceProfileId)); // query parameter
            if (playSessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playSessionId", playSessionId)); // query parameter
            if (segmentContainer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segmentContainer", segmentContainer)); // query parameter
            if (segmentLength != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segmentLength", segmentLength)); // query parameter
            if (minSegments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minSegments", minSegments)); // query parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceId", deviceId)); // query parameter
            if (audioCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioCodec", audioCodec)); // query parameter
            if (enableAutoStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableAutoStreamCopy", enableAutoStreamCopy)); // query parameter
            if (allowVideoStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowVideoStreamCopy", allowVideoStreamCopy)); // query parameter
            if (allowAudioStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowAudioStreamCopy", allowAudioStreamCopy)); // query parameter
            if (breakOnNonKeyFrames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "breakOnNonKeyFrames", breakOnNonKeyFrames)); // query parameter
            if (audioSampleRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioSampleRate", audioSampleRate)); // query parameter
            if (maxAudioBitDepth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioBitDepth", maxAudioBitDepth)); // query parameter
            if (audioBitRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioBitRate", audioBitRate)); // query parameter
            if (audioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioChannels", audioChannels)); // query parameter
            if (maxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioChannels", maxAudioChannels)); // query parameter
            if (profile != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "profile", profile)); // query parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (framerate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "framerate", framerate)); // query parameter
            if (maxFramerate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxFramerate", maxFramerate)); // query parameter
            if (copyTimestamps != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "copyTimestamps", copyTimestamps)); // query parameter
            if (startTimeTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeTicks", startTimeTicks)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (videoBitRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoBitRate", videoBitRate)); // query parameter
            if (subtitleStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleStreamIndex", subtitleStreamIndex)); // query parameter
            if (subtitleMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleMethod", subtitleMethod)); // query parameter
            if (maxRefFrames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxRefFrames", maxRefFrames)); // query parameter
            if (maxVideoBitDepth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxVideoBitDepth", maxVideoBitDepth)); // query parameter
            if (requireAvc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requireAvc", requireAvc)); // query parameter
            if (deInterlace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deInterlace", deInterlace)); // query parameter
            if (requireNonAnamorphic != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requireNonAnamorphic", requireNonAnamorphic)); // query parameter
            if (transcodingMaxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodingMaxAudioChannels", transcodingMaxAudioChannels)); // query parameter
            if (cpuCoreLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cpuCoreLimit", cpuCoreLimit)); // query parameter
            if (liveStreamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "liveStreamId", liveStreamId)); // query parameter
            if (enableMpegtsM2TsMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableMpegtsM2TsMode", enableMpegtsM2TsMode)); // query parameter
            if (videoCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoCodec", videoCodec)); // query parameter
            if (subtitleCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleCodec", subtitleCodec)); // query parameter
            if (transcodeReasons != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodeReasons", transcodeReasons)); // query parameter
            if (audioStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioStreamIndex", audioStreamIndex)); // query parameter
            if (videoStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoStreamIndex", videoStreamIndex)); // query parameter
            if (context != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "context", context)); // query parameter
            if (streamOptions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streamOptions", streamOptions)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAudioStreamByContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container.</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment lenght. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamporphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetAudioStreamByContainerAsync (Guid itemId, string container, bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetAudioStreamByContainerWithHttpInfoAsync(itemId, container, _static, _params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container.</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment lenght. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamporphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetAudioStreamByContainerWithHttpInfoAsync (Guid itemId, string container, bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling AudioApi->GetAudioStreamByContainer");
            // verify the required parameter 'container' is set
            if (container == null)
                throw new ApiException(400, "Missing required parameter 'container' when calling AudioApi->GetAudioStreamByContainer");

            var localVarPath = "/Audio/{itemId}/stream.{container}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "audio/_*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (container != null) localVarPathParams.Add("container", this.Configuration.ApiClient.ParameterToString(container)); // path parameter
            if (_static != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "static", _static)); // query parameter
            if (_params != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "params", _params)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (deviceProfileId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceProfileId", deviceProfileId)); // query parameter
            if (playSessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playSessionId", playSessionId)); // query parameter
            if (segmentContainer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segmentContainer", segmentContainer)); // query parameter
            if (segmentLength != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segmentLength", segmentLength)); // query parameter
            if (minSegments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minSegments", minSegments)); // query parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceId", deviceId)); // query parameter
            if (audioCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioCodec", audioCodec)); // query parameter
            if (enableAutoStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableAutoStreamCopy", enableAutoStreamCopy)); // query parameter
            if (allowVideoStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowVideoStreamCopy", allowVideoStreamCopy)); // query parameter
            if (allowAudioStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowAudioStreamCopy", allowAudioStreamCopy)); // query parameter
            if (breakOnNonKeyFrames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "breakOnNonKeyFrames", breakOnNonKeyFrames)); // query parameter
            if (audioSampleRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioSampleRate", audioSampleRate)); // query parameter
            if (maxAudioBitDepth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioBitDepth", maxAudioBitDepth)); // query parameter
            if (audioBitRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioBitRate", audioBitRate)); // query parameter
            if (audioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioChannels", audioChannels)); // query parameter
            if (maxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioChannels", maxAudioChannels)); // query parameter
            if (profile != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "profile", profile)); // query parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (framerate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "framerate", framerate)); // query parameter
            if (maxFramerate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxFramerate", maxFramerate)); // query parameter
            if (copyTimestamps != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "copyTimestamps", copyTimestamps)); // query parameter
            if (startTimeTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeTicks", startTimeTicks)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (videoBitRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoBitRate", videoBitRate)); // query parameter
            if (subtitleStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleStreamIndex", subtitleStreamIndex)); // query parameter
            if (subtitleMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleMethod", subtitleMethod)); // query parameter
            if (maxRefFrames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxRefFrames", maxRefFrames)); // query parameter
            if (maxVideoBitDepth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxVideoBitDepth", maxVideoBitDepth)); // query parameter
            if (requireAvc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requireAvc", requireAvc)); // query parameter
            if (deInterlace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deInterlace", deInterlace)); // query parameter
            if (requireNonAnamorphic != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requireNonAnamorphic", requireNonAnamorphic)); // query parameter
            if (transcodingMaxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodingMaxAudioChannels", transcodingMaxAudioChannels)); // query parameter
            if (cpuCoreLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cpuCoreLimit", cpuCoreLimit)); // query parameter
            if (liveStreamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "liveStreamId", liveStreamId)); // query parameter
            if (enableMpegtsM2TsMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableMpegtsM2TsMode", enableMpegtsM2TsMode)); // query parameter
            if (videoCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoCodec", videoCodec)); // query parameter
            if (subtitleCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleCodec", subtitleCodec)); // query parameter
            if (transcodeReasons != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodeReasons", transcodeReasons)); // query parameter
            if (audioStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioStreamIndex", audioStreamIndex)); // query parameter
            if (videoStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoStreamIndex", videoStreamIndex)); // query parameter
            if (context != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "context", context)); // query parameter
            if (streamOptions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streamOptions", streamOptions)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAudioStreamByContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container. (optional)</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment length. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamorphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream HeadAudioStream (Guid itemId, string container = default(string), bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>))
        {
             ApiResponse<System.IO.Stream> localVarResponse = HeadAudioStreamWithHttpInfo(itemId, container, _static, _params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container. (optional)</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment length. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamorphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> HeadAudioStreamWithHttpInfo (Guid itemId, string container = default(string), bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling AudioApi->HeadAudioStream");

            var localVarPath = "/Audio/{itemId}/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "audio/_*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (container != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "container", container)); // query parameter
            if (_static != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "static", _static)); // query parameter
            if (_params != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "params", _params)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (deviceProfileId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceProfileId", deviceProfileId)); // query parameter
            if (playSessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playSessionId", playSessionId)); // query parameter
            if (segmentContainer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segmentContainer", segmentContainer)); // query parameter
            if (segmentLength != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segmentLength", segmentLength)); // query parameter
            if (minSegments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minSegments", minSegments)); // query parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceId", deviceId)); // query parameter
            if (audioCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioCodec", audioCodec)); // query parameter
            if (enableAutoStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableAutoStreamCopy", enableAutoStreamCopy)); // query parameter
            if (allowVideoStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowVideoStreamCopy", allowVideoStreamCopy)); // query parameter
            if (allowAudioStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowAudioStreamCopy", allowAudioStreamCopy)); // query parameter
            if (breakOnNonKeyFrames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "breakOnNonKeyFrames", breakOnNonKeyFrames)); // query parameter
            if (audioSampleRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioSampleRate", audioSampleRate)); // query parameter
            if (maxAudioBitDepth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioBitDepth", maxAudioBitDepth)); // query parameter
            if (audioBitRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioBitRate", audioBitRate)); // query parameter
            if (audioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioChannels", audioChannels)); // query parameter
            if (maxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioChannels", maxAudioChannels)); // query parameter
            if (profile != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "profile", profile)); // query parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (framerate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "framerate", framerate)); // query parameter
            if (maxFramerate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxFramerate", maxFramerate)); // query parameter
            if (copyTimestamps != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "copyTimestamps", copyTimestamps)); // query parameter
            if (startTimeTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeTicks", startTimeTicks)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (videoBitRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoBitRate", videoBitRate)); // query parameter
            if (subtitleStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleStreamIndex", subtitleStreamIndex)); // query parameter
            if (subtitleMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleMethod", subtitleMethod)); // query parameter
            if (maxRefFrames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxRefFrames", maxRefFrames)); // query parameter
            if (maxVideoBitDepth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxVideoBitDepth", maxVideoBitDepth)); // query parameter
            if (requireAvc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requireAvc", requireAvc)); // query parameter
            if (deInterlace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deInterlace", deInterlace)); // query parameter
            if (requireNonAnamorphic != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requireNonAnamorphic", requireNonAnamorphic)); // query parameter
            if (transcodingMaxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodingMaxAudioChannels", transcodingMaxAudioChannels)); // query parameter
            if (cpuCoreLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cpuCoreLimit", cpuCoreLimit)); // query parameter
            if (liveStreamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "liveStreamId", liveStreamId)); // query parameter
            if (enableMpegtsM2TsMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableMpegtsM2TsMode", enableMpegtsM2TsMode)); // query parameter
            if (videoCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoCodec", videoCodec)); // query parameter
            if (subtitleCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleCodec", subtitleCodec)); // query parameter
            if (transcodeReasons != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodeReasons", transcodeReasons)); // query parameter
            if (audioStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioStreamIndex", audioStreamIndex)); // query parameter
            if (videoStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoStreamIndex", videoStreamIndex)); // query parameter
            if (context != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "context", context)); // query parameter
            if (streamOptions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streamOptions", streamOptions)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadAudioStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container. (optional)</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment length. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamorphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> HeadAudioStreamAsync (Guid itemId, string container = default(string), bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await HeadAudioStreamWithHttpInfoAsync(itemId, container, _static, _params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container. (optional)</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment length. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamorphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadAudioStreamWithHttpInfoAsync (Guid itemId, string container = default(string), bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling AudioApi->HeadAudioStream");

            var localVarPath = "/Audio/{itemId}/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "audio/_*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (container != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "container", container)); // query parameter
            if (_static != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "static", _static)); // query parameter
            if (_params != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "params", _params)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (deviceProfileId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceProfileId", deviceProfileId)); // query parameter
            if (playSessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playSessionId", playSessionId)); // query parameter
            if (segmentContainer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segmentContainer", segmentContainer)); // query parameter
            if (segmentLength != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segmentLength", segmentLength)); // query parameter
            if (minSegments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minSegments", minSegments)); // query parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceId", deviceId)); // query parameter
            if (audioCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioCodec", audioCodec)); // query parameter
            if (enableAutoStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableAutoStreamCopy", enableAutoStreamCopy)); // query parameter
            if (allowVideoStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowVideoStreamCopy", allowVideoStreamCopy)); // query parameter
            if (allowAudioStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowAudioStreamCopy", allowAudioStreamCopy)); // query parameter
            if (breakOnNonKeyFrames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "breakOnNonKeyFrames", breakOnNonKeyFrames)); // query parameter
            if (audioSampleRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioSampleRate", audioSampleRate)); // query parameter
            if (maxAudioBitDepth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioBitDepth", maxAudioBitDepth)); // query parameter
            if (audioBitRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioBitRate", audioBitRate)); // query parameter
            if (audioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioChannels", audioChannels)); // query parameter
            if (maxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioChannels", maxAudioChannels)); // query parameter
            if (profile != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "profile", profile)); // query parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (framerate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "framerate", framerate)); // query parameter
            if (maxFramerate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxFramerate", maxFramerate)); // query parameter
            if (copyTimestamps != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "copyTimestamps", copyTimestamps)); // query parameter
            if (startTimeTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeTicks", startTimeTicks)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (videoBitRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoBitRate", videoBitRate)); // query parameter
            if (subtitleStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleStreamIndex", subtitleStreamIndex)); // query parameter
            if (subtitleMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleMethod", subtitleMethod)); // query parameter
            if (maxRefFrames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxRefFrames", maxRefFrames)); // query parameter
            if (maxVideoBitDepth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxVideoBitDepth", maxVideoBitDepth)); // query parameter
            if (requireAvc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requireAvc", requireAvc)); // query parameter
            if (deInterlace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deInterlace", deInterlace)); // query parameter
            if (requireNonAnamorphic != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requireNonAnamorphic", requireNonAnamorphic)); // query parameter
            if (transcodingMaxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodingMaxAudioChannels", transcodingMaxAudioChannels)); // query parameter
            if (cpuCoreLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cpuCoreLimit", cpuCoreLimit)); // query parameter
            if (liveStreamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "liveStreamId", liveStreamId)); // query parameter
            if (enableMpegtsM2TsMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableMpegtsM2TsMode", enableMpegtsM2TsMode)); // query parameter
            if (videoCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoCodec", videoCodec)); // query parameter
            if (subtitleCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleCodec", subtitleCodec)); // query parameter
            if (transcodeReasons != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodeReasons", transcodeReasons)); // query parameter
            if (audioStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioStreamIndex", audioStreamIndex)); // query parameter
            if (videoStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoStreamIndex", videoStreamIndex)); // query parameter
            if (context != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "context", context)); // query parameter
            if (streamOptions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streamOptions", streamOptions)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadAudioStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container.</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment lenght. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamporphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream HeadAudioStreamByContainer (Guid itemId, string container, bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>))
        {
             ApiResponse<System.IO.Stream> localVarResponse = HeadAudioStreamByContainerWithHttpInfo(itemId, container, _static, _params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container.</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment lenght. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamporphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> HeadAudioStreamByContainerWithHttpInfo (Guid itemId, string container, bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling AudioApi->HeadAudioStreamByContainer");
            // verify the required parameter 'container' is set
            if (container == null)
                throw new ApiException(400, "Missing required parameter 'container' when calling AudioApi->HeadAudioStreamByContainer");

            var localVarPath = "/Audio/{itemId}/stream.{container}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "audio/_*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (container != null) localVarPathParams.Add("container", this.Configuration.ApiClient.ParameterToString(container)); // path parameter
            if (_static != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "static", _static)); // query parameter
            if (_params != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "params", _params)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (deviceProfileId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceProfileId", deviceProfileId)); // query parameter
            if (playSessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playSessionId", playSessionId)); // query parameter
            if (segmentContainer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segmentContainer", segmentContainer)); // query parameter
            if (segmentLength != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segmentLength", segmentLength)); // query parameter
            if (minSegments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minSegments", minSegments)); // query parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceId", deviceId)); // query parameter
            if (audioCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioCodec", audioCodec)); // query parameter
            if (enableAutoStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableAutoStreamCopy", enableAutoStreamCopy)); // query parameter
            if (allowVideoStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowVideoStreamCopy", allowVideoStreamCopy)); // query parameter
            if (allowAudioStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowAudioStreamCopy", allowAudioStreamCopy)); // query parameter
            if (breakOnNonKeyFrames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "breakOnNonKeyFrames", breakOnNonKeyFrames)); // query parameter
            if (audioSampleRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioSampleRate", audioSampleRate)); // query parameter
            if (maxAudioBitDepth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioBitDepth", maxAudioBitDepth)); // query parameter
            if (audioBitRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioBitRate", audioBitRate)); // query parameter
            if (audioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioChannels", audioChannels)); // query parameter
            if (maxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioChannels", maxAudioChannels)); // query parameter
            if (profile != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "profile", profile)); // query parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (framerate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "framerate", framerate)); // query parameter
            if (maxFramerate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxFramerate", maxFramerate)); // query parameter
            if (copyTimestamps != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "copyTimestamps", copyTimestamps)); // query parameter
            if (startTimeTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeTicks", startTimeTicks)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (videoBitRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoBitRate", videoBitRate)); // query parameter
            if (subtitleStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleStreamIndex", subtitleStreamIndex)); // query parameter
            if (subtitleMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleMethod", subtitleMethod)); // query parameter
            if (maxRefFrames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxRefFrames", maxRefFrames)); // query parameter
            if (maxVideoBitDepth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxVideoBitDepth", maxVideoBitDepth)); // query parameter
            if (requireAvc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requireAvc", requireAvc)); // query parameter
            if (deInterlace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deInterlace", deInterlace)); // query parameter
            if (requireNonAnamorphic != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requireNonAnamorphic", requireNonAnamorphic)); // query parameter
            if (transcodingMaxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodingMaxAudioChannels", transcodingMaxAudioChannels)); // query parameter
            if (cpuCoreLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cpuCoreLimit", cpuCoreLimit)); // query parameter
            if (liveStreamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "liveStreamId", liveStreamId)); // query parameter
            if (enableMpegtsM2TsMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableMpegtsM2TsMode", enableMpegtsM2TsMode)); // query parameter
            if (videoCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoCodec", videoCodec)); // query parameter
            if (subtitleCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleCodec", subtitleCodec)); // query parameter
            if (transcodeReasons != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodeReasons", transcodeReasons)); // query parameter
            if (audioStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioStreamIndex", audioStreamIndex)); // query parameter
            if (videoStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoStreamIndex", videoStreamIndex)); // query parameter
            if (context != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "context", context)); // query parameter
            if (streamOptions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streamOptions", streamOptions)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadAudioStreamByContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container.</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment lenght. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamporphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> HeadAudioStreamByContainerAsync (Guid itemId, string container, bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await HeadAudioStreamByContainerWithHttpInfoAsync(itemId, container, _static, _params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets an audio stream. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container.</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)</param>
        /// <param name="_params">The streaming parameters. (optional)</param>
        /// <param name="tag">The tag. (optional)</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="segmentContainer">The segment container. (optional)</param>
        /// <param name="segmentLength">The segment lenght. (optional)</param>
        /// <param name="minSegments">The minimum number of segments. (optional)</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version. (optional)</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url. (optional)</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100. (optional)</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth. (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxRefFrames">Optional. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth. (optional)</param>
        /// <param name="requireAvc">Optional. Whether to require avc. (optional)</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video. (optional)</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamporphic stream. (optional)</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode. (optional)</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use. (optional)</param>
        /// <param name="liveStreamId">The live stream id. (optional)</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to. (optional)</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)</param>
        /// <param name="streamOptions">Optional. The streaming options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HeadAudioStreamByContainerWithHttpInfoAsync (Guid itemId, string container, bool? _static = default(bool?), string _params = default(string), string tag = default(string), string deviceProfileId = default(string), string playSessionId = default(string), string segmentContainer = default(string), int? segmentLength = default(int?), int? minSegments = default(int?), string mediaSourceId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? breakOnNonKeyFrames = default(bool?), int? audioSampleRate = default(int?), int? maxAudioBitDepth = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), string profile = default(string), string level = default(string), float? framerate = default(float?), float? maxFramerate = default(float?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), SubtitleDeliveryMethod? subtitleMethod = default(SubtitleDeliveryMethod?), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), bool? requireAvc = default(bool?), bool? deInterlace = default(bool?), bool? requireNonAnamorphic = default(bool?), int? transcodingMaxAudioChannels = default(int?), int? cpuCoreLimit = default(int?), string liveStreamId = default(string), bool? enableMpegtsM2TsMode = default(bool?), string videoCodec = default(string), string subtitleCodec = default(string), string transcodeReasons = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), EncodingContext? context = default(EncodingContext?), Dictionary<string, string> streamOptions = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling AudioApi->HeadAudioStreamByContainer");
            // verify the required parameter 'container' is set
            if (container == null)
                throw new ApiException(400, "Missing required parameter 'container' when calling AudioApi->HeadAudioStreamByContainer");

            var localVarPath = "/Audio/{itemId}/stream.{container}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "audio/_*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (container != null) localVarPathParams.Add("container", this.Configuration.ApiClient.ParameterToString(container)); // path parameter
            if (_static != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "static", _static)); // query parameter
            if (_params != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "params", _params)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (deviceProfileId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceProfileId", deviceProfileId)); // query parameter
            if (playSessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playSessionId", playSessionId)); // query parameter
            if (segmentContainer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segmentContainer", segmentContainer)); // query parameter
            if (segmentLength != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segmentLength", segmentLength)); // query parameter
            if (minSegments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minSegments", minSegments)); // query parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceId", deviceId)); // query parameter
            if (audioCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioCodec", audioCodec)); // query parameter
            if (enableAutoStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableAutoStreamCopy", enableAutoStreamCopy)); // query parameter
            if (allowVideoStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowVideoStreamCopy", allowVideoStreamCopy)); // query parameter
            if (allowAudioStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowAudioStreamCopy", allowAudioStreamCopy)); // query parameter
            if (breakOnNonKeyFrames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "breakOnNonKeyFrames", breakOnNonKeyFrames)); // query parameter
            if (audioSampleRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioSampleRate", audioSampleRate)); // query parameter
            if (maxAudioBitDepth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioBitDepth", maxAudioBitDepth)); // query parameter
            if (audioBitRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioBitRate", audioBitRate)); // query parameter
            if (audioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioChannels", audioChannels)); // query parameter
            if (maxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioChannels", maxAudioChannels)); // query parameter
            if (profile != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "profile", profile)); // query parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (framerate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "framerate", framerate)); // query parameter
            if (maxFramerate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxFramerate", maxFramerate)); // query parameter
            if (copyTimestamps != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "copyTimestamps", copyTimestamps)); // query parameter
            if (startTimeTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeTicks", startTimeTicks)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (videoBitRate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoBitRate", videoBitRate)); // query parameter
            if (subtitleStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleStreamIndex", subtitleStreamIndex)); // query parameter
            if (subtitleMethod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleMethod", subtitleMethod)); // query parameter
            if (maxRefFrames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxRefFrames", maxRefFrames)); // query parameter
            if (maxVideoBitDepth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxVideoBitDepth", maxVideoBitDepth)); // query parameter
            if (requireAvc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requireAvc", requireAvc)); // query parameter
            if (deInterlace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deInterlace", deInterlace)); // query parameter
            if (requireNonAnamorphic != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requireNonAnamorphic", requireNonAnamorphic)); // query parameter
            if (transcodingMaxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodingMaxAudioChannels", transcodingMaxAudioChannels)); // query parameter
            if (cpuCoreLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cpuCoreLimit", cpuCoreLimit)); // query parameter
            if (liveStreamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "liveStreamId", liveStreamId)); // query parameter
            if (enableMpegtsM2TsMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableMpegtsM2TsMode", enableMpegtsM2TsMode)); // query parameter
            if (videoCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoCodec", videoCodec)); // query parameter
            if (subtitleCodec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleCodec", subtitleCodec)); // query parameter
            if (transcodeReasons != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transcodeReasons", transcodeReasons)); // query parameter
            if (audioStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioStreamIndex", audioStreamIndex)); // query parameter
            if (videoStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "videoStreamIndex", videoStreamIndex)); // query parameter
            if (context != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "context", context)); // query parameter
            if (streamOptions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streamOptions", streamOptions)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadAudioStreamByContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

    }
}
