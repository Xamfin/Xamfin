/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Jellyfin.Api.Client;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITvShowsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets episodes for a tv season.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seriesId">The series id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="season">Optional filter by season number. (optional)</param>
        /// <param name="seasonId">Optional. Filter by season id. (optional)</param>
        /// <param name="isMissing">Optional. Filter by items that are missing episodes or not. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetEpisodes (Guid seriesId, Guid? userId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), int? season = default(int?), Guid? seasonId = default(Guid?), bool? isMissing = default(bool?), string adjacentTo = default(string), Guid? startItemId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), string sortBy = default(string));

        /// <summary>
        /// Gets episodes for a tv season.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seriesId">The series id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="season">Optional filter by season number. (optional)</param>
        /// <param name="seasonId">Optional. Filter by season id. (optional)</param>
        /// <param name="isMissing">Optional. Filter by items that are missing episodes or not. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetEpisodesWithHttpInfo (Guid seriesId, Guid? userId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), int? season = default(int?), Guid? seasonId = default(Guid?), bool? isMissing = default(bool?), string adjacentTo = default(string), Guid? startItemId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), string sortBy = default(string));
        /// <summary>
        /// Gets a list of next up episodes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the user to get the next up episodes for. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="seriesId">Optional. Filter by series id. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="enableImges">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Whether to enable the total records count. Defaults to true. (optional, default to true)</param>
        /// <param name="disableFirstEpisode">Whether to disable sending the first episode in a series as next up. (optional, default to false)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetNextUp (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), string seriesId = default(string), Guid? parentId = default(Guid?), bool? enableImges = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?), bool? disableFirstEpisode = default(bool?));

        /// <summary>
        /// Gets a list of next up episodes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the user to get the next up episodes for. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="seriesId">Optional. Filter by series id. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="enableImges">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Whether to enable the total records count. Defaults to true. (optional, default to true)</param>
        /// <param name="disableFirstEpisode">Whether to disable sending the first episode in a series as next up. (optional, default to false)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetNextUpWithHttpInfo (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), string seriesId = default(string), Guid? parentId = default(Guid?), bool? enableImges = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?), bool? disableFirstEpisode = default(bool?));
        /// <summary>
        /// Gets seasons for a tv series.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seriesId">The series id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="isMissing">Optional. Filter by items that are missing episodes or not. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetSeasons (Guid seriesId, Guid? userId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), bool? isSpecialSeason = default(bool?), bool? isMissing = default(bool?), string adjacentTo = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?));

        /// <summary>
        /// Gets seasons for a tv series.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seriesId">The series id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="isMissing">Optional. Filter by items that are missing episodes or not. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetSeasonsWithHttpInfo (Guid seriesId, Guid? userId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), bool? isSpecialSeason = default(bool?), bool? isMissing = default(bool?), string adjacentTo = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?));
        /// <summary>
        /// Gets a list of upcoming episodes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the user to get the upcoming episodes for. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="enableImges">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        BaseItemDtoQueryResult GetUpcomingEpisodes (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), Guid? parentId = default(Guid?), bool? enableImges = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?));

        /// <summary>
        /// Gets a list of upcoming episodes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the user to get the upcoming episodes for. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="enableImges">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        ApiResponse<BaseItemDtoQueryResult> GetUpcomingEpisodesWithHttpInfo (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), Guid? parentId = default(Guid?), bool? enableImges = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets episodes for a tv season.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seriesId">The series id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="season">Optional filter by season number. (optional)</param>
        /// <param name="seasonId">Optional. Filter by season id. (optional)</param>
        /// <param name="isMissing">Optional. Filter by items that are missing episodes or not. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetEpisodesAsync (Guid seriesId, Guid? userId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), int? season = default(int?), Guid? seasonId = default(Guid?), bool? isMissing = default(bool?), string adjacentTo = default(string), Guid? startItemId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets episodes for a tv season.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seriesId">The series id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="season">Optional filter by season number. (optional)</param>
        /// <param name="seasonId">Optional. Filter by season id. (optional)</param>
        /// <param name="isMissing">Optional. Filter by items that are missing episodes or not. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetEpisodesWithHttpInfoAsync (Guid seriesId, Guid? userId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), int? season = default(int?), Guid? seasonId = default(Guid?), bool? isMissing = default(bool?), string adjacentTo = default(string), Guid? startItemId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a list of next up episodes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the user to get the next up episodes for. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="seriesId">Optional. Filter by series id. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="enableImges">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Whether to enable the total records count. Defaults to true. (optional, default to true)</param>
        /// <param name="disableFirstEpisode">Whether to disable sending the first episode in a series as next up. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetNextUpAsync (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), string seriesId = default(string), Guid? parentId = default(Guid?), bool? enableImges = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?), bool? disableFirstEpisode = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of next up episodes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the user to get the next up episodes for. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="seriesId">Optional. Filter by series id. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="enableImges">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Whether to enable the total records count. Defaults to true. (optional, default to true)</param>
        /// <param name="disableFirstEpisode">Whether to disable sending the first episode in a series as next up. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetNextUpWithHttpInfoAsync (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), string seriesId = default(string), Guid? parentId = default(Guid?), bool? enableImges = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?), bool? disableFirstEpisode = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets seasons for a tv series.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seriesId">The series id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="isMissing">Optional. Filter by items that are missing episodes or not. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetSeasonsAsync (Guid seriesId, Guid? userId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), bool? isSpecialSeason = default(bool?), bool? isMissing = default(bool?), string adjacentTo = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets seasons for a tv series.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seriesId">The series id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="isMissing">Optional. Filter by items that are missing episodes or not. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetSeasonsWithHttpInfoAsync (Guid seriesId, Guid? userId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), bool? isSpecialSeason = default(bool?), bool? isMissing = default(bool?), string adjacentTo = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a list of upcoming episodes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the user to get the upcoming episodes for. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="enableImges">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetUpcomingEpisodesAsync (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), Guid? parentId = default(Guid?), bool? enableImges = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of upcoming episodes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the user to get the upcoming episodes for. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="enableImges">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetUpcomingEpisodesWithHttpInfoAsync (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), Guid? parentId = default(Guid?), bool? enableImges = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TvShowsApi : ITvShowsApi
    {
        private Jellyfin.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TvShowsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TvShowsApi(String basePath)
        {
            this.Configuration = new Jellyfin.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TvShowsApi"/> class
        /// </summary>
        /// <returns></returns>
        public TvShowsApi()
        {
            this.Configuration = Jellyfin.Api.Client.Configuration.Default;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TvShowsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TvShowsApi(Jellyfin.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Jellyfin.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Jellyfin.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Jellyfin.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets episodes for a tv season. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seriesId">The series id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="season">Optional filter by season number. (optional)</param>
        /// <param name="seasonId">Optional. Filter by season id. (optional)</param>
        /// <param name="isMissing">Optional. Filter by items that are missing episodes or not. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetEpisodes (Guid seriesId, Guid? userId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), int? season = default(int?), Guid? seasonId = default(Guid?), bool? isMissing = default(bool?), string adjacentTo = default(string), Guid? startItemId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), string sortBy = default(string))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetEpisodesWithHttpInfo(seriesId, userId, fields, season, seasonId, isMissing, adjacentTo, startItemId, startIndex, limit, enableImages, imageTypeLimit, enableImageTypes, enableUserData, sortBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets episodes for a tv season. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seriesId">The series id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="season">Optional filter by season number. (optional)</param>
        /// <param name="seasonId">Optional. Filter by season id. (optional)</param>
        /// <param name="isMissing">Optional. Filter by items that are missing episodes or not. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetEpisodesWithHttpInfo (Guid seriesId, Guid? userId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), int? season = default(int?), Guid? seasonId = default(Guid?), bool? isMissing = default(bool?), string adjacentTo = default(string), Guid? startItemId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), string sortBy = default(string))
        {
            // verify the required parameter 'seriesId' is set
            if (seriesId == null)
                throw new ApiException(400, "Missing required parameter 'seriesId' when calling TvShowsApi->GetEpisodes");

            var localVarPath = "/Shows/{seriesId}/Episodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (seriesId != null) localVarPathParams.Add("seriesId", this.Configuration.ApiClient.ParameterToString(seriesId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (season != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "season", season)); // query parameter
            if (seasonId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seasonId", seasonId)); // query parameter
            if (isMissing != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isMissing", isMissing)); // query parameter
            if (adjacentTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "adjacentTo", adjacentTo)); // query parameter
            if (startItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startItemId", startItemId)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEpisodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets episodes for a tv season. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seriesId">The series id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="season">Optional filter by season number. (optional)</param>
        /// <param name="seasonId">Optional. Filter by season id. (optional)</param>
        /// <param name="isMissing">Optional. Filter by items that are missing episodes or not. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetEpisodesAsync (Guid seriesId, Guid? userId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), int? season = default(int?), Guid? seasonId = default(Guid?), bool? isMissing = default(bool?), string adjacentTo = default(string), Guid? startItemId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetEpisodesWithHttpInfoAsync(seriesId, userId, fields, season, seasonId, isMissing, adjacentTo, startItemId, startIndex, limit, enableImages, imageTypeLimit, enableImageTypes, enableUserData, sortBy, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets episodes for a tv season. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seriesId">The series id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="season">Optional filter by season number. (optional)</param>
        /// <param name="seasonId">Optional. Filter by season id. (optional)</param>
        /// <param name="isMissing">Optional. Filter by items that are missing episodes or not. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetEpisodesWithHttpInfoAsync (Guid seriesId, Guid? userId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), int? season = default(int?), Guid? seasonId = default(Guid?), bool? isMissing = default(bool?), string adjacentTo = default(string), Guid? startItemId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'seriesId' is set
            if (seriesId == null)
                throw new ApiException(400, "Missing required parameter 'seriesId' when calling TvShowsApi->GetEpisodes");

            var localVarPath = "/Shows/{seriesId}/Episodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (seriesId != null) localVarPathParams.Add("seriesId", this.Configuration.ApiClient.ParameterToString(seriesId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (season != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "season", season)); // query parameter
            if (seasonId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seasonId", seasonId)); // query parameter
            if (isMissing != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isMissing", isMissing)); // query parameter
            if (adjacentTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "adjacentTo", adjacentTo)); // query parameter
            if (startItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startItemId", startItemId)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEpisodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets a list of next up episodes. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the user to get the next up episodes for. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="seriesId">Optional. Filter by series id. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="enableImges">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Whether to enable the total records count. Defaults to true. (optional, default to true)</param>
        /// <param name="disableFirstEpisode">Whether to disable sending the first episode in a series as next up. (optional, default to false)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetNextUp (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), string seriesId = default(string), Guid? parentId = default(Guid?), bool? enableImges = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?), bool? disableFirstEpisode = default(bool?))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetNextUpWithHttpInfo(userId, startIndex, limit, fields, seriesId, parentId, enableImges, imageTypeLimit, enableImageTypes, enableUserData, enableTotalRecordCount, disableFirstEpisode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of next up episodes. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the user to get the next up episodes for. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="seriesId">Optional. Filter by series id. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="enableImges">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Whether to enable the total records count. Defaults to true. (optional, default to true)</param>
        /// <param name="disableFirstEpisode">Whether to disable sending the first episode in a series as next up. (optional, default to false)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetNextUpWithHttpInfo (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), string seriesId = default(string), Guid? parentId = default(Guid?), bool? enableImges = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?), bool? disableFirstEpisode = default(bool?))
        {

            var localVarPath = "/Shows/NextUp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (seriesId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seriesId", seriesId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (enableImges != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImges", enableImges)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (enableTotalRecordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableTotalRecordCount", enableTotalRecordCount)); // query parameter
            if (disableFirstEpisode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disableFirstEpisode", disableFirstEpisode)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNextUp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets a list of next up episodes. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the user to get the next up episodes for. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="seriesId">Optional. Filter by series id. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="enableImges">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Whether to enable the total records count. Defaults to true. (optional, default to true)</param>
        /// <param name="disableFirstEpisode">Whether to disable sending the first episode in a series as next up. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetNextUpAsync (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), string seriesId = default(string), Guid? parentId = default(Guid?), bool? enableImges = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?), bool? disableFirstEpisode = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetNextUpWithHttpInfoAsync(userId, startIndex, limit, fields, seriesId, parentId, enableImges, imageTypeLimit, enableImageTypes, enableUserData, enableTotalRecordCount, disableFirstEpisode, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of next up episodes. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the user to get the next up episodes for. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="seriesId">Optional. Filter by series id. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="enableImges">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="enableTotalRecordCount">Whether to enable the total records count. Defaults to true. (optional, default to true)</param>
        /// <param name="disableFirstEpisode">Whether to disable sending the first episode in a series as next up. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetNextUpWithHttpInfoAsync (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), string seriesId = default(string), Guid? parentId = default(Guid?), bool? enableImges = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), bool? enableTotalRecordCount = default(bool?), bool? disableFirstEpisode = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Shows/NextUp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (seriesId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seriesId", seriesId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (enableImges != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImges", enableImges)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter
            if (enableTotalRecordCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableTotalRecordCount", enableTotalRecordCount)); // query parameter
            if (disableFirstEpisode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disableFirstEpisode", disableFirstEpisode)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNextUp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets seasons for a tv series. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seriesId">The series id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="isMissing">Optional. Filter by items that are missing episodes or not. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetSeasons (Guid seriesId, Guid? userId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), bool? isSpecialSeason = default(bool?), bool? isMissing = default(bool?), string adjacentTo = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetSeasonsWithHttpInfo(seriesId, userId, fields, isSpecialSeason, isMissing, adjacentTo, enableImages, imageTypeLimit, enableImageTypes, enableUserData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets seasons for a tv series. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seriesId">The series id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="isMissing">Optional. Filter by items that are missing episodes or not. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetSeasonsWithHttpInfo (Guid seriesId, Guid? userId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), bool? isSpecialSeason = default(bool?), bool? isMissing = default(bool?), string adjacentTo = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?))
        {
            // verify the required parameter 'seriesId' is set
            if (seriesId == null)
                throw new ApiException(400, "Missing required parameter 'seriesId' when calling TvShowsApi->GetSeasons");

            var localVarPath = "/Shows/{seriesId}/Seasons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (seriesId != null) localVarPathParams.Add("seriesId", this.Configuration.ApiClient.ParameterToString(seriesId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (isSpecialSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSpecialSeason", isSpecialSeason)); // query parameter
            if (isMissing != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isMissing", isMissing)); // query parameter
            if (adjacentTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "adjacentTo", adjacentTo)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSeasons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets seasons for a tv series. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seriesId">The series id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="isMissing">Optional. Filter by items that are missing episodes or not. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetSeasonsAsync (Guid seriesId, Guid? userId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), bool? isSpecialSeason = default(bool?), bool? isMissing = default(bool?), string adjacentTo = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetSeasonsWithHttpInfoAsync(seriesId, userId, fields, isSpecialSeason, isMissing, adjacentTo, enableImages, imageTypeLimit, enableImageTypes, enableUserData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets seasons for a tv series. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seriesId">The series id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="isMissing">Optional. Filter by items that are missing episodes or not. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="enableImages">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetSeasonsWithHttpInfoAsync (Guid seriesId, Guid? userId = default(Guid?), List<ItemFields> fields = default(List<ItemFields>), bool? isSpecialSeason = default(bool?), bool? isMissing = default(bool?), string adjacentTo = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'seriesId' is set
            if (seriesId == null)
                throw new ApiException(400, "Missing required parameter 'seriesId' when calling TvShowsApi->GetSeasons");

            var localVarPath = "/Shows/{seriesId}/Seasons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (seriesId != null) localVarPathParams.Add("seriesId", this.Configuration.ApiClient.ParameterToString(seriesId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (isSpecialSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isSpecialSeason", isSpecialSeason)); // query parameter
            if (isMissing != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isMissing", isMissing)); // query parameter
            if (adjacentTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "adjacentTo", adjacentTo)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImages", enableImages)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSeasons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets a list of upcoming episodes. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the user to get the upcoming episodes for. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="enableImges">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <returns>BaseItemDtoQueryResult</returns>
        public BaseItemDtoQueryResult GetUpcomingEpisodes (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), Guid? parentId = default(Guid?), bool? enableImges = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = GetUpcomingEpisodesWithHttpInfo(userId, startIndex, limit, fields, parentId, enableImges, imageTypeLimit, enableImageTypes, enableUserData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of upcoming episodes. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the user to get the upcoming episodes for. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="enableImges">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <returns>ApiResponse of BaseItemDtoQueryResult</returns>
        public ApiResponse<BaseItemDtoQueryResult> GetUpcomingEpisodesWithHttpInfo (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), Guid? parentId = default(Guid?), bool? enableImges = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?))
        {

            var localVarPath = "/Shows/Upcoming";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (enableImges != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImges", enableImges)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUpcomingEpisodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

        /// <summary>
        /// Gets a list of upcoming episodes. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the user to get the upcoming episodes for. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="enableImges">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseItemDtoQueryResult</returns>
        public async System.Threading.Tasks.Task<BaseItemDtoQueryResult> GetUpcomingEpisodesAsync (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), Guid? parentId = default(Guid?), bool? enableImges = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseItemDtoQueryResult> localVarResponse = await GetUpcomingEpisodesWithHttpInfoAsync(userId, startIndex, limit, fields, parentId, enableImges, imageTypeLimit, enableImageTypes, enableUserData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of upcoming episodes. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id of the user to get the upcoming episodes for. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. (optional)</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)</param>
        /// <param name="enableImges">Optional. Include image information in output. (optional)</param>
        /// <param name="imageTypeLimit">Optional. The max number of images to return, per image type. (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional. Include user data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseItemDtoQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseItemDtoQueryResult>> GetUpcomingEpisodesWithHttpInfoAsync (Guid? userId = default(Guid?), int? startIndex = default(int?), int? limit = default(int?), List<ItemFields> fields = default(List<ItemFields>), Guid? parentId = default(Guid?), bool? enableImges = default(bool?), int? imageTypeLimit = default(int?), List<ImageType> enableImageTypes = default(List<ImageType>), bool? enableUserData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Shows/Upcoming";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (enableImges != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableImges", enableImges)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "enableImageTypes", enableImageTypes)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableUserData", enableUserData)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUpcomingEpisodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseItemDtoQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseItemDtoQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseItemDtoQueryResult)));
        }

    }
}
