/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Jellyfin.Api.Client;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILibraryStructureApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a media path to a library.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The media path dto.</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <returns></returns>
        void AddMediaPath (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, bool? refreshLibrary = default(bool?));

        /// <summary>
        /// Add a media path to a library.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The media path dto.</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddMediaPathWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, bool? refreshLibrary = default(bool?));
        /// <summary>
        /// Adds a virtual folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the virtual folder. (optional)</param>
        /// <param name="collectionType">The type of the collection. (optional)</param>
        /// <param name="paths">The paths of the virtual folder. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The library options. (optional)</param>
        /// <returns></returns>
        void AddVirtualFolder (string name = default(string), CollectionTypeOptions? collectionType = default(CollectionTypeOptions?), List<string> paths = default(List<string>), bool? refreshLibrary = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));

        /// <summary>
        /// Adds a virtual folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the virtual folder. (optional)</param>
        /// <param name="collectionType">The type of the collection. (optional)</param>
        /// <param name="paths">The paths of the virtual folder. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The library options. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddVirtualFolderWithHttpInfo (string name = default(string), CollectionTypeOptions? collectionType = default(CollectionTypeOptions?), List<string> paths = default(List<string>), bool? refreshLibrary = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));
        /// <summary>
        /// Gets all virtual folders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;VirtualFolderInfo&gt;</returns>
        List<VirtualFolderInfo> GetVirtualFolders ();

        /// <summary>
        /// Gets all virtual folders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;VirtualFolderInfo&gt;</returns>
        ApiResponse<List<VirtualFolderInfo>> GetVirtualFoldersWithHttpInfo ();
        /// <summary>
        /// Remove a media path.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the library. (optional)</param>
        /// <param name="path">The path to remove. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <returns></returns>
        void RemoveMediaPath (string name = default(string), string path = default(string), bool? refreshLibrary = default(bool?));

        /// <summary>
        /// Remove a media path.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the library. (optional)</param>
        /// <param name="path">The path to remove. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveMediaPathWithHttpInfo (string name = default(string), string path = default(string), bool? refreshLibrary = default(bool?));
        /// <summary>
        /// Removes a virtual folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the folder. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <returns></returns>
        void RemoveVirtualFolder (string name = default(string), bool? refreshLibrary = default(bool?));

        /// <summary>
        /// Removes a virtual folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the folder. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveVirtualFolderWithHttpInfo (string name = default(string), bool? refreshLibrary = default(bool?));
        /// <summary>
        /// Renames a virtual folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the virtual folder. (optional)</param>
        /// <param name="newName">The new name. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <returns></returns>
        void RenameVirtualFolder (string name = default(string), string newName = default(string), bool? refreshLibrary = default(bool?));

        /// <summary>
        /// Renames a virtual folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the virtual folder. (optional)</param>
        /// <param name="newName">The new name. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RenameVirtualFolderWithHttpInfo (string name = default(string), string newName = default(string), bool? refreshLibrary = default(bool?));
        /// <summary>
        /// Update library options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The library name and options. (optional)</param>
        /// <returns></returns>
        void UpdateLibraryOptions (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));

        /// <summary>
        /// Update library options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The library name and options. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateLibraryOptionsWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));
        /// <summary>
        /// Updates a media path.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The name of the library and path infos.</param>
        /// <returns></returns>
        void UpdateMediaPath (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);

        /// <summary>
        /// Updates a media path.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The name of the library and path infos.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateMediaPathWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a media path to a library.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The media path dto.</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddMediaPathAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, bool? refreshLibrary = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a media path to a library.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The media path dto.</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddMediaPathWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, bool? refreshLibrary = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Adds a virtual folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the virtual folder. (optional)</param>
        /// <param name="collectionType">The type of the collection. (optional)</param>
        /// <param name="paths">The paths of the virtual folder. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The library options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddVirtualFolderAsync (string name = default(string), CollectionTypeOptions? collectionType = default(CollectionTypeOptions?), List<string> paths = default(List<string>), bool? refreshLibrary = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a virtual folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the virtual folder. (optional)</param>
        /// <param name="collectionType">The type of the collection. (optional)</param>
        /// <param name="paths">The paths of the virtual folder. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The library options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddVirtualFolderWithHttpInfoAsync (string name = default(string), CollectionTypeOptions? collectionType = default(CollectionTypeOptions?), List<string> paths = default(List<string>), bool? refreshLibrary = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets all virtual folders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;VirtualFolderInfo&gt;</returns>
        System.Threading.Tasks.Task<List<VirtualFolderInfo>> GetVirtualFoldersAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all virtual folders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;VirtualFolderInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VirtualFolderInfo>>> GetVirtualFoldersWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove a media path.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the library. (optional)</param>
        /// <param name="path">The path to remove. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveMediaPathAsync (string name = default(string), string path = default(string), bool? refreshLibrary = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove a media path.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the library. (optional)</param>
        /// <param name="path">The path to remove. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveMediaPathWithHttpInfoAsync (string name = default(string), string path = default(string), bool? refreshLibrary = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Removes a virtual folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the folder. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveVirtualFolderAsync (string name = default(string), bool? refreshLibrary = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes a virtual folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the folder. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveVirtualFolderWithHttpInfoAsync (string name = default(string), bool? refreshLibrary = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Renames a virtual folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the virtual folder. (optional)</param>
        /// <param name="newName">The new name. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RenameVirtualFolderAsync (string name = default(string), string newName = default(string), bool? refreshLibrary = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Renames a virtual folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the virtual folder. (optional)</param>
        /// <param name="newName">The new name. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RenameVirtualFolderWithHttpInfoAsync (string name = default(string), string newName = default(string), bool? refreshLibrary = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update library options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The library name and options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateLibraryOptionsAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update library options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The library name and options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateLibraryOptionsWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a media path.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The name of the library and path infos.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateMediaPathAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a media path.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The name of the library and path infos.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMediaPathWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LibraryStructureApi : ILibraryStructureApi
    {
        private Jellyfin.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryStructureApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LibraryStructureApi(String basePath)
        {
            this.Configuration = new Jellyfin.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryStructureApi"/> class
        /// </summary>
        /// <returns></returns>
        public LibraryStructureApi()
        {
            this.Configuration = Jellyfin.Api.Client.Configuration.Default;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryStructureApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LibraryStructureApi(Jellyfin.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Jellyfin.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Jellyfin.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Jellyfin.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a media path to a library. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The media path dto.</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <returns></returns>
        public void AddMediaPath (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, bool? refreshLibrary = default(bool?))
        {
             AddMediaPathWithHttpInfo(UNKNOWN_BASE_TYPE, refreshLibrary);
        }

        /// <summary>
        /// Add a media path to a library. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The media path dto.</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddMediaPathWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, bool? refreshLibrary = default(bool?))
        {
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling LibraryStructureApi->AddMediaPath");

            var localVarPath = "/Library/VirtualFolders/Paths";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (refreshLibrary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "refreshLibrary", refreshLibrary)); // query parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMediaPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add a media path to a library. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The media path dto.</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddMediaPathAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, bool? refreshLibrary = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             await AddMediaPathWithHttpInfoAsync(UNKNOWN_BASE_TYPE, refreshLibrary, cancellationToken);

        }

        /// <summary>
        /// Add a media path to a library. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The media path dto.</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddMediaPathWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, bool? refreshLibrary = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling LibraryStructureApi->AddMediaPath");

            var localVarPath = "/Library/VirtualFolders/Paths";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (refreshLibrary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "refreshLibrary", refreshLibrary)); // query parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMediaPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Adds a virtual folder. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the virtual folder. (optional)</param>
        /// <param name="collectionType">The type of the collection. (optional)</param>
        /// <param name="paths">The paths of the virtual folder. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The library options. (optional)</param>
        /// <returns></returns>
        public void AddVirtualFolder (string name = default(string), CollectionTypeOptions? collectionType = default(CollectionTypeOptions?), List<string> paths = default(List<string>), bool? refreshLibrary = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
             AddVirtualFolderWithHttpInfo(name, collectionType, paths, refreshLibrary, UNKNOWN_BASE_TYPE);
        }

        /// <summary>
        /// Adds a virtual folder. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the virtual folder. (optional)</param>
        /// <param name="collectionType">The type of the collection. (optional)</param>
        /// <param name="paths">The paths of the virtual folder. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The library options. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddVirtualFolderWithHttpInfo (string name = default(string), CollectionTypeOptions? collectionType = default(CollectionTypeOptions?), List<string> paths = default(List<string>), bool? refreshLibrary = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {

            var localVarPath = "/Library/VirtualFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (collectionType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "collectionType", collectionType)); // query parameter
            if (paths != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "paths", paths)); // query parameter
            if (refreshLibrary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "refreshLibrary", refreshLibrary)); // query parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddVirtualFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Adds a virtual folder. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the virtual folder. (optional)</param>
        /// <param name="collectionType">The type of the collection. (optional)</param>
        /// <param name="paths">The paths of the virtual folder. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The library options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddVirtualFolderAsync (string name = default(string), CollectionTypeOptions? collectionType = default(CollectionTypeOptions?), List<string> paths = default(List<string>), bool? refreshLibrary = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {
             await AddVirtualFolderWithHttpInfoAsync(name, collectionType, paths, refreshLibrary, UNKNOWN_BASE_TYPE, cancellationToken);

        }

        /// <summary>
        /// Adds a virtual folder. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the virtual folder. (optional)</param>
        /// <param name="collectionType">The type of the collection. (optional)</param>
        /// <param name="paths">The paths of the virtual folder. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The library options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddVirtualFolderWithHttpInfoAsync (string name = default(string), CollectionTypeOptions? collectionType = default(CollectionTypeOptions?), List<string> paths = default(List<string>), bool? refreshLibrary = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Library/VirtualFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (collectionType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "collectionType", collectionType)); // query parameter
            if (paths != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "paths", paths)); // query parameter
            if (refreshLibrary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "refreshLibrary", refreshLibrary)); // query parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddVirtualFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets all virtual folders. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;VirtualFolderInfo&gt;</returns>
        public List<VirtualFolderInfo> GetVirtualFolders ()
        {
             ApiResponse<List<VirtualFolderInfo>> localVarResponse = GetVirtualFoldersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all virtual folders. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;VirtualFolderInfo&gt;</returns>
        public ApiResponse<List<VirtualFolderInfo>> GetVirtualFoldersWithHttpInfo ()
        {

            var localVarPath = "/Library/VirtualFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVirtualFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VirtualFolderInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<VirtualFolderInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VirtualFolderInfo>)));
        }

        /// <summary>
        /// Gets all virtual folders. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;VirtualFolderInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<VirtualFolderInfo>> GetVirtualFoldersAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<VirtualFolderInfo>> localVarResponse = await GetVirtualFoldersWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all virtual folders. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;VirtualFolderInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<VirtualFolderInfo>>> GetVirtualFoldersWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Library/VirtualFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVirtualFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VirtualFolderInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<VirtualFolderInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VirtualFolderInfo>)));
        }

        /// <summary>
        /// Remove a media path. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the library. (optional)</param>
        /// <param name="path">The path to remove. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <returns></returns>
        public void RemoveMediaPath (string name = default(string), string path = default(string), bool? refreshLibrary = default(bool?))
        {
             RemoveMediaPathWithHttpInfo(name, path, refreshLibrary);
        }

        /// <summary>
        /// Remove a media path. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the library. (optional)</param>
        /// <param name="path">The path to remove. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveMediaPathWithHttpInfo (string name = default(string), string path = default(string), bool? refreshLibrary = default(bool?))
        {

            var localVarPath = "/Library/VirtualFolders/Paths";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (refreshLibrary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "refreshLibrary", refreshLibrary)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMediaPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove a media path. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the library. (optional)</param>
        /// <param name="path">The path to remove. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveMediaPathAsync (string name = default(string), string path = default(string), bool? refreshLibrary = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             await RemoveMediaPathWithHttpInfoAsync(name, path, refreshLibrary, cancellationToken);

        }

        /// <summary>
        /// Remove a media path. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the library. (optional)</param>
        /// <param name="path">The path to remove. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveMediaPathWithHttpInfoAsync (string name = default(string), string path = default(string), bool? refreshLibrary = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Library/VirtualFolders/Paths";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (refreshLibrary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "refreshLibrary", refreshLibrary)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMediaPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Removes a virtual folder. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the folder. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <returns></returns>
        public void RemoveVirtualFolder (string name = default(string), bool? refreshLibrary = default(bool?))
        {
             RemoveVirtualFolderWithHttpInfo(name, refreshLibrary);
        }

        /// <summary>
        /// Removes a virtual folder. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the folder. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveVirtualFolderWithHttpInfo (string name = default(string), bool? refreshLibrary = default(bool?))
        {

            var localVarPath = "/Library/VirtualFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (refreshLibrary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "refreshLibrary", refreshLibrary)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveVirtualFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Removes a virtual folder. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the folder. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveVirtualFolderAsync (string name = default(string), bool? refreshLibrary = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             await RemoveVirtualFolderWithHttpInfoAsync(name, refreshLibrary, cancellationToken);

        }

        /// <summary>
        /// Removes a virtual folder. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the folder. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveVirtualFolderWithHttpInfoAsync (string name = default(string), bool? refreshLibrary = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Library/VirtualFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (refreshLibrary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "refreshLibrary", refreshLibrary)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveVirtualFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Renames a virtual folder. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the virtual folder. (optional)</param>
        /// <param name="newName">The new name. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <returns></returns>
        public void RenameVirtualFolder (string name = default(string), string newName = default(string), bool? refreshLibrary = default(bool?))
        {
             RenameVirtualFolderWithHttpInfo(name, newName, refreshLibrary);
        }

        /// <summary>
        /// Renames a virtual folder. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the virtual folder. (optional)</param>
        /// <param name="newName">The new name. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RenameVirtualFolderWithHttpInfo (string name = default(string), string newName = default(string), bool? refreshLibrary = default(bool?))
        {

            var localVarPath = "/Library/VirtualFolders/Name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (newName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newName", newName)); // query parameter
            if (refreshLibrary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "refreshLibrary", refreshLibrary)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenameVirtualFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Renames a virtual folder. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the virtual folder. (optional)</param>
        /// <param name="newName">The new name. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RenameVirtualFolderAsync (string name = default(string), string newName = default(string), bool? refreshLibrary = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             await RenameVirtualFolderWithHttpInfoAsync(name, newName, refreshLibrary, cancellationToken);

        }

        /// <summary>
        /// Renames a virtual folder. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the virtual folder. (optional)</param>
        /// <param name="newName">The new name. (optional)</param>
        /// <param name="refreshLibrary">Whether to refresh the library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RenameVirtualFolderWithHttpInfoAsync (string name = default(string), string newName = default(string), bool? refreshLibrary = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Library/VirtualFolders/Name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (newName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newName", newName)); // query parameter
            if (refreshLibrary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "refreshLibrary", refreshLibrary)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenameVirtualFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update library options. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The library name and options. (optional)</param>
        /// <returns></returns>
        public void UpdateLibraryOptions (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
             UpdateLibraryOptionsWithHttpInfo(UNKNOWN_BASE_TYPE);
        }

        /// <summary>
        /// Update library options. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The library name and options. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateLibraryOptionsWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {

            var localVarPath = "/Library/VirtualFolders/LibraryOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLibraryOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update library options. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The library name and options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateLibraryOptionsAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateLibraryOptionsWithHttpInfoAsync(UNKNOWN_BASE_TYPE, cancellationToken);

        }

        /// <summary>
        /// Update library options. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The library name and options. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateLibraryOptionsWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Library/VirtualFolders/LibraryOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLibraryOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates a media path. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The name of the library and path infos.</param>
        /// <returns></returns>
        public void UpdateMediaPath (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
             UpdateMediaPathWithHttpInfo(UNKNOWN_BASE_TYPE);
        }

        /// <summary>
        /// Updates a media path. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The name of the library and path infos.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateMediaPathWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling LibraryStructureApi->UpdateMediaPath");

            var localVarPath = "/Library/VirtualFolders/Paths/Update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMediaPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates a media path. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The name of the library and path infos.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateMediaPathAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateMediaPathWithHttpInfoAsync(UNKNOWN_BASE_TYPE, cancellationToken);

        }

        /// <summary>
        /// Updates a media path. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The name of the library and path infos.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMediaPathWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling LibraryStructureApi->UpdateMediaPath");

            var localVarPath = "/Library/VirtualFolders/Paths/Update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMediaPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
