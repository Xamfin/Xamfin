/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Jellyfin.Api.Client;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISessionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds an additional user to a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        void AddUserToSession (string sessionId, Guid userId);

        /// <summary>
        /// Adds an additional user to a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddUserToSessionWithHttpInfo (string sessionId, Guid userId);
        /// <summary>
        /// Instructs a session to browse to an item or view.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session Id.</param>
        /// <param name="itemType">The type of item to browse to.</param>
        /// <param name="itemId">The Id of the item.</param>
        /// <param name="itemName">The name of the item.</param>
        /// <returns></returns>
        void DisplayContent (string sessionId, string itemType, string itemId, string itemName);

        /// <summary>
        /// Instructs a session to browse to an item or view.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session Id.</param>
        /// <param name="itemType">The type of item to browse to.</param>
        /// <param name="itemId">The Id of the item.</param>
        /// <param name="itemName">The name of the item.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DisplayContentWithHttpInfo (string sessionId, string itemType, string itemId, string itemName);
        /// <summary>
        /// Get all auth providers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;NameIdPair&gt;</returns>
        List<NameIdPair> GetAuthProviders ();

        /// <summary>
        /// Get all auth providers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;NameIdPair&gt;</returns>
        ApiResponse<List<NameIdPair>> GetAuthProvidersWithHttpInfo ();
        /// <summary>
        /// Get all password reset providers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;NameIdPair&gt;</returns>
        List<NameIdPair> GetPasswordResetProviders ();

        /// <summary>
        /// Get all password reset providers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;NameIdPair&gt;</returns>
        ApiResponse<List<NameIdPair>> GetPasswordResetProvidersWithHttpInfo ();
        /// <summary>
        /// Gets a list of sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="controllableByUserId">Filter by sessions that a given user is allowed to remote control. (optional)</param>
        /// <param name="deviceId">Filter by device Id. (optional)</param>
        /// <param name="activeWithinSeconds">Optional. Filter by sessions that were active in the last n seconds. (optional)</param>
        /// <returns>List&lt;SessionInfo&gt;</returns>
        List<SessionInfo> GetSessions (Guid? controllableByUserId = default(Guid?), string deviceId = default(string), int? activeWithinSeconds = default(int?));

        /// <summary>
        /// Gets a list of sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="controllableByUserId">Filter by sessions that a given user is allowed to remote control. (optional)</param>
        /// <param name="deviceId">Filter by device Id. (optional)</param>
        /// <param name="activeWithinSeconds">Optional. Filter by sessions that were active in the last n seconds. (optional)</param>
        /// <returns>ApiResponse of List&lt;SessionInfo&gt;</returns>
        ApiResponse<List<SessionInfo>> GetSessionsWithHttpInfo (Guid? controllableByUserId = default(Guid?), string deviceId = default(string), int? activeWithinSeconds = default(int?));
        /// <summary>
        /// Instructs a session to play an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="playCommand">The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now.</param>
        /// <param name="itemIds">The ids of the items to play, comma delimited.</param>
        /// <param name="startPositionTicks">The starting position of the first item. (optional)</param>
        /// <param name="mediaSourceId">Optional. The media source id. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to play. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to play. (optional)</param>
        /// <param name="startIndex">Optional. The start index. (optional)</param>
        /// <returns></returns>
        void Play (string sessionId, PlayCommand playCommand, List<Guid> itemIds, long? startPositionTicks = default(long?), string mediaSourceId = default(string), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? startIndex = default(int?));

        /// <summary>
        /// Instructs a session to play an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="playCommand">The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now.</param>
        /// <param name="itemIds">The ids of the items to play, comma delimited.</param>
        /// <param name="startPositionTicks">The starting position of the first item. (optional)</param>
        /// <param name="mediaSourceId">Optional. The media source id. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to play. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to play. (optional)</param>
        /// <param name="startIndex">Optional. The start index. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PlayWithHttpInfo (string sessionId, PlayCommand playCommand, List<Guid> itemIds, long? startPositionTicks = default(long?), string mediaSourceId = default(string), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? startIndex = default(int?));
        /// <summary>
        /// Updates capabilities for a device.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session id. (optional)</param>
        /// <param name="playableMediaTypes">A list of playable media types, comma delimited. Audio, Video, Book, Photo. (optional)</param>
        /// <param name="supportedCommands">A list of supported remote control commands, comma delimited. (optional)</param>
        /// <param name="supportsMediaControl">Determines whether media can be played remotely.. (optional, default to false)</param>
        /// <param name="supportsSync">Determines whether sync is supported. (optional, default to false)</param>
        /// <param name="supportsPersistentIdentifier">Determines whether the device supports a unique identifier. (optional, default to true)</param>
        /// <returns></returns>
        void PostCapabilities (string id = default(string), List<string> playableMediaTypes = default(List<string>), List<GeneralCommandType> supportedCommands = default(List<GeneralCommandType>), bool? supportsMediaControl = default(bool?), bool? supportsSync = default(bool?), bool? supportsPersistentIdentifier = default(bool?));

        /// <summary>
        /// Updates capabilities for a device.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session id. (optional)</param>
        /// <param name="playableMediaTypes">A list of playable media types, comma delimited. Audio, Video, Book, Photo. (optional)</param>
        /// <param name="supportedCommands">A list of supported remote control commands, comma delimited. (optional)</param>
        /// <param name="supportsMediaControl">Determines whether media can be played remotely.. (optional, default to false)</param>
        /// <param name="supportsSync">Determines whether sync is supported. (optional, default to false)</param>
        /// <param name="supportsPersistentIdentifier">Determines whether the device supports a unique identifier. (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCapabilitiesWithHttpInfo (string id = default(string), List<string> playableMediaTypes = default(List<string>), List<GeneralCommandType> supportedCommands = default(List<GeneralCommandType>), bool? supportsMediaControl = default(bool?), bool? supportsSync = default(bool?), bool? supportsPersistentIdentifier = default(bool?));
        /// <summary>
        /// Updates capabilities for a device.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.ClientCapabilities.</param>
        /// <param name="id">The session id. (optional)</param>
        /// <returns></returns>
        void PostFullCapabilities (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, string id = default(string));

        /// <summary>
        /// Updates capabilities for a device.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.ClientCapabilities.</param>
        /// <param name="id">The session id. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostFullCapabilitiesWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, string id = default(string));
        /// <summary>
        /// Removes an additional user from a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        void RemoveUserFromSession (string sessionId, Guid userId);

        /// <summary>
        /// Removes an additional user from a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveUserFromSessionWithHttpInfo (string sessionId, Guid userId);
        /// <summary>
        /// Reports that a session has ended.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ReportSessionEnded ();

        /// <summary>
        /// Reports that a session has ended.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReportSessionEndedWithHttpInfo ();
        /// <summary>
        /// Reports that a session is viewing an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="sessionId">The session id. (optional)</param>
        /// <returns></returns>
        void ReportViewing (string itemId, string sessionId = default(string));

        /// <summary>
        /// Reports that a session is viewing an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="sessionId">The session id. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReportViewingWithHttpInfo (string itemId, string sessionId = default(string));
        /// <summary>
        /// Issues a full general command to a client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.GeneralCommand.</param>
        /// <returns></returns>
        void SendFullGeneralCommand (string sessionId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);

        /// <summary>
        /// Issues a full general command to a client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.GeneralCommand.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendFullGeneralCommandWithHttpInfo (string sessionId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);
        /// <summary>
        /// Issues a general command to a client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The command to send.</param>
        /// <returns></returns>
        void SendGeneralCommand (string sessionId, GeneralCommandType command);

        /// <summary>
        /// Issues a general command to a client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The command to send.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendGeneralCommandWithHttpInfo (string sessionId, GeneralCommandType command);
        /// <summary>
        /// Issues a command to a client to display a message to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.MessageCommand object containing Header, Message Text, and TimeoutMs.</param>
        /// <returns></returns>
        void SendMessageCommand (string sessionId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);

        /// <summary>
        /// Issues a command to a client to display a message to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.MessageCommand object containing Header, Message Text, and TimeoutMs.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendMessageCommandWithHttpInfo (string sessionId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);
        /// <summary>
        /// Issues a playstate command to a client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The MediaBrowser.Model.Session.PlaystateCommand.</param>
        /// <param name="seekPositionTicks">The optional position ticks. (optional)</param>
        /// <param name="controllingUserId">The optional controlling user id. (optional)</param>
        /// <returns></returns>
        void SendPlaystateCommand (string sessionId, PlaystateCommand command, long? seekPositionTicks = default(long?), string controllingUserId = default(string));

        /// <summary>
        /// Issues a playstate command to a client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The MediaBrowser.Model.Session.PlaystateCommand.</param>
        /// <param name="seekPositionTicks">The optional position ticks. (optional)</param>
        /// <param name="controllingUserId">The optional controlling user id. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendPlaystateCommandWithHttpInfo (string sessionId, PlaystateCommand command, long? seekPositionTicks = default(long?), string controllingUserId = default(string));
        /// <summary>
        /// Issues a system command to a client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The command to send.</param>
        /// <returns></returns>
        void SendSystemCommand (string sessionId, GeneralCommandType command);

        /// <summary>
        /// Issues a system command to a client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The command to send.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendSystemCommandWithHttpInfo (string sessionId, GeneralCommandType command);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds an additional user to a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddUserToSessionAsync (string sessionId, Guid userId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds an additional user to a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddUserToSessionWithHttpInfoAsync (string sessionId, Guid userId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Instructs a session to browse to an item or view.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session Id.</param>
        /// <param name="itemType">The type of item to browse to.</param>
        /// <param name="itemId">The Id of the item.</param>
        /// <param name="itemName">The name of the item.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DisplayContentAsync (string sessionId, string itemType, string itemId, string itemName, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Instructs a session to browse to an item or view.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session Id.</param>
        /// <param name="itemType">The type of item to browse to.</param>
        /// <param name="itemId">The Id of the item.</param>
        /// <param name="itemName">The name of the item.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DisplayContentWithHttpInfoAsync (string sessionId, string itemType, string itemId, string itemName, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get all auth providers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;NameIdPair&gt;</returns>
        System.Threading.Tasks.Task<List<NameIdPair>> GetAuthProvidersAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all auth providers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;NameIdPair&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NameIdPair>>> GetAuthProvidersWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get all password reset providers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;NameIdPair&gt;</returns>
        System.Threading.Tasks.Task<List<NameIdPair>> GetPasswordResetProvidersAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all password reset providers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;NameIdPair&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NameIdPair>>> GetPasswordResetProvidersWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a list of sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="controllableByUserId">Filter by sessions that a given user is allowed to remote control. (optional)</param>
        /// <param name="deviceId">Filter by device Id. (optional)</param>
        /// <param name="activeWithinSeconds">Optional. Filter by sessions that were active in the last n seconds. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;SessionInfo&gt;</returns>
        System.Threading.Tasks.Task<List<SessionInfo>> GetSessionsAsync (Guid? controllableByUserId = default(Guid?), string deviceId = default(string), int? activeWithinSeconds = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="controllableByUserId">Filter by sessions that a given user is allowed to remote control. (optional)</param>
        /// <param name="deviceId">Filter by device Id. (optional)</param>
        /// <param name="activeWithinSeconds">Optional. Filter by sessions that were active in the last n seconds. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;SessionInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SessionInfo>>> GetSessionsWithHttpInfoAsync (Guid? controllableByUserId = default(Guid?), string deviceId = default(string), int? activeWithinSeconds = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Instructs a session to play an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="playCommand">The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now.</param>
        /// <param name="itemIds">The ids of the items to play, comma delimited.</param>
        /// <param name="startPositionTicks">The starting position of the first item. (optional)</param>
        /// <param name="mediaSourceId">Optional. The media source id. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to play. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to play. (optional)</param>
        /// <param name="startIndex">Optional. The start index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PlayAsync (string sessionId, PlayCommand playCommand, List<Guid> itemIds, long? startPositionTicks = default(long?), string mediaSourceId = default(string), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? startIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Instructs a session to play an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="playCommand">The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now.</param>
        /// <param name="itemIds">The ids of the items to play, comma delimited.</param>
        /// <param name="startPositionTicks">The starting position of the first item. (optional)</param>
        /// <param name="mediaSourceId">Optional. The media source id. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to play. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to play. (optional)</param>
        /// <param name="startIndex">Optional. The start index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PlayWithHttpInfoAsync (string sessionId, PlayCommand playCommand, List<Guid> itemIds, long? startPositionTicks = default(long?), string mediaSourceId = default(string), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? startIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates capabilities for a device.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session id. (optional)</param>
        /// <param name="playableMediaTypes">A list of playable media types, comma delimited. Audio, Video, Book, Photo. (optional)</param>
        /// <param name="supportedCommands">A list of supported remote control commands, comma delimited. (optional)</param>
        /// <param name="supportsMediaControl">Determines whether media can be played remotely.. (optional, default to false)</param>
        /// <param name="supportsSync">Determines whether sync is supported. (optional, default to false)</param>
        /// <param name="supportsPersistentIdentifier">Determines whether the device supports a unique identifier. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCapabilitiesAsync (string id = default(string), List<string> playableMediaTypes = default(List<string>), List<GeneralCommandType> supportedCommands = default(List<GeneralCommandType>), bool? supportsMediaControl = default(bool?), bool? supportsSync = default(bool?), bool? supportsPersistentIdentifier = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates capabilities for a device.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session id. (optional)</param>
        /// <param name="playableMediaTypes">A list of playable media types, comma delimited. Audio, Video, Book, Photo. (optional)</param>
        /// <param name="supportedCommands">A list of supported remote control commands, comma delimited. (optional)</param>
        /// <param name="supportsMediaControl">Determines whether media can be played remotely.. (optional, default to false)</param>
        /// <param name="supportsSync">Determines whether sync is supported. (optional, default to false)</param>
        /// <param name="supportsPersistentIdentifier">Determines whether the device supports a unique identifier. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCapabilitiesWithHttpInfoAsync (string id = default(string), List<string> playableMediaTypes = default(List<string>), List<GeneralCommandType> supportedCommands = default(List<GeneralCommandType>), bool? supportsMediaControl = default(bool?), bool? supportsSync = default(bool?), bool? supportsPersistentIdentifier = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates capabilities for a device.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.ClientCapabilities.</param>
        /// <param name="id">The session id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostFullCapabilitiesAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, string id = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates capabilities for a device.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.ClientCapabilities.</param>
        /// <param name="id">The session id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostFullCapabilitiesWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, string id = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Removes an additional user from a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveUserFromSessionAsync (string sessionId, Guid userId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes an additional user from a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveUserFromSessionWithHttpInfoAsync (string sessionId, Guid userId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reports that a session has ended.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReportSessionEndedAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports that a session has ended.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReportSessionEndedWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reports that a session is viewing an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="sessionId">The session id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReportViewingAsync (string itemId, string sessionId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports that a session is viewing an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="sessionId">The session id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReportViewingWithHttpInfoAsync (string itemId, string sessionId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Issues a full general command to a client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.GeneralCommand.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendFullGeneralCommandAsync (string sessionId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Issues a full general command to a client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.GeneralCommand.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendFullGeneralCommandWithHttpInfoAsync (string sessionId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Issues a general command to a client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The command to send.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendGeneralCommandAsync (string sessionId, GeneralCommandType command, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Issues a general command to a client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The command to send.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendGeneralCommandWithHttpInfoAsync (string sessionId, GeneralCommandType command, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Issues a command to a client to display a message to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.MessageCommand object containing Header, Message Text, and TimeoutMs.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendMessageCommandAsync (string sessionId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Issues a command to a client to display a message to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.MessageCommand object containing Header, Message Text, and TimeoutMs.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendMessageCommandWithHttpInfoAsync (string sessionId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Issues a playstate command to a client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The MediaBrowser.Model.Session.PlaystateCommand.</param>
        /// <param name="seekPositionTicks">The optional position ticks. (optional)</param>
        /// <param name="controllingUserId">The optional controlling user id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendPlaystateCommandAsync (string sessionId, PlaystateCommand command, long? seekPositionTicks = default(long?), string controllingUserId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Issues a playstate command to a client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The MediaBrowser.Model.Session.PlaystateCommand.</param>
        /// <param name="seekPositionTicks">The optional position ticks. (optional)</param>
        /// <param name="controllingUserId">The optional controlling user id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendPlaystateCommandWithHttpInfoAsync (string sessionId, PlaystateCommand command, long? seekPositionTicks = default(long?), string controllingUserId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Issues a system command to a client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The command to send.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendSystemCommandAsync (string sessionId, GeneralCommandType command, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Issues a system command to a client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The command to send.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendSystemCommandWithHttpInfoAsync (string sessionId, GeneralCommandType command, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SessionApi : ISessionApi
    {
        private Jellyfin.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SessionApi(String basePath)
        {
            this.Configuration = new Jellyfin.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionApi"/> class
        /// </summary>
        /// <returns></returns>
        public SessionApi()
        {
            this.Configuration = Jellyfin.Api.Client.Configuration.Default;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SessionApi(Jellyfin.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Jellyfin.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Jellyfin.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Jellyfin.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds an additional user to a session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public void AddUserToSession (string sessionId, Guid userId)
        {
             AddUserToSessionWithHttpInfo(sessionId, userId);
        }

        /// <summary>
        /// Adds an additional user to a session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddUserToSessionWithHttpInfo (string sessionId, Guid userId)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->AddUserToSession");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling SessionApi->AddUserToSession");

            var localVarPath = "/Sessions/{sessionId}/User/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUserToSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Adds an additional user to a session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddUserToSessionAsync (string sessionId, Guid userId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await AddUserToSessionWithHttpInfoAsync(sessionId, userId, cancellationToken);

        }

        /// <summary>
        /// Adds an additional user to a session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddUserToSessionWithHttpInfoAsync (string sessionId, Guid userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->AddUserToSession");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling SessionApi->AddUserToSession");

            var localVarPath = "/Sessions/{sessionId}/User/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUserToSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Instructs a session to browse to an item or view. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session Id.</param>
        /// <param name="itemType">The type of item to browse to.</param>
        /// <param name="itemId">The Id of the item.</param>
        /// <param name="itemName">The name of the item.</param>
        /// <returns></returns>
        public void DisplayContent (string sessionId, string itemType, string itemId, string itemName)
        {
             DisplayContentWithHttpInfo(sessionId, itemType, itemId, itemName);
        }

        /// <summary>
        /// Instructs a session to browse to an item or view. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session Id.</param>
        /// <param name="itemType">The type of item to browse to.</param>
        /// <param name="itemId">The Id of the item.</param>
        /// <param name="itemName">The name of the item.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DisplayContentWithHttpInfo (string sessionId, string itemType, string itemId, string itemName)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->DisplayContent");
            // verify the required parameter 'itemType' is set
            if (itemType == null)
                throw new ApiException(400, "Missing required parameter 'itemType' when calling SessionApi->DisplayContent");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling SessionApi->DisplayContent");
            // verify the required parameter 'itemName' is set
            if (itemName == null)
                throw new ApiException(400, "Missing required parameter 'itemName' when calling SessionApi->DisplayContent");

            var localVarPath = "/Sessions/{sessionId}/Viewing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (itemType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemType", itemType)); // query parameter
            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemId", itemId)); // query parameter
            if (itemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemName", itemName)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisplayContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Instructs a session to browse to an item or view. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session Id.</param>
        /// <param name="itemType">The type of item to browse to.</param>
        /// <param name="itemId">The Id of the item.</param>
        /// <param name="itemName">The name of the item.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DisplayContentAsync (string sessionId, string itemType, string itemId, string itemName, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DisplayContentWithHttpInfoAsync(sessionId, itemType, itemId, itemName, cancellationToken);

        }

        /// <summary>
        /// Instructs a session to browse to an item or view. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session Id.</param>
        /// <param name="itemType">The type of item to browse to.</param>
        /// <param name="itemId">The Id of the item.</param>
        /// <param name="itemName">The name of the item.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DisplayContentWithHttpInfoAsync (string sessionId, string itemType, string itemId, string itemName, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->DisplayContent");
            // verify the required parameter 'itemType' is set
            if (itemType == null)
                throw new ApiException(400, "Missing required parameter 'itemType' when calling SessionApi->DisplayContent");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling SessionApi->DisplayContent");
            // verify the required parameter 'itemName' is set
            if (itemName == null)
                throw new ApiException(400, "Missing required parameter 'itemName' when calling SessionApi->DisplayContent");

            var localVarPath = "/Sessions/{sessionId}/Viewing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (itemType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemType", itemType)); // query parameter
            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemId", itemId)); // query parameter
            if (itemName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemName", itemName)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisplayContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get all auth providers. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;NameIdPair&gt;</returns>
        public List<NameIdPair> GetAuthProviders ()
        {
             ApiResponse<List<NameIdPair>> localVarResponse = GetAuthProvidersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all auth providers. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;NameIdPair&gt;</returns>
        public ApiResponse<List<NameIdPair>> GetAuthProvidersWithHttpInfo ()
        {

            var localVarPath = "/Auth/Providers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NameIdPair>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<NameIdPair>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NameIdPair>)));
        }

        /// <summary>
        /// Get all auth providers. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;NameIdPair&gt;</returns>
        public async System.Threading.Tasks.Task<List<NameIdPair>> GetAuthProvidersAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<NameIdPair>> localVarResponse = await GetAuthProvidersWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all auth providers. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;NameIdPair&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NameIdPair>>> GetAuthProvidersWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Auth/Providers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NameIdPair>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<NameIdPair>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NameIdPair>)));
        }

        /// <summary>
        /// Get all password reset providers. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;NameIdPair&gt;</returns>
        public List<NameIdPair> GetPasswordResetProviders ()
        {
             ApiResponse<List<NameIdPair>> localVarResponse = GetPasswordResetProvidersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all password reset providers. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;NameIdPair&gt;</returns>
        public ApiResponse<List<NameIdPair>> GetPasswordResetProvidersWithHttpInfo ()
        {

            var localVarPath = "/Auth/PasswordResetProviders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPasswordResetProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NameIdPair>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<NameIdPair>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NameIdPair>)));
        }

        /// <summary>
        /// Get all password reset providers. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;NameIdPair&gt;</returns>
        public async System.Threading.Tasks.Task<List<NameIdPair>> GetPasswordResetProvidersAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<NameIdPair>> localVarResponse = await GetPasswordResetProvidersWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all password reset providers. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;NameIdPair&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NameIdPair>>> GetPasswordResetProvidersWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Auth/PasswordResetProviders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPasswordResetProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NameIdPair>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<NameIdPair>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NameIdPair>)));
        }

        /// <summary>
        /// Gets a list of sessions. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="controllableByUserId">Filter by sessions that a given user is allowed to remote control. (optional)</param>
        /// <param name="deviceId">Filter by device Id. (optional)</param>
        /// <param name="activeWithinSeconds">Optional. Filter by sessions that were active in the last n seconds. (optional)</param>
        /// <returns>List&lt;SessionInfo&gt;</returns>
        public List<SessionInfo> GetSessions (Guid? controllableByUserId = default(Guid?), string deviceId = default(string), int? activeWithinSeconds = default(int?))
        {
             ApiResponse<List<SessionInfo>> localVarResponse = GetSessionsWithHttpInfo(controllableByUserId, deviceId, activeWithinSeconds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of sessions. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="controllableByUserId">Filter by sessions that a given user is allowed to remote control. (optional)</param>
        /// <param name="deviceId">Filter by device Id. (optional)</param>
        /// <param name="activeWithinSeconds">Optional. Filter by sessions that were active in the last n seconds. (optional)</param>
        /// <returns>ApiResponse of List&lt;SessionInfo&gt;</returns>
        public ApiResponse<List<SessionInfo>> GetSessionsWithHttpInfo (Guid? controllableByUserId = default(Guid?), string deviceId = default(string), int? activeWithinSeconds = default(int?))
        {

            var localVarPath = "/Sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (controllableByUserId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "controllableByUserId", controllableByUserId)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceId", deviceId)); // query parameter
            if (activeWithinSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activeWithinSeconds", activeWithinSeconds)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SessionInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SessionInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SessionInfo>)));
        }

        /// <summary>
        /// Gets a list of sessions. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="controllableByUserId">Filter by sessions that a given user is allowed to remote control. (optional)</param>
        /// <param name="deviceId">Filter by device Id. (optional)</param>
        /// <param name="activeWithinSeconds">Optional. Filter by sessions that were active in the last n seconds. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;SessionInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<SessionInfo>> GetSessionsAsync (Guid? controllableByUserId = default(Guid?), string deviceId = default(string), int? activeWithinSeconds = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<SessionInfo>> localVarResponse = await GetSessionsWithHttpInfoAsync(controllableByUserId, deviceId, activeWithinSeconds, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of sessions. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="controllableByUserId">Filter by sessions that a given user is allowed to remote control. (optional)</param>
        /// <param name="deviceId">Filter by device Id. (optional)</param>
        /// <param name="activeWithinSeconds">Optional. Filter by sessions that were active in the last n seconds. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;SessionInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SessionInfo>>> GetSessionsWithHttpInfoAsync (Guid? controllableByUserId = default(Guid?), string deviceId = default(string), int? activeWithinSeconds = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (controllableByUserId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "controllableByUserId", controllableByUserId)); // query parameter
            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceId", deviceId)); // query parameter
            if (activeWithinSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activeWithinSeconds", activeWithinSeconds)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SessionInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SessionInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SessionInfo>)));
        }

        /// <summary>
        /// Instructs a session to play an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="playCommand">The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now.</param>
        /// <param name="itemIds">The ids of the items to play, comma delimited.</param>
        /// <param name="startPositionTicks">The starting position of the first item. (optional)</param>
        /// <param name="mediaSourceId">Optional. The media source id. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to play. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to play. (optional)</param>
        /// <param name="startIndex">Optional. The start index. (optional)</param>
        /// <returns></returns>
        public void Play (string sessionId, PlayCommand playCommand, List<Guid> itemIds, long? startPositionTicks = default(long?), string mediaSourceId = default(string), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? startIndex = default(int?))
        {
             PlayWithHttpInfo(sessionId, playCommand, itemIds, startPositionTicks, mediaSourceId, audioStreamIndex, subtitleStreamIndex, startIndex);
        }

        /// <summary>
        /// Instructs a session to play an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="playCommand">The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now.</param>
        /// <param name="itemIds">The ids of the items to play, comma delimited.</param>
        /// <param name="startPositionTicks">The starting position of the first item. (optional)</param>
        /// <param name="mediaSourceId">Optional. The media source id. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to play. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to play. (optional)</param>
        /// <param name="startIndex">Optional. The start index. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PlayWithHttpInfo (string sessionId, PlayCommand playCommand, List<Guid> itemIds, long? startPositionTicks = default(long?), string mediaSourceId = default(string), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? startIndex = default(int?))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->Play");
            // verify the required parameter 'playCommand' is set
            if (playCommand == null)
                throw new ApiException(400, "Missing required parameter 'playCommand' when calling SessionApi->Play");
            // verify the required parameter 'itemIds' is set
            if (itemIds == null)
                throw new ApiException(400, "Missing required parameter 'itemIds' when calling SessionApi->Play");

            var localVarPath = "/Sessions/{sessionId}/Playing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (playCommand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playCommand", playCommand)); // query parameter
            if (itemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "itemIds", itemIds)); // query parameter
            if (startPositionTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startPositionTicks", startPositionTicks)); // query parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (audioStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioStreamIndex", audioStreamIndex)); // query parameter
            if (subtitleStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleStreamIndex", subtitleStreamIndex)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Play", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Instructs a session to play an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="playCommand">The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now.</param>
        /// <param name="itemIds">The ids of the items to play, comma delimited.</param>
        /// <param name="startPositionTicks">The starting position of the first item. (optional)</param>
        /// <param name="mediaSourceId">Optional. The media source id. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to play. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to play. (optional)</param>
        /// <param name="startIndex">Optional. The start index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PlayAsync (string sessionId, PlayCommand playCommand, List<Guid> itemIds, long? startPositionTicks = default(long?), string mediaSourceId = default(string), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? startIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             await PlayWithHttpInfoAsync(sessionId, playCommand, itemIds, startPositionTicks, mediaSourceId, audioStreamIndex, subtitleStreamIndex, startIndex, cancellationToken);

        }

        /// <summary>
        /// Instructs a session to play an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="playCommand">The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now.</param>
        /// <param name="itemIds">The ids of the items to play, comma delimited.</param>
        /// <param name="startPositionTicks">The starting position of the first item. (optional)</param>
        /// <param name="mediaSourceId">Optional. The media source id. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to play. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to play. (optional)</param>
        /// <param name="startIndex">Optional. The start index. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PlayWithHttpInfoAsync (string sessionId, PlayCommand playCommand, List<Guid> itemIds, long? startPositionTicks = default(long?), string mediaSourceId = default(string), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? startIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->Play");
            // verify the required parameter 'playCommand' is set
            if (playCommand == null)
                throw new ApiException(400, "Missing required parameter 'playCommand' when calling SessionApi->Play");
            // verify the required parameter 'itemIds' is set
            if (itemIds == null)
                throw new ApiException(400, "Missing required parameter 'itemIds' when calling SessionApi->Play");

            var localVarPath = "/Sessions/{sessionId}/Playing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (playCommand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playCommand", playCommand)); // query parameter
            if (itemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "itemIds", itemIds)); // query parameter
            if (startPositionTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startPositionTicks", startPositionTicks)); // query parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (audioStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioStreamIndex", audioStreamIndex)); // query parameter
            if (subtitleStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleStreamIndex", subtitleStreamIndex)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Play", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates capabilities for a device. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session id. (optional)</param>
        /// <param name="playableMediaTypes">A list of playable media types, comma delimited. Audio, Video, Book, Photo. (optional)</param>
        /// <param name="supportedCommands">A list of supported remote control commands, comma delimited. (optional)</param>
        /// <param name="supportsMediaControl">Determines whether media can be played remotely.. (optional, default to false)</param>
        /// <param name="supportsSync">Determines whether sync is supported. (optional, default to false)</param>
        /// <param name="supportsPersistentIdentifier">Determines whether the device supports a unique identifier. (optional, default to true)</param>
        /// <returns></returns>
        public void PostCapabilities (string id = default(string), List<string> playableMediaTypes = default(List<string>), List<GeneralCommandType> supportedCommands = default(List<GeneralCommandType>), bool? supportsMediaControl = default(bool?), bool? supportsSync = default(bool?), bool? supportsPersistentIdentifier = default(bool?))
        {
             PostCapabilitiesWithHttpInfo(id, playableMediaTypes, supportedCommands, supportsMediaControl, supportsSync, supportsPersistentIdentifier);
        }

        /// <summary>
        /// Updates capabilities for a device. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session id. (optional)</param>
        /// <param name="playableMediaTypes">A list of playable media types, comma delimited. Audio, Video, Book, Photo. (optional)</param>
        /// <param name="supportedCommands">A list of supported remote control commands, comma delimited. (optional)</param>
        /// <param name="supportsMediaControl">Determines whether media can be played remotely.. (optional, default to false)</param>
        /// <param name="supportsSync">Determines whether sync is supported. (optional, default to false)</param>
        /// <param name="supportsPersistentIdentifier">Determines whether the device supports a unique identifier. (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostCapabilitiesWithHttpInfo (string id = default(string), List<string> playableMediaTypes = default(List<string>), List<GeneralCommandType> supportedCommands = default(List<GeneralCommandType>), bool? supportsMediaControl = default(bool?), bool? supportsSync = default(bool?), bool? supportsPersistentIdentifier = default(bool?))
        {

            var localVarPath = "/Sessions/Capabilities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (playableMediaTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "playableMediaTypes", playableMediaTypes)); // query parameter
            if (supportedCommands != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "supportedCommands", supportedCommands)); // query parameter
            if (supportsMediaControl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "supportsMediaControl", supportsMediaControl)); // query parameter
            if (supportsSync != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "supportsSync", supportsSync)); // query parameter
            if (supportsPersistentIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "supportsPersistentIdentifier", supportsPersistentIdentifier)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCapabilities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates capabilities for a device. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session id. (optional)</param>
        /// <param name="playableMediaTypes">A list of playable media types, comma delimited. Audio, Video, Book, Photo. (optional)</param>
        /// <param name="supportedCommands">A list of supported remote control commands, comma delimited. (optional)</param>
        /// <param name="supportsMediaControl">Determines whether media can be played remotely.. (optional, default to false)</param>
        /// <param name="supportsSync">Determines whether sync is supported. (optional, default to false)</param>
        /// <param name="supportsPersistentIdentifier">Determines whether the device supports a unique identifier. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCapabilitiesAsync (string id = default(string), List<string> playableMediaTypes = default(List<string>), List<GeneralCommandType> supportedCommands = default(List<GeneralCommandType>), bool? supportsMediaControl = default(bool?), bool? supportsSync = default(bool?), bool? supportsPersistentIdentifier = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostCapabilitiesWithHttpInfoAsync(id, playableMediaTypes, supportedCommands, supportsMediaControl, supportsSync, supportsPersistentIdentifier, cancellationToken);

        }

        /// <summary>
        /// Updates capabilities for a device. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session id. (optional)</param>
        /// <param name="playableMediaTypes">A list of playable media types, comma delimited. Audio, Video, Book, Photo. (optional)</param>
        /// <param name="supportedCommands">A list of supported remote control commands, comma delimited. (optional)</param>
        /// <param name="supportsMediaControl">Determines whether media can be played remotely.. (optional, default to false)</param>
        /// <param name="supportsSync">Determines whether sync is supported. (optional, default to false)</param>
        /// <param name="supportsPersistentIdentifier">Determines whether the device supports a unique identifier. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostCapabilitiesWithHttpInfoAsync (string id = default(string), List<string> playableMediaTypes = default(List<string>), List<GeneralCommandType> supportedCommands = default(List<GeneralCommandType>), bool? supportsMediaControl = default(bool?), bool? supportsSync = default(bool?), bool? supportsPersistentIdentifier = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Sessions/Capabilities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (playableMediaTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "playableMediaTypes", playableMediaTypes)); // query parameter
            if (supportedCommands != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "supportedCommands", supportedCommands)); // query parameter
            if (supportsMediaControl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "supportsMediaControl", supportsMediaControl)); // query parameter
            if (supportsSync != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "supportsSync", supportsSync)); // query parameter
            if (supportsPersistentIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "supportsPersistentIdentifier", supportsPersistentIdentifier)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCapabilities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates capabilities for a device. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.ClientCapabilities.</param>
        /// <param name="id">The session id. (optional)</param>
        /// <returns></returns>
        public void PostFullCapabilities (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, string id = default(string))
        {
             PostFullCapabilitiesWithHttpInfo(UNKNOWN_BASE_TYPE, id);
        }

        /// <summary>
        /// Updates capabilities for a device. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.ClientCapabilities.</param>
        /// <param name="id">The session id. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostFullCapabilitiesWithHttpInfo (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, string id = default(string))
        {
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling SessionApi->PostFullCapabilities");

            var localVarPath = "/Sessions/Capabilities/Full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFullCapabilities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates capabilities for a device. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.ClientCapabilities.</param>
        /// <param name="id">The session id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostFullCapabilitiesAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostFullCapabilitiesWithHttpInfoAsync(UNKNOWN_BASE_TYPE, id, cancellationToken);

        }

        /// <summary>
        /// Updates capabilities for a device. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.ClientCapabilities.</param>
        /// <param name="id">The session id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostFullCapabilitiesWithHttpInfoAsync (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling SessionApi->PostFullCapabilities");

            var localVarPath = "/Sessions/Capabilities/Full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFullCapabilities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Removes an additional user from a session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns></returns>
        public void RemoveUserFromSession (string sessionId, Guid userId)
        {
             RemoveUserFromSessionWithHttpInfo(sessionId, userId);
        }

        /// <summary>
        /// Removes an additional user from a session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveUserFromSessionWithHttpInfo (string sessionId, Guid userId)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->RemoveUserFromSession");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling SessionApi->RemoveUserFromSession");

            var localVarPath = "/Sessions/{sessionId}/User/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUserFromSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Removes an additional user from a session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveUserFromSessionAsync (string sessionId, Guid userId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await RemoveUserFromSessionWithHttpInfoAsync(sessionId, userId, cancellationToken);

        }

        /// <summary>
        /// Removes an additional user from a session. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveUserFromSessionWithHttpInfoAsync (string sessionId, Guid userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->RemoveUserFromSession");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling SessionApi->RemoveUserFromSession");

            var localVarPath = "/Sessions/{sessionId}/User/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUserFromSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports that a session has ended. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ReportSessionEnded ()
        {
             ReportSessionEndedWithHttpInfo();
        }

        /// <summary>
        /// Reports that a session has ended. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReportSessionEndedWithHttpInfo ()
        {

            var localVarPath = "/Sessions/Logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportSessionEnded", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports that a session has ended. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReportSessionEndedAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             await ReportSessionEndedWithHttpInfoAsync(cancellationToken);

        }

        /// <summary>
        /// Reports that a session has ended. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReportSessionEndedWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Sessions/Logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportSessionEnded", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports that a session is viewing an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="sessionId">The session id. (optional)</param>
        /// <returns></returns>
        public void ReportViewing (string itemId, string sessionId = default(string))
        {
             ReportViewingWithHttpInfo(itemId, sessionId);
        }

        /// <summary>
        /// Reports that a session is viewing an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="sessionId">The session id. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReportViewingWithHttpInfo (string itemId, string sessionId = default(string))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling SessionApi->ReportViewing");

            var localVarPath = "/Sessions/Viewing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sessionId", sessionId)); // query parameter
            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemId", itemId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportViewing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports that a session is viewing an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="sessionId">The session id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReportViewingAsync (string itemId, string sessionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await ReportViewingWithHttpInfoAsync(itemId, sessionId, cancellationToken);

        }

        /// <summary>
        /// Reports that a session is viewing an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="sessionId">The session id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReportViewingWithHttpInfoAsync (string itemId, string sessionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling SessionApi->ReportViewing");

            var localVarPath = "/Sessions/Viewing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sessionId", sessionId)); // query parameter
            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemId", itemId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportViewing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Issues a full general command to a client. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.GeneralCommand.</param>
        /// <returns></returns>
        public void SendFullGeneralCommand (string sessionId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
             SendFullGeneralCommandWithHttpInfo(sessionId, UNKNOWN_BASE_TYPE);
        }

        /// <summary>
        /// Issues a full general command to a client. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.GeneralCommand.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SendFullGeneralCommandWithHttpInfo (string sessionId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->SendFullGeneralCommand");
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling SessionApi->SendFullGeneralCommand");

            var localVarPath = "/Sessions/{sessionId}/Command";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendFullGeneralCommand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Issues a full general command to a client. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.GeneralCommand.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendFullGeneralCommandAsync (string sessionId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
             await SendFullGeneralCommandWithHttpInfoAsync(sessionId, UNKNOWN_BASE_TYPE, cancellationToken);

        }

        /// <summary>
        /// Issues a full general command to a client. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.GeneralCommand.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SendFullGeneralCommandWithHttpInfoAsync (string sessionId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->SendFullGeneralCommand");
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling SessionApi->SendFullGeneralCommand");

            var localVarPath = "/Sessions/{sessionId}/Command";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendFullGeneralCommand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Issues a general command to a client. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The command to send.</param>
        /// <returns></returns>
        public void SendGeneralCommand (string sessionId, GeneralCommandType command)
        {
             SendGeneralCommandWithHttpInfo(sessionId, command);
        }

        /// <summary>
        /// Issues a general command to a client. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The command to send.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SendGeneralCommandWithHttpInfo (string sessionId, GeneralCommandType command)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->SendGeneralCommand");
            // verify the required parameter 'command' is set
            if (command == null)
                throw new ApiException(400, "Missing required parameter 'command' when calling SessionApi->SendGeneralCommand");

            var localVarPath = "/Sessions/{sessionId}/Command/{command}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (command != null) localVarPathParams.Add("command", this.Configuration.ApiClient.ParameterToString(command)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendGeneralCommand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Issues a general command to a client. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The command to send.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendGeneralCommandAsync (string sessionId, GeneralCommandType command, CancellationToken cancellationToken = default(CancellationToken))
        {
             await SendGeneralCommandWithHttpInfoAsync(sessionId, command, cancellationToken);

        }

        /// <summary>
        /// Issues a general command to a client. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The command to send.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SendGeneralCommandWithHttpInfoAsync (string sessionId, GeneralCommandType command, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->SendGeneralCommand");
            // verify the required parameter 'command' is set
            if (command == null)
                throw new ApiException(400, "Missing required parameter 'command' when calling SessionApi->SendGeneralCommand");

            var localVarPath = "/Sessions/{sessionId}/Command/{command}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (command != null) localVarPathParams.Add("command", this.Configuration.ApiClient.ParameterToString(command)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendGeneralCommand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Issues a command to a client to display a message to the user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.MessageCommand object containing Header, Message Text, and TimeoutMs.</param>
        /// <returns></returns>
        public void SendMessageCommand (string sessionId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
             SendMessageCommandWithHttpInfo(sessionId, UNKNOWN_BASE_TYPE);
        }

        /// <summary>
        /// Issues a command to a client to display a message to the user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.MessageCommand object containing Header, Message Text, and TimeoutMs.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SendMessageCommandWithHttpInfo (string sessionId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->SendMessageCommand");
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling SessionApi->SendMessageCommand");

            var localVarPath = "/Sessions/{sessionId}/Message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMessageCommand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Issues a command to a client to display a message to the user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.MessageCommand object containing Header, Message Text, and TimeoutMs.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendMessageCommandAsync (string sessionId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
             await SendMessageCommandWithHttpInfoAsync(sessionId, UNKNOWN_BASE_TYPE, cancellationToken);

        }

        /// <summary>
        /// Issues a command to a client to display a message to the user. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="UNKNOWN_BASE_TYPE">The MediaBrowser.Model.Session.MessageCommand object containing Header, Message Text, and TimeoutMs.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SendMessageCommandWithHttpInfoAsync (string sessionId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->SendMessageCommand");
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling SessionApi->SendMessageCommand");

            var localVarPath = "/Sessions/{sessionId}/Message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMessageCommand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Issues a playstate command to a client. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The MediaBrowser.Model.Session.PlaystateCommand.</param>
        /// <param name="seekPositionTicks">The optional position ticks. (optional)</param>
        /// <param name="controllingUserId">The optional controlling user id. (optional)</param>
        /// <returns></returns>
        public void SendPlaystateCommand (string sessionId, PlaystateCommand command, long? seekPositionTicks = default(long?), string controllingUserId = default(string))
        {
             SendPlaystateCommandWithHttpInfo(sessionId, command, seekPositionTicks, controllingUserId);
        }

        /// <summary>
        /// Issues a playstate command to a client. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The MediaBrowser.Model.Session.PlaystateCommand.</param>
        /// <param name="seekPositionTicks">The optional position ticks. (optional)</param>
        /// <param name="controllingUserId">The optional controlling user id. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SendPlaystateCommandWithHttpInfo (string sessionId, PlaystateCommand command, long? seekPositionTicks = default(long?), string controllingUserId = default(string))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->SendPlaystateCommand");
            // verify the required parameter 'command' is set
            if (command == null)
                throw new ApiException(400, "Missing required parameter 'command' when calling SessionApi->SendPlaystateCommand");

            var localVarPath = "/Sessions/{sessionId}/Playing/{command}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (command != null) localVarPathParams.Add("command", this.Configuration.ApiClient.ParameterToString(command)); // path parameter
            if (seekPositionTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seekPositionTicks", seekPositionTicks)); // query parameter
            if (controllingUserId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "controllingUserId", controllingUserId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendPlaystateCommand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Issues a playstate command to a client. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The MediaBrowser.Model.Session.PlaystateCommand.</param>
        /// <param name="seekPositionTicks">The optional position ticks. (optional)</param>
        /// <param name="controllingUserId">The optional controlling user id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendPlaystateCommandAsync (string sessionId, PlaystateCommand command, long? seekPositionTicks = default(long?), string controllingUserId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await SendPlaystateCommandWithHttpInfoAsync(sessionId, command, seekPositionTicks, controllingUserId, cancellationToken);

        }

        /// <summary>
        /// Issues a playstate command to a client. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The MediaBrowser.Model.Session.PlaystateCommand.</param>
        /// <param name="seekPositionTicks">The optional position ticks. (optional)</param>
        /// <param name="controllingUserId">The optional controlling user id. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SendPlaystateCommandWithHttpInfoAsync (string sessionId, PlaystateCommand command, long? seekPositionTicks = default(long?), string controllingUserId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->SendPlaystateCommand");
            // verify the required parameter 'command' is set
            if (command == null)
                throw new ApiException(400, "Missing required parameter 'command' when calling SessionApi->SendPlaystateCommand");

            var localVarPath = "/Sessions/{sessionId}/Playing/{command}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (command != null) localVarPathParams.Add("command", this.Configuration.ApiClient.ParameterToString(command)); // path parameter
            if (seekPositionTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seekPositionTicks", seekPositionTicks)); // query parameter
            if (controllingUserId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "controllingUserId", controllingUserId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendPlaystateCommand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Issues a system command to a client. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The command to send.</param>
        /// <returns></returns>
        public void SendSystemCommand (string sessionId, GeneralCommandType command)
        {
             SendSystemCommandWithHttpInfo(sessionId, command);
        }

        /// <summary>
        /// Issues a system command to a client. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The command to send.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SendSystemCommandWithHttpInfo (string sessionId, GeneralCommandType command)
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->SendSystemCommand");
            // verify the required parameter 'command' is set
            if (command == null)
                throw new ApiException(400, "Missing required parameter 'command' when calling SessionApi->SendSystemCommand");

            var localVarPath = "/Sessions/{sessionId}/System/{command}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (command != null) localVarPathParams.Add("command", this.Configuration.ApiClient.ParameterToString(command)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendSystemCommand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Issues a system command to a client. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The command to send.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendSystemCommandAsync (string sessionId, GeneralCommandType command, CancellationToken cancellationToken = default(CancellationToken))
        {
             await SendSystemCommandWithHttpInfoAsync(sessionId, command, cancellationToken);

        }

        /// <summary>
        /// Issues a system command to a client. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The session id.</param>
        /// <param name="command">The command to send.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SendSystemCommandWithHttpInfoAsync (string sessionId, GeneralCommandType command, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling SessionApi->SendSystemCommand");
            // verify the required parameter 'command' is set
            if (command == null)
                throw new ApiException(400, "Missing required parameter 'command' when calling SessionApi->SendSystemCommand");

            var localVarPath = "/Sessions/{sessionId}/System/{command}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter
            if (command != null) localVarPathParams.Add("command", this.Configuration.ApiClient.ParameterToString(command)); // path parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendSystemCommand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
