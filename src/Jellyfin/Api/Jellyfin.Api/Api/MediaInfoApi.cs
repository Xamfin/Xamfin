/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Jellyfin.Api.Client;
using Jellyfin.Api.Model;

namespace Jellyfin.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMediaInfoApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Closes a media source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamId">The livestream id.</param>
        /// <returns></returns>
        void CloseLiveStream (string liveStreamId);

        /// <summary>
        /// Closes a media source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamId">The livestream id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CloseLiveStreamWithHttpInfo (string liveStreamId);
        /// <summary>
        /// Tests the network with a request with the size of the bitrate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The bitrate. Defaults to 102400. (optional, default to 102400)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetBitrateTestBytes (int? size = default(int?));

        /// <summary>
        /// Tests the network with a request with the size of the bitrate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The bitrate. Defaults to 102400. (optional, default to 102400)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetBitrateTestBytesWithHttpInfo (int? size = default(int?));
        /// <summary>
        /// Gets live playback media info for an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>PlaybackInfoResponse</returns>
        PlaybackInfoResponse GetPlaybackInfo (Guid itemId, Guid userId);

        /// <summary>
        /// Gets live playback media info for an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>ApiResponse of PlaybackInfoResponse</returns>
        ApiResponse<PlaybackInfoResponse> GetPlaybackInfoWithHttpInfo (Guid itemId, Guid userId);
        /// <summary>
        /// Gets live playback media info for an item.
        /// </summary>
        /// <remarks>
        /// For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="maxStreamingBitrate">The maximum streaming bitrate. (optional)</param>
        /// <param name="startTimeTicks">The start time in ticks. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="maxAudioChannels">The maximum number of audio channels. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="liveStreamId">The livestream id. (optional)</param>
        /// <param name="autoOpenLiveStream">Whether to auto open the livestream. (optional)</param>
        /// <param name="enableDirectPlay">Whether to enable direct play. Default: true. (optional)</param>
        /// <param name="enableDirectStream">Whether to enable direct stream. Default: true. (optional)</param>
        /// <param name="enableTranscoding">Whether to enable transcoding. Default: true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether to allow to copy the video stream. Default: true. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether to allow to copy the audio stream. Default: true. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The playback info. (optional)</param>
        /// <returns>PlaybackInfoResponse</returns>
        PlaybackInfoResponse GetPostedPlaybackInfo (Guid itemId, Guid? userId = default(Guid?), int? maxStreamingBitrate = default(int?), long? startTimeTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? maxAudioChannels = default(int?), string mediaSourceId = default(string), string liveStreamId = default(string), bool? autoOpenLiveStream = default(bool?), bool? enableDirectPlay = default(bool?), bool? enableDirectStream = default(bool?), bool? enableTranscoding = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));

        /// <summary>
        /// Gets live playback media info for an item.
        /// </summary>
        /// <remarks>
        /// For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="maxStreamingBitrate">The maximum streaming bitrate. (optional)</param>
        /// <param name="startTimeTicks">The start time in ticks. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="maxAudioChannels">The maximum number of audio channels. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="liveStreamId">The livestream id. (optional)</param>
        /// <param name="autoOpenLiveStream">Whether to auto open the livestream. (optional)</param>
        /// <param name="enableDirectPlay">Whether to enable direct play. Default: true. (optional)</param>
        /// <param name="enableDirectStream">Whether to enable direct stream. Default: true. (optional)</param>
        /// <param name="enableTranscoding">Whether to enable transcoding. Default: true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether to allow to copy the video stream. Default: true. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether to allow to copy the audio stream. Default: true. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The playback info. (optional)</param>
        /// <returns>ApiResponse of PlaybackInfoResponse</returns>
        ApiResponse<PlaybackInfoResponse> GetPostedPlaybackInfoWithHttpInfo (Guid itemId, Guid? userId = default(Guid?), int? maxStreamingBitrate = default(int?), long? startTimeTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? maxAudioChannels = default(int?), string mediaSourceId = default(string), string liveStreamId = default(string), bool? autoOpenLiveStream = default(bool?), bool? enableDirectPlay = default(bool?), bool? enableDirectStream = default(bool?), bool? enableTranscoding = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));
        /// <summary>
        /// Opens a media source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openToken">The open token. (optional)</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="maxStreamingBitrate">The maximum streaming bitrate. (optional)</param>
        /// <param name="startTimeTicks">The start time in ticks. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="maxAudioChannels">The maximum number of audio channels. (optional)</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="enableDirectPlay">Whether to enable direct play. Default: true. (optional)</param>
        /// <param name="enableDirectStream">Whether to enable direct stream. Default: true. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The open live stream dto. (optional)</param>
        /// <returns>LiveStreamResponse</returns>
        LiveStreamResponse OpenLiveStream (string openToken = default(string), Guid? userId = default(Guid?), string playSessionId = default(string), int? maxStreamingBitrate = default(int?), long? startTimeTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? maxAudioChannels = default(int?), Guid? itemId = default(Guid?), bool? enableDirectPlay = default(bool?), bool? enableDirectStream = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));

        /// <summary>
        /// Opens a media source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openToken">The open token. (optional)</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="maxStreamingBitrate">The maximum streaming bitrate. (optional)</param>
        /// <param name="startTimeTicks">The start time in ticks. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="maxAudioChannels">The maximum number of audio channels. (optional)</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="enableDirectPlay">Whether to enable direct play. Default: true. (optional)</param>
        /// <param name="enableDirectStream">Whether to enable direct stream. Default: true. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The open live stream dto. (optional)</param>
        /// <returns>ApiResponse of LiveStreamResponse</returns>
        ApiResponse<LiveStreamResponse> OpenLiveStreamWithHttpInfo (string openToken = default(string), Guid? userId = default(Guid?), string playSessionId = default(string), int? maxStreamingBitrate = default(int?), long? startTimeTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? maxAudioChannels = default(int?), Guid? itemId = default(Guid?), bool? enableDirectPlay = default(bool?), bool? enableDirectStream = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Closes a media source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamId">The livestream id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CloseLiveStreamAsync (string liveStreamId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Closes a media source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamId">The livestream id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CloseLiveStreamWithHttpInfoAsync (string liveStreamId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Tests the network with a request with the size of the bitrate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The bitrate. Defaults to 102400. (optional, default to 102400)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetBitrateTestBytesAsync (int? size = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Tests the network with a request with the size of the bitrate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The bitrate. Defaults to 102400. (optional, default to 102400)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetBitrateTestBytesWithHttpInfoAsync (int? size = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets live playback media info for an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PlaybackInfoResponse</returns>
        System.Threading.Tasks.Task<PlaybackInfoResponse> GetPlaybackInfoAsync (Guid itemId, Guid userId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets live playback media info for an item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PlaybackInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlaybackInfoResponse>> GetPlaybackInfoWithHttpInfoAsync (Guid itemId, Guid userId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets live playback media info for an item.
        /// </summary>
        /// <remarks>
        /// For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="maxStreamingBitrate">The maximum streaming bitrate. (optional)</param>
        /// <param name="startTimeTicks">The start time in ticks. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="maxAudioChannels">The maximum number of audio channels. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="liveStreamId">The livestream id. (optional)</param>
        /// <param name="autoOpenLiveStream">Whether to auto open the livestream. (optional)</param>
        /// <param name="enableDirectPlay">Whether to enable direct play. Default: true. (optional)</param>
        /// <param name="enableDirectStream">Whether to enable direct stream. Default: true. (optional)</param>
        /// <param name="enableTranscoding">Whether to enable transcoding. Default: true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether to allow to copy the video stream. Default: true. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether to allow to copy the audio stream. Default: true. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The playback info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PlaybackInfoResponse</returns>
        System.Threading.Tasks.Task<PlaybackInfoResponse> GetPostedPlaybackInfoAsync (Guid itemId, Guid? userId = default(Guid?), int? maxStreamingBitrate = default(int?), long? startTimeTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? maxAudioChannels = default(int?), string mediaSourceId = default(string), string liveStreamId = default(string), bool? autoOpenLiveStream = default(bool?), bool? enableDirectPlay = default(bool?), bool? enableDirectStream = default(bool?), bool? enableTranscoding = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets live playback media info for an item.
        /// </summary>
        /// <remarks>
        /// For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="maxStreamingBitrate">The maximum streaming bitrate. (optional)</param>
        /// <param name="startTimeTicks">The start time in ticks. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="maxAudioChannels">The maximum number of audio channels. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="liveStreamId">The livestream id. (optional)</param>
        /// <param name="autoOpenLiveStream">Whether to auto open the livestream. (optional)</param>
        /// <param name="enableDirectPlay">Whether to enable direct play. Default: true. (optional)</param>
        /// <param name="enableDirectStream">Whether to enable direct stream. Default: true. (optional)</param>
        /// <param name="enableTranscoding">Whether to enable transcoding. Default: true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether to allow to copy the video stream. Default: true. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether to allow to copy the audio stream. Default: true. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The playback info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PlaybackInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlaybackInfoResponse>> GetPostedPlaybackInfoWithHttpInfoAsync (Guid itemId, Guid? userId = default(Guid?), int? maxStreamingBitrate = default(int?), long? startTimeTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? maxAudioChannels = default(int?), string mediaSourceId = default(string), string liveStreamId = default(string), bool? autoOpenLiveStream = default(bool?), bool? enableDirectPlay = default(bool?), bool? enableDirectStream = default(bool?), bool? enableTranscoding = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Opens a media source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openToken">The open token. (optional)</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="maxStreamingBitrate">The maximum streaming bitrate. (optional)</param>
        /// <param name="startTimeTicks">The start time in ticks. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="maxAudioChannels">The maximum number of audio channels. (optional)</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="enableDirectPlay">Whether to enable direct play. Default: true. (optional)</param>
        /// <param name="enableDirectStream">Whether to enable direct stream. Default: true. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The open live stream dto. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LiveStreamResponse</returns>
        System.Threading.Tasks.Task<LiveStreamResponse> OpenLiveStreamAsync (string openToken = default(string), Guid? userId = default(Guid?), string playSessionId = default(string), int? maxStreamingBitrate = default(int?), long? startTimeTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? maxAudioChannels = default(int?), Guid? itemId = default(Guid?), bool? enableDirectPlay = default(bool?), bool? enableDirectStream = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Opens a media source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openToken">The open token. (optional)</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="maxStreamingBitrate">The maximum streaming bitrate. (optional)</param>
        /// <param name="startTimeTicks">The start time in ticks. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="maxAudioChannels">The maximum number of audio channels. (optional)</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="enableDirectPlay">Whether to enable direct play. Default: true. (optional)</param>
        /// <param name="enableDirectStream">Whether to enable direct stream. Default: true. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The open live stream dto. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LiveStreamResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LiveStreamResponse>> OpenLiveStreamWithHttpInfoAsync (string openToken = default(string), Guid? userId = default(Guid?), string playSessionId = default(string), int? maxStreamingBitrate = default(int?), long? startTimeTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? maxAudioChannels = default(int?), Guid? itemId = default(Guid?), bool? enableDirectPlay = default(bool?), bool? enableDirectStream = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MediaInfoApi : IMediaInfoApi
    {
        private Jellyfin.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaInfoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MediaInfoApi(String basePath)
        {
            this.Configuration = new Jellyfin.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaInfoApi"/> class
        /// </summary>
        /// <returns></returns>
        public MediaInfoApi()
        {
            this.Configuration = Jellyfin.Api.Client.Configuration.Default;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaInfoApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MediaInfoApi(Jellyfin.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Jellyfin.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Jellyfin.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Jellyfin.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Jellyfin.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Closes a media source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamId">The livestream id.</param>
        /// <returns></returns>
        public void CloseLiveStream (string liveStreamId)
        {
             CloseLiveStreamWithHttpInfo(liveStreamId);
        }

        /// <summary>
        /// Closes a media source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamId">The livestream id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CloseLiveStreamWithHttpInfo (string liveStreamId)
        {
            // verify the required parameter 'liveStreamId' is set
            if (liveStreamId == null)
                throw new ApiException(400, "Missing required parameter 'liveStreamId' when calling MediaInfoApi->CloseLiveStream");

            var localVarPath = "/LiveStreams/Close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (liveStreamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "liveStreamId", liveStreamId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseLiveStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Closes a media source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamId">The livestream id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CloseLiveStreamAsync (string liveStreamId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await CloseLiveStreamWithHttpInfoAsync(liveStreamId, cancellationToken);

        }

        /// <summary>
        /// Closes a media source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liveStreamId">The livestream id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CloseLiveStreamWithHttpInfoAsync (string liveStreamId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'liveStreamId' is set
            if (liveStreamId == null)
                throw new ApiException(400, "Missing required parameter 'liveStreamId' when calling MediaInfoApi->CloseLiveStream");

            var localVarPath = "/LiveStreams/Close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (liveStreamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "liveStreamId", liveStreamId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseLiveStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Tests the network with a request with the size of the bitrate. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The bitrate. Defaults to 102400. (optional, default to 102400)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetBitrateTestBytes (int? size = default(int?))
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetBitrateTestBytesWithHttpInfo(size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tests the network with a request with the size of the bitrate. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The bitrate. Defaults to 102400. (optional, default to 102400)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetBitrateTestBytesWithHttpInfo (int? size = default(int?))
        {

            var localVarPath = "/Playback/BitrateTest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBitrateTestBytes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Tests the network with a request with the size of the bitrate. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The bitrate. Defaults to 102400. (optional, default to 102400)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetBitrateTestBytesAsync (int? size = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetBitrateTestBytesWithHttpInfoAsync(size, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tests the network with a request with the size of the bitrate. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The bitrate. Defaults to 102400. (optional, default to 102400)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetBitrateTestBytesWithHttpInfoAsync (int? size = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/Playback/BitrateTest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBitrateTestBytes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Gets live playback media info for an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>PlaybackInfoResponse</returns>
        public PlaybackInfoResponse GetPlaybackInfo (Guid itemId, Guid userId)
        {
             ApiResponse<PlaybackInfoResponse> localVarResponse = GetPlaybackInfoWithHttpInfo(itemId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets live playback media info for an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">The user id.</param>
        /// <returns>ApiResponse of PlaybackInfoResponse</returns>
        public ApiResponse<PlaybackInfoResponse> GetPlaybackInfoWithHttpInfo (Guid itemId, Guid userId)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling MediaInfoApi->GetPlaybackInfo");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling MediaInfoApi->GetPlaybackInfo");

            var localVarPath = "/Items/{itemId}/PlaybackInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlaybackInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlaybackInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlaybackInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlaybackInfoResponse)));
        }

        /// <summary>
        /// Gets live playback media info for an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PlaybackInfoResponse</returns>
        public async System.Threading.Tasks.Task<PlaybackInfoResponse> GetPlaybackInfoAsync (Guid itemId, Guid userId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PlaybackInfoResponse> localVarResponse = await GetPlaybackInfoWithHttpInfoAsync(itemId, userId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets live playback media info for an item. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">The user id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PlaybackInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlaybackInfoResponse>> GetPlaybackInfoWithHttpInfoAsync (Guid itemId, Guid userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling MediaInfoApi->GetPlaybackInfo");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling MediaInfoApi->GetPlaybackInfo");

            var localVarPath = "/Items/{itemId}/PlaybackInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlaybackInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlaybackInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlaybackInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlaybackInfoResponse)));
        }

        /// <summary>
        /// Gets live playback media info for an item. For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="maxStreamingBitrate">The maximum streaming bitrate. (optional)</param>
        /// <param name="startTimeTicks">The start time in ticks. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="maxAudioChannels">The maximum number of audio channels. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="liveStreamId">The livestream id. (optional)</param>
        /// <param name="autoOpenLiveStream">Whether to auto open the livestream. (optional)</param>
        /// <param name="enableDirectPlay">Whether to enable direct play. Default: true. (optional)</param>
        /// <param name="enableDirectStream">Whether to enable direct stream. Default: true. (optional)</param>
        /// <param name="enableTranscoding">Whether to enable transcoding. Default: true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether to allow to copy the video stream. Default: true. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether to allow to copy the audio stream. Default: true. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The playback info. (optional)</param>
        /// <returns>PlaybackInfoResponse</returns>
        public PlaybackInfoResponse GetPostedPlaybackInfo (Guid itemId, Guid? userId = default(Guid?), int? maxStreamingBitrate = default(int?), long? startTimeTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? maxAudioChannels = default(int?), string mediaSourceId = default(string), string liveStreamId = default(string), bool? autoOpenLiveStream = default(bool?), bool? enableDirectPlay = default(bool?), bool? enableDirectStream = default(bool?), bool? enableTranscoding = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
             ApiResponse<PlaybackInfoResponse> localVarResponse = GetPostedPlaybackInfoWithHttpInfo(itemId, userId, maxStreamingBitrate, startTimeTicks, audioStreamIndex, subtitleStreamIndex, maxAudioChannels, mediaSourceId, liveStreamId, autoOpenLiveStream, enableDirectPlay, enableDirectStream, enableTranscoding, allowVideoStreamCopy, allowAudioStreamCopy, UNKNOWN_BASE_TYPE);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets live playback media info for an item. For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="maxStreamingBitrate">The maximum streaming bitrate. (optional)</param>
        /// <param name="startTimeTicks">The start time in ticks. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="maxAudioChannels">The maximum number of audio channels. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="liveStreamId">The livestream id. (optional)</param>
        /// <param name="autoOpenLiveStream">Whether to auto open the livestream. (optional)</param>
        /// <param name="enableDirectPlay">Whether to enable direct play. Default: true. (optional)</param>
        /// <param name="enableDirectStream">Whether to enable direct stream. Default: true. (optional)</param>
        /// <param name="enableTranscoding">Whether to enable transcoding. Default: true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether to allow to copy the video stream. Default: true. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether to allow to copy the audio stream. Default: true. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The playback info. (optional)</param>
        /// <returns>ApiResponse of PlaybackInfoResponse</returns>
        public ApiResponse<PlaybackInfoResponse> GetPostedPlaybackInfoWithHttpInfo (Guid itemId, Guid? userId = default(Guid?), int? maxStreamingBitrate = default(int?), long? startTimeTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? maxAudioChannels = default(int?), string mediaSourceId = default(string), string liveStreamId = default(string), bool? autoOpenLiveStream = default(bool?), bool? enableDirectPlay = default(bool?), bool? enableDirectStream = default(bool?), bool? enableTranscoding = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling MediaInfoApi->GetPostedPlaybackInfo");

            var localVarPath = "/Items/{itemId}/PlaybackInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (maxStreamingBitrate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxStreamingBitrate", maxStreamingBitrate)); // query parameter
            if (startTimeTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeTicks", startTimeTicks)); // query parameter
            if (audioStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioStreamIndex", audioStreamIndex)); // query parameter
            if (subtitleStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleStreamIndex", subtitleStreamIndex)); // query parameter
            if (maxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioChannels", maxAudioChannels)); // query parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (liveStreamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "liveStreamId", liveStreamId)); // query parameter
            if (autoOpenLiveStream != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "autoOpenLiveStream", autoOpenLiveStream)); // query parameter
            if (enableDirectPlay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableDirectPlay", enableDirectPlay)); // query parameter
            if (enableDirectStream != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableDirectStream", enableDirectStream)); // query parameter
            if (enableTranscoding != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableTranscoding", enableTranscoding)); // query parameter
            if (allowVideoStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowVideoStreamCopy", allowVideoStreamCopy)); // query parameter
            if (allowAudioStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowAudioStreamCopy", allowAudioStreamCopy)); // query parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPostedPlaybackInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlaybackInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlaybackInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlaybackInfoResponse)));
        }

        /// <summary>
        /// Gets live playback media info for an item. For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="maxStreamingBitrate">The maximum streaming bitrate. (optional)</param>
        /// <param name="startTimeTicks">The start time in ticks. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="maxAudioChannels">The maximum number of audio channels. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="liveStreamId">The livestream id. (optional)</param>
        /// <param name="autoOpenLiveStream">Whether to auto open the livestream. (optional)</param>
        /// <param name="enableDirectPlay">Whether to enable direct play. Default: true. (optional)</param>
        /// <param name="enableDirectStream">Whether to enable direct stream. Default: true. (optional)</param>
        /// <param name="enableTranscoding">Whether to enable transcoding. Default: true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether to allow to copy the video stream. Default: true. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether to allow to copy the audio stream. Default: true. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The playback info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PlaybackInfoResponse</returns>
        public async System.Threading.Tasks.Task<PlaybackInfoResponse> GetPostedPlaybackInfoAsync (Guid itemId, Guid? userId = default(Guid?), int? maxStreamingBitrate = default(int?), long? startTimeTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? maxAudioChannels = default(int?), string mediaSourceId = default(string), string liveStreamId = default(string), bool? autoOpenLiveStream = default(bool?), bool? enableDirectPlay = default(bool?), bool? enableDirectStream = default(bool?), bool? enableTranscoding = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PlaybackInfoResponse> localVarResponse = await GetPostedPlaybackInfoWithHttpInfoAsync(itemId, userId, maxStreamingBitrate, startTimeTicks, audioStreamIndex, subtitleStreamIndex, maxAudioChannels, mediaSourceId, liveStreamId, autoOpenLiveStream, enableDirectPlay, enableDirectStream, enableTranscoding, allowVideoStreamCopy, allowAudioStreamCopy, UNKNOWN_BASE_TYPE, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets live playback media info for an item. For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.  Query parameters are obsolete.
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId">The item id.</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="maxStreamingBitrate">The maximum streaming bitrate. (optional)</param>
        /// <param name="startTimeTicks">The start time in ticks. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="maxAudioChannels">The maximum number of audio channels. (optional)</param>
        /// <param name="mediaSourceId">The media source id. (optional)</param>
        /// <param name="liveStreamId">The livestream id. (optional)</param>
        /// <param name="autoOpenLiveStream">Whether to auto open the livestream. (optional)</param>
        /// <param name="enableDirectPlay">Whether to enable direct play. Default: true. (optional)</param>
        /// <param name="enableDirectStream">Whether to enable direct stream. Default: true. (optional)</param>
        /// <param name="enableTranscoding">Whether to enable transcoding. Default: true. (optional)</param>
        /// <param name="allowVideoStreamCopy">Whether to allow to copy the video stream. Default: true. (optional)</param>
        /// <param name="allowAudioStreamCopy">Whether to allow to copy the audio stream. Default: true. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The playback info. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PlaybackInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlaybackInfoResponse>> GetPostedPlaybackInfoWithHttpInfoAsync (Guid itemId, Guid? userId = default(Guid?), int? maxStreamingBitrate = default(int?), long? startTimeTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? maxAudioChannels = default(int?), string mediaSourceId = default(string), string liveStreamId = default(string), bool? autoOpenLiveStream = default(bool?), bool? enableDirectPlay = default(bool?), bool? enableDirectStream = default(bool?), bool? enableTranscoding = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling MediaInfoApi->GetPostedPlaybackInfo");

            var localVarPath = "/Items/{itemId}/PlaybackInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (maxStreamingBitrate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxStreamingBitrate", maxStreamingBitrate)); // query parameter
            if (startTimeTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeTicks", startTimeTicks)); // query parameter
            if (audioStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioStreamIndex", audioStreamIndex)); // query parameter
            if (subtitleStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleStreamIndex", subtitleStreamIndex)); // query parameter
            if (maxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioChannels", maxAudioChannels)); // query parameter
            if (mediaSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaSourceId", mediaSourceId)); // query parameter
            if (liveStreamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "liveStreamId", liveStreamId)); // query parameter
            if (autoOpenLiveStream != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "autoOpenLiveStream", autoOpenLiveStream)); // query parameter
            if (enableDirectPlay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableDirectPlay", enableDirectPlay)); // query parameter
            if (enableDirectStream != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableDirectStream", enableDirectStream)); // query parameter
            if (enableTranscoding != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableTranscoding", enableTranscoding)); // query parameter
            if (allowVideoStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowVideoStreamCopy", allowVideoStreamCopy)); // query parameter
            if (allowAudioStreamCopy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowAudioStreamCopy", allowAudioStreamCopy)); // query parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPostedPlaybackInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlaybackInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlaybackInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlaybackInfoResponse)));
        }

        /// <summary>
        /// Opens a media source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openToken">The open token. (optional)</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="maxStreamingBitrate">The maximum streaming bitrate. (optional)</param>
        /// <param name="startTimeTicks">The start time in ticks. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="maxAudioChannels">The maximum number of audio channels. (optional)</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="enableDirectPlay">Whether to enable direct play. Default: true. (optional)</param>
        /// <param name="enableDirectStream">Whether to enable direct stream. Default: true. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The open live stream dto. (optional)</param>
        /// <returns>LiveStreamResponse</returns>
        public LiveStreamResponse OpenLiveStream (string openToken = default(string), Guid? userId = default(Guid?), string playSessionId = default(string), int? maxStreamingBitrate = default(int?), long? startTimeTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? maxAudioChannels = default(int?), Guid? itemId = default(Guid?), bool? enableDirectPlay = default(bool?), bool? enableDirectStream = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
             ApiResponse<LiveStreamResponse> localVarResponse = OpenLiveStreamWithHttpInfo(openToken, userId, playSessionId, maxStreamingBitrate, startTimeTicks, audioStreamIndex, subtitleStreamIndex, maxAudioChannels, itemId, enableDirectPlay, enableDirectStream, UNKNOWN_BASE_TYPE);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Opens a media source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openToken">The open token. (optional)</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="maxStreamingBitrate">The maximum streaming bitrate. (optional)</param>
        /// <param name="startTimeTicks">The start time in ticks. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="maxAudioChannels">The maximum number of audio channels. (optional)</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="enableDirectPlay">Whether to enable direct play. Default: true. (optional)</param>
        /// <param name="enableDirectStream">Whether to enable direct stream. Default: true. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The open live stream dto. (optional)</param>
        /// <returns>ApiResponse of LiveStreamResponse</returns>
        public ApiResponse<LiveStreamResponse> OpenLiveStreamWithHttpInfo (string openToken = default(string), Guid? userId = default(Guid?), string playSessionId = default(string), int? maxStreamingBitrate = default(int?), long? startTimeTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? maxAudioChannels = default(int?), Guid? itemId = default(Guid?), bool? enableDirectPlay = default(bool?), bool? enableDirectStream = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {

            var localVarPath = "/LiveStreams/Open";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (openToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "openToken", openToken)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (playSessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playSessionId", playSessionId)); // query parameter
            if (maxStreamingBitrate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxStreamingBitrate", maxStreamingBitrate)); // query parameter
            if (startTimeTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeTicks", startTimeTicks)); // query parameter
            if (audioStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioStreamIndex", audioStreamIndex)); // query parameter
            if (subtitleStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleStreamIndex", subtitleStreamIndex)); // query parameter
            if (maxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioChannels", maxAudioChannels)); // query parameter
            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemId", itemId)); // query parameter
            if (enableDirectPlay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableDirectPlay", enableDirectPlay)); // query parameter
            if (enableDirectStream != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableDirectStream", enableDirectStream)); // query parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpenLiveStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LiveStreamResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LiveStreamResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LiveStreamResponse)));
        }

        /// <summary>
        /// Opens a media source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openToken">The open token. (optional)</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="maxStreamingBitrate">The maximum streaming bitrate. (optional)</param>
        /// <param name="startTimeTicks">The start time in ticks. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="maxAudioChannels">The maximum number of audio channels. (optional)</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="enableDirectPlay">Whether to enable direct play. Default: true. (optional)</param>
        /// <param name="enableDirectStream">Whether to enable direct stream. Default: true. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The open live stream dto. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LiveStreamResponse</returns>
        public async System.Threading.Tasks.Task<LiveStreamResponse> OpenLiveStreamAsync (string openToken = default(string), Guid? userId = default(Guid?), string playSessionId = default(string), int? maxStreamingBitrate = default(int?), long? startTimeTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? maxAudioChannels = default(int?), Guid? itemId = default(Guid?), bool? enableDirectPlay = default(bool?), bool? enableDirectStream = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<LiveStreamResponse> localVarResponse = await OpenLiveStreamWithHttpInfoAsync(openToken, userId, playSessionId, maxStreamingBitrate, startTimeTicks, audioStreamIndex, subtitleStreamIndex, maxAudioChannels, itemId, enableDirectPlay, enableDirectStream, UNKNOWN_BASE_TYPE, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Opens a media source. 
        /// </summary>
        /// <exception cref="Jellyfin.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openToken">The open token. (optional)</param>
        /// <param name="userId">The user id. (optional)</param>
        /// <param name="playSessionId">The play session id. (optional)</param>
        /// <param name="maxStreamingBitrate">The maximum streaming bitrate. (optional)</param>
        /// <param name="startTimeTicks">The start time in ticks. (optional)</param>
        /// <param name="audioStreamIndex">The audio stream index. (optional)</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index. (optional)</param>
        /// <param name="maxAudioChannels">The maximum number of audio channels. (optional)</param>
        /// <param name="itemId">The item id. (optional)</param>
        /// <param name="enableDirectPlay">Whether to enable direct play. Default: true. (optional)</param>
        /// <param name="enableDirectStream">Whether to enable direct stream. Default: true. (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE">The open live stream dto. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LiveStreamResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LiveStreamResponse>> OpenLiveStreamWithHttpInfoAsync (string openToken = default(string), Guid? userId = default(Guid?), string playSessionId = default(string), int? maxStreamingBitrate = default(int?), long? startTimeTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? maxAudioChannels = default(int?), Guid? itemId = default(Guid?), bool? enableDirectPlay = default(bool?), bool? enableDirectStream = default(bool?), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/LiveStreams/Open";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/json; profile=CamelCase",
                "application/json; profile=PascalCase"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (openToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "openToken", openToken)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (playSessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playSessionId", playSessionId)); // query parameter
            if (maxStreamingBitrate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxStreamingBitrate", maxStreamingBitrate)); // query parameter
            if (startTimeTicks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeTicks", startTimeTicks)); // query parameter
            if (audioStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "audioStreamIndex", audioStreamIndex)); // query parameter
            if (subtitleStreamIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subtitleStreamIndex", subtitleStreamIndex)); // query parameter
            if (maxAudioChannels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAudioChannels", maxAudioChannels)); // query parameter
            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "itemId", itemId)); // query parameter
            if (enableDirectPlay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableDirectPlay", enableDirectPlay)); // query parameter
            if (enableDirectStream != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enableDirectStream", enableDirectStream)); // query parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (CustomAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization")))
            {
                localVarHeaderParams["X-Emby-Authorization"] = this.Configuration.GetApiKeyWithPrefix("X-Emby-Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpenLiveStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LiveStreamResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LiveStreamResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LiveStreamResponse)));
        }

    }
}
