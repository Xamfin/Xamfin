/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Class SystemInfo.
    /// </summary>
    [DataContract]
    public partial class SystemInfo :  IEquatable<SystemInfo>, IValidatableObject
    {
        /// <summary>
        /// Enum describing the location of the FFmpeg tool.
        /// </summary>
        /// <value>Enum describing the location of the FFmpeg tool.</value>
        [DataMember(Name="EncoderLocation", EmitDefaultValue=false)]
        public FFmpegLocation? EncoderLocation { get; set; }
        /// <summary>
        /// Gets or Sets SystemArchitecture
        /// </summary>
        [DataMember(Name="SystemArchitecture", EmitDefaultValue=false)]
        public Architecture? SystemArchitecture { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemInfo" /> class.
        /// </summary>
        /// <param name="localAddress">Gets or sets the local address..</param>
        /// <param name="serverName">Gets or sets the name of the server..</param>
        /// <param name="version">Gets or sets the server version..</param>
        /// <param name="productName">Gets or sets the product name. This is the AssemblyProduct name..</param>
        /// <param name="operatingSystem">Gets or sets the operating system..</param>
        /// <param name="id">Gets or sets the id..</param>
        /// <param name="startupWizardCompleted">Gets or sets a value indicating whether the startup wizard is completed..</param>
        /// <param name="operatingSystemDisplayName">Gets or sets the display name of the operating system..</param>
        /// <param name="packageName">Get or sets the package name..</param>
        /// <param name="hasPendingRestart">Gets or sets a value indicating whether this instance has pending restart..</param>
        /// <param name="isShuttingDown">isShuttingDown.</param>
        /// <param name="supportsLibraryMonitor">Gets or sets a value indicating whether [supports library monitor]..</param>
        /// <param name="webSocketPortNumber">Gets or sets the web socket port number..</param>
        /// <param name="completedInstallations">Gets or sets the completed installations..</param>
        /// <param name="canSelfRestart">Gets or sets a value indicating whether this instance can self restart..</param>
        /// <param name="canLaunchWebBrowser">canLaunchWebBrowser.</param>
        /// <param name="programDataPath">Gets or sets the program data path..</param>
        /// <param name="webPath">Gets or sets the web UI resources path..</param>
        /// <param name="itemsByNamePath">Gets or sets the items by name path..</param>
        /// <param name="cachePath">Gets or sets the cache path..</param>
        /// <param name="logPath">Gets or sets the log path..</param>
        /// <param name="internalMetadataPath">Gets or sets the internal metadata path..</param>
        /// <param name="transcodingTempPath">Gets or sets the transcode path..</param>
        /// <param name="hasUpdateAvailable">Gets or sets a value indicating whether this instance has update available..</param>
        /// <param name="encoderLocation">Enum describing the location of the FFmpeg tool..</param>
        /// <param name="systemArchitecture">systemArchitecture.</param>
        public SystemInfo(string localAddress = default(string), string serverName = default(string), string version = default(string), string productName = default(string), string operatingSystem = default(string), string id = default(string), bool? startupWizardCompleted = default(bool?), string operatingSystemDisplayName = default(string), string packageName = default(string), bool hasPendingRestart = default(bool), bool isShuttingDown = default(bool), bool supportsLibraryMonitor = default(bool), int webSocketPortNumber = default(int), List<InstallationInfo> completedInstallations = default(List<InstallationInfo>), bool canSelfRestart = default(bool), bool canLaunchWebBrowser = default(bool), string programDataPath = default(string), string webPath = default(string), string itemsByNamePath = default(string), string cachePath = default(string), string logPath = default(string), string internalMetadataPath = default(string), string transcodingTempPath = default(string), bool hasUpdateAvailable = default(bool), FFmpegLocation? encoderLocation = default(FFmpegLocation?), Architecture? systemArchitecture = default(Architecture?))
        {
            this.LocalAddress = localAddress;
            this.ServerName = serverName;
            this.Version = version;
            this.ProductName = productName;
            this.OperatingSystem = operatingSystem;
            this.Id = id;
            this.StartupWizardCompleted = startupWizardCompleted;
            this.OperatingSystemDisplayName = operatingSystemDisplayName;
            this.PackageName = packageName;
            this.CompletedInstallations = completedInstallations;
            this.ProgramDataPath = programDataPath;
            this.WebPath = webPath;
            this.ItemsByNamePath = itemsByNamePath;
            this.CachePath = cachePath;
            this.LogPath = logPath;
            this.InternalMetadataPath = internalMetadataPath;
            this.TranscodingTempPath = transcodingTempPath;
            this.LocalAddress = localAddress;
            this.ServerName = serverName;
            this.Version = version;
            this.ProductName = productName;
            this.OperatingSystem = operatingSystem;
            this.Id = id;
            this.StartupWizardCompleted = startupWizardCompleted;
            this.OperatingSystemDisplayName = operatingSystemDisplayName;
            this.PackageName = packageName;
            this.HasPendingRestart = hasPendingRestart;
            this.IsShuttingDown = isShuttingDown;
            this.SupportsLibraryMonitor = supportsLibraryMonitor;
            this.WebSocketPortNumber = webSocketPortNumber;
            this.CompletedInstallations = completedInstallations;
            this.CanSelfRestart = canSelfRestart;
            this.CanLaunchWebBrowser = canLaunchWebBrowser;
            this.ProgramDataPath = programDataPath;
            this.WebPath = webPath;
            this.ItemsByNamePath = itemsByNamePath;
            this.CachePath = cachePath;
            this.LogPath = logPath;
            this.InternalMetadataPath = internalMetadataPath;
            this.TranscodingTempPath = transcodingTempPath;
            this.HasUpdateAvailable = hasUpdateAvailable;
            this.EncoderLocation = encoderLocation;
            this.SystemArchitecture = systemArchitecture;
        }

        /// <summary>
        /// Gets or sets the local address.
        /// </summary>
        /// <value>Gets or sets the local address.</value>
        [DataMember(Name="LocalAddress", EmitDefaultValue=true)]
        public string LocalAddress { get; set; }

        /// <summary>
        /// Gets or sets the name of the server.
        /// </summary>
        /// <value>Gets or sets the name of the server.</value>
        [DataMember(Name="ServerName", EmitDefaultValue=true)]
        public string ServerName { get; set; }

        /// <summary>
        /// Gets or sets the server version.
        /// </summary>
        /// <value>Gets or sets the server version.</value>
        [DataMember(Name="Version", EmitDefaultValue=true)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets the product name. This is the AssemblyProduct name.
        /// </summary>
        /// <value>Gets or sets the product name. This is the AssemblyProduct name.</value>
        [DataMember(Name="ProductName", EmitDefaultValue=true)]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or sets the operating system.
        /// </summary>
        /// <value>Gets or sets the operating system.</value>
        [DataMember(Name="OperatingSystem", EmitDefaultValue=true)]
        public string OperatingSystem { get; set; }

        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        /// <value>Gets or sets the id.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the startup wizard is completed.
        /// </summary>
        /// <value>Gets or sets a value indicating whether the startup wizard is completed.</value>
        [DataMember(Name="StartupWizardCompleted", EmitDefaultValue=true)]
        public bool? StartupWizardCompleted { get; set; }

        /// <summary>
        /// Gets or sets the display name of the operating system.
        /// </summary>
        /// <value>Gets or sets the display name of the operating system.</value>
        [DataMember(Name="OperatingSystemDisplayName", EmitDefaultValue=true)]
        public string OperatingSystemDisplayName { get; set; }

        /// <summary>
        /// Get or sets the package name.
        /// </summary>
        /// <value>Get or sets the package name.</value>
        [DataMember(Name="PackageName", EmitDefaultValue=true)]
        public string PackageName { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance has pending restart.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance has pending restart.</value>
        [DataMember(Name="HasPendingRestart", EmitDefaultValue=false)]
        public bool HasPendingRestart { get; set; }

        /// <summary>
        /// Gets or Sets IsShuttingDown
        /// </summary>
        [DataMember(Name="IsShuttingDown", EmitDefaultValue=false)]
        public bool IsShuttingDown { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [supports library monitor].
        /// </summary>
        /// <value>Gets or sets a value indicating whether [supports library monitor].</value>
        [DataMember(Name="SupportsLibraryMonitor", EmitDefaultValue=false)]
        public bool SupportsLibraryMonitor { get; set; }

        /// <summary>
        /// Gets or sets the web socket port number.
        /// </summary>
        /// <value>Gets or sets the web socket port number.</value>
        [DataMember(Name="WebSocketPortNumber", EmitDefaultValue=false)]
        public int WebSocketPortNumber { get; set; }

        /// <summary>
        /// Gets or sets the completed installations.
        /// </summary>
        /// <value>Gets or sets the completed installations.</value>
        [DataMember(Name="CompletedInstallations", EmitDefaultValue=true)]
        public List<InstallationInfo> CompletedInstallations { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance can self restart.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance can self restart.</value>
        [DataMember(Name="CanSelfRestart", EmitDefaultValue=false)]
        public bool CanSelfRestart { get; set; }

        /// <summary>
        /// Gets or Sets CanLaunchWebBrowser
        /// </summary>
        [DataMember(Name="CanLaunchWebBrowser", EmitDefaultValue=false)]
        public bool CanLaunchWebBrowser { get; set; }

        /// <summary>
        /// Gets or sets the program data path.
        /// </summary>
        /// <value>Gets or sets the program data path.</value>
        [DataMember(Name="ProgramDataPath", EmitDefaultValue=true)]
        public string ProgramDataPath { get; set; }

        /// <summary>
        /// Gets or sets the web UI resources path.
        /// </summary>
        /// <value>Gets or sets the web UI resources path.</value>
        [DataMember(Name="WebPath", EmitDefaultValue=true)]
        public string WebPath { get; set; }

        /// <summary>
        /// Gets or sets the items by name path.
        /// </summary>
        /// <value>Gets or sets the items by name path.</value>
        [DataMember(Name="ItemsByNamePath", EmitDefaultValue=true)]
        public string ItemsByNamePath { get; set; }

        /// <summary>
        /// Gets or sets the cache path.
        /// </summary>
        /// <value>Gets or sets the cache path.</value>
        [DataMember(Name="CachePath", EmitDefaultValue=true)]
        public string CachePath { get; set; }

        /// <summary>
        /// Gets or sets the log path.
        /// </summary>
        /// <value>Gets or sets the log path.</value>
        [DataMember(Name="LogPath", EmitDefaultValue=true)]
        public string LogPath { get; set; }

        /// <summary>
        /// Gets or sets the internal metadata path.
        /// </summary>
        /// <value>Gets or sets the internal metadata path.</value>
        [DataMember(Name="InternalMetadataPath", EmitDefaultValue=true)]
        public string InternalMetadataPath { get; set; }

        /// <summary>
        /// Gets or sets the transcode path.
        /// </summary>
        /// <value>Gets or sets the transcode path.</value>
        [DataMember(Name="TranscodingTempPath", EmitDefaultValue=true)]
        public string TranscodingTempPath { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance has update available.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance has update available.</value>
        [DataMember(Name="HasUpdateAvailable", EmitDefaultValue=false)]
        public bool HasUpdateAvailable { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemInfo {\n");
            sb.Append("  LocalAddress: ").Append(LocalAddress).Append("\n");
            sb.Append("  ServerName: ").Append(ServerName).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  OperatingSystem: ").Append(OperatingSystem).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StartupWizardCompleted: ").Append(StartupWizardCompleted).Append("\n");
            sb.Append("  OperatingSystemDisplayName: ").Append(OperatingSystemDisplayName).Append("\n");
            sb.Append("  PackageName: ").Append(PackageName).Append("\n");
            sb.Append("  HasPendingRestart: ").Append(HasPendingRestart).Append("\n");
            sb.Append("  IsShuttingDown: ").Append(IsShuttingDown).Append("\n");
            sb.Append("  SupportsLibraryMonitor: ").Append(SupportsLibraryMonitor).Append("\n");
            sb.Append("  WebSocketPortNumber: ").Append(WebSocketPortNumber).Append("\n");
            sb.Append("  CompletedInstallations: ").Append(CompletedInstallations).Append("\n");
            sb.Append("  CanSelfRestart: ").Append(CanSelfRestart).Append("\n");
            sb.Append("  CanLaunchWebBrowser: ").Append(CanLaunchWebBrowser).Append("\n");
            sb.Append("  ProgramDataPath: ").Append(ProgramDataPath).Append("\n");
            sb.Append("  WebPath: ").Append(WebPath).Append("\n");
            sb.Append("  ItemsByNamePath: ").Append(ItemsByNamePath).Append("\n");
            sb.Append("  CachePath: ").Append(CachePath).Append("\n");
            sb.Append("  LogPath: ").Append(LogPath).Append("\n");
            sb.Append("  InternalMetadataPath: ").Append(InternalMetadataPath).Append("\n");
            sb.Append("  TranscodingTempPath: ").Append(TranscodingTempPath).Append("\n");
            sb.Append("  HasUpdateAvailable: ").Append(HasUpdateAvailable).Append("\n");
            sb.Append("  EncoderLocation: ").Append(EncoderLocation).Append("\n");
            sb.Append("  SystemArchitecture: ").Append(SystemArchitecture).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemInfo);
        }

        /// <summary>
        /// Returns true if SystemInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LocalAddress == input.LocalAddress ||
                    (this.LocalAddress != null &&
                    this.LocalAddress.Equals(input.LocalAddress))
                ) && 
                (
                    this.ServerName == input.ServerName ||
                    (this.ServerName != null &&
                    this.ServerName.Equals(input.ServerName))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.ProductName == input.ProductName ||
                    (this.ProductName != null &&
                    this.ProductName.Equals(input.ProductName))
                ) && 
                (
                    this.OperatingSystem == input.OperatingSystem ||
                    (this.OperatingSystem != null &&
                    this.OperatingSystem.Equals(input.OperatingSystem))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.StartupWizardCompleted == input.StartupWizardCompleted ||
                    (this.StartupWizardCompleted != null &&
                    this.StartupWizardCompleted.Equals(input.StartupWizardCompleted))
                ) && 
                (
                    this.OperatingSystemDisplayName == input.OperatingSystemDisplayName ||
                    (this.OperatingSystemDisplayName != null &&
                    this.OperatingSystemDisplayName.Equals(input.OperatingSystemDisplayName))
                ) && 
                (
                    this.PackageName == input.PackageName ||
                    (this.PackageName != null &&
                    this.PackageName.Equals(input.PackageName))
                ) && 
                (
                    this.HasPendingRestart == input.HasPendingRestart ||
                    (this.HasPendingRestart != null &&
                    this.HasPendingRestart.Equals(input.HasPendingRestart))
                ) && 
                (
                    this.IsShuttingDown == input.IsShuttingDown ||
                    (this.IsShuttingDown != null &&
                    this.IsShuttingDown.Equals(input.IsShuttingDown))
                ) && 
                (
                    this.SupportsLibraryMonitor == input.SupportsLibraryMonitor ||
                    (this.SupportsLibraryMonitor != null &&
                    this.SupportsLibraryMonitor.Equals(input.SupportsLibraryMonitor))
                ) && 
                (
                    this.WebSocketPortNumber == input.WebSocketPortNumber ||
                    (this.WebSocketPortNumber != null &&
                    this.WebSocketPortNumber.Equals(input.WebSocketPortNumber))
                ) && 
                (
                    this.CompletedInstallations == input.CompletedInstallations ||
                    this.CompletedInstallations != null &&
                    input.CompletedInstallations != null &&
                    this.CompletedInstallations.SequenceEqual(input.CompletedInstallations)
                ) && 
                (
                    this.CanSelfRestart == input.CanSelfRestart ||
                    (this.CanSelfRestart != null &&
                    this.CanSelfRestart.Equals(input.CanSelfRestart))
                ) && 
                (
                    this.CanLaunchWebBrowser == input.CanLaunchWebBrowser ||
                    (this.CanLaunchWebBrowser != null &&
                    this.CanLaunchWebBrowser.Equals(input.CanLaunchWebBrowser))
                ) && 
                (
                    this.ProgramDataPath == input.ProgramDataPath ||
                    (this.ProgramDataPath != null &&
                    this.ProgramDataPath.Equals(input.ProgramDataPath))
                ) && 
                (
                    this.WebPath == input.WebPath ||
                    (this.WebPath != null &&
                    this.WebPath.Equals(input.WebPath))
                ) && 
                (
                    this.ItemsByNamePath == input.ItemsByNamePath ||
                    (this.ItemsByNamePath != null &&
                    this.ItemsByNamePath.Equals(input.ItemsByNamePath))
                ) && 
                (
                    this.CachePath == input.CachePath ||
                    (this.CachePath != null &&
                    this.CachePath.Equals(input.CachePath))
                ) && 
                (
                    this.LogPath == input.LogPath ||
                    (this.LogPath != null &&
                    this.LogPath.Equals(input.LogPath))
                ) && 
                (
                    this.InternalMetadataPath == input.InternalMetadataPath ||
                    (this.InternalMetadataPath != null &&
                    this.InternalMetadataPath.Equals(input.InternalMetadataPath))
                ) && 
                (
                    this.TranscodingTempPath == input.TranscodingTempPath ||
                    (this.TranscodingTempPath != null &&
                    this.TranscodingTempPath.Equals(input.TranscodingTempPath))
                ) && 
                (
                    this.HasUpdateAvailable == input.HasUpdateAvailable ||
                    (this.HasUpdateAvailable != null &&
                    this.HasUpdateAvailable.Equals(input.HasUpdateAvailable))
                ) && 
                (
                    this.EncoderLocation == input.EncoderLocation ||
                    (this.EncoderLocation != null &&
                    this.EncoderLocation.Equals(input.EncoderLocation))
                ) && 
                (
                    this.SystemArchitecture == input.SystemArchitecture ||
                    (this.SystemArchitecture != null &&
                    this.SystemArchitecture.Equals(input.SystemArchitecture))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LocalAddress != null)
                    hashCode = hashCode * 59 + this.LocalAddress.GetHashCode();
                if (this.ServerName != null)
                    hashCode = hashCode * 59 + this.ServerName.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.ProductName != null)
                    hashCode = hashCode * 59 + this.ProductName.GetHashCode();
                if (this.OperatingSystem != null)
                    hashCode = hashCode * 59 + this.OperatingSystem.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.StartupWizardCompleted != null)
                    hashCode = hashCode * 59 + this.StartupWizardCompleted.GetHashCode();
                if (this.OperatingSystemDisplayName != null)
                    hashCode = hashCode * 59 + this.OperatingSystemDisplayName.GetHashCode();
                if (this.PackageName != null)
                    hashCode = hashCode * 59 + this.PackageName.GetHashCode();
                if (this.HasPendingRestart != null)
                    hashCode = hashCode * 59 + this.HasPendingRestart.GetHashCode();
                if (this.IsShuttingDown != null)
                    hashCode = hashCode * 59 + this.IsShuttingDown.GetHashCode();
                if (this.SupportsLibraryMonitor != null)
                    hashCode = hashCode * 59 + this.SupportsLibraryMonitor.GetHashCode();
                if (this.WebSocketPortNumber != null)
                    hashCode = hashCode * 59 + this.WebSocketPortNumber.GetHashCode();
                if (this.CompletedInstallations != null)
                    hashCode = hashCode * 59 + this.CompletedInstallations.GetHashCode();
                if (this.CanSelfRestart != null)
                    hashCode = hashCode * 59 + this.CanSelfRestart.GetHashCode();
                if (this.CanLaunchWebBrowser != null)
                    hashCode = hashCode * 59 + this.CanLaunchWebBrowser.GetHashCode();
                if (this.ProgramDataPath != null)
                    hashCode = hashCode * 59 + this.ProgramDataPath.GetHashCode();
                if (this.WebPath != null)
                    hashCode = hashCode * 59 + this.WebPath.GetHashCode();
                if (this.ItemsByNamePath != null)
                    hashCode = hashCode * 59 + this.ItemsByNamePath.GetHashCode();
                if (this.CachePath != null)
                    hashCode = hashCode * 59 + this.CachePath.GetHashCode();
                if (this.LogPath != null)
                    hashCode = hashCode * 59 + this.LogPath.GetHashCode();
                if (this.InternalMetadataPath != null)
                    hashCode = hashCode * 59 + this.InternalMetadataPath.GetHashCode();
                if (this.TranscodingTempPath != null)
                    hashCode = hashCode * 59 + this.TranscodingTempPath.GetHashCode();
                if (this.HasUpdateAvailable != null)
                    hashCode = hashCode * 59 + this.HasUpdateAvailable.GetHashCode();
                if (this.EncoderLocation != null)
                    hashCode = hashCode * 59 + this.EncoderLocation.GetHashCode();
                if (this.SystemArchitecture != null)
                    hashCode = hashCode * 59 + this.SystemArchitecture.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
