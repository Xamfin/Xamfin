/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Class SessionInfo.
    /// </summary>
    [DataContract]
    public partial class SessionInfo :  IEquatable<SessionInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionInfo" /> class.
        /// </summary>
        /// <param name="playState">playState.</param>
        /// <param name="additionalUsers">additionalUsers.</param>
        /// <param name="capabilities">capabilities.</param>
        /// <param name="remoteEndPoint">Gets or sets the remote end point..</param>
        /// <param name="id">Gets or sets the id..</param>
        /// <param name="userId">Gets or sets the user id..</param>
        /// <param name="userName">Gets or sets the username..</param>
        /// <param name="_client">Gets or sets the type of the client..</param>
        /// <param name="lastActivityDate">Gets or sets the last activity date..</param>
        /// <param name="lastPlaybackCheckIn">Gets or sets the last playback check in..</param>
        /// <param name="deviceName">Gets or sets the name of the device..</param>
        /// <param name="deviceType">Gets or sets the type of the device..</param>
        /// <param name="nowPlayingItem">Gets or sets the now playing item..</param>
        /// <param name="fullNowPlayingItem">Class BaseItem..</param>
        /// <param name="nowViewingItem">This is strictly used as a data transfer object from the api layer.  This holds information about a BaseItem in a format that is convenient for the client..</param>
        /// <param name="deviceId">Gets or sets the device id..</param>
        /// <param name="applicationVersion">Gets or sets the application version..</param>
        /// <param name="transcodingInfo">transcodingInfo.</param>
        /// <param name="nowPlayingQueue">nowPlayingQueue.</param>
        /// <param name="hasCustomDeviceName">hasCustomDeviceName.</param>
        /// <param name="playlistItemId">playlistItemId.</param>
        /// <param name="serverId">serverId.</param>
        /// <param name="userPrimaryImageTag">userPrimaryImageTag.</param>
        public SessionInfo(PlayerStateInfo playState = default(PlayerStateInfo), List<SessionUserInfo> additionalUsers = default(List<SessionUserInfo>), ClientCapabilities capabilities = default(ClientCapabilities), string remoteEndPoint = default(string), string id = default(string), Guid userId = default(Guid), string userName = default(string), string _client = default(string), DateTime lastActivityDate = default(DateTime), DateTime lastPlaybackCheckIn = default(DateTime), string deviceName = default(string), string deviceType = default(string), BaseItemDto nowPlayingItem = default(BaseItemDto), BaseItem fullNowPlayingItem = default(BaseItem), BaseItemDto nowViewingItem = default(BaseItemDto), string deviceId = default(string), string applicationVersion = default(string), TranscodingInfo transcodingInfo = default(TranscodingInfo), List<QueueItem> nowPlayingQueue = default(List<QueueItem>), bool hasCustomDeviceName = default(bool), string playlistItemId = default(string), string serverId = default(string), string userPrimaryImageTag = default(string))
        {
            this.PlayState = playState;
            this.AdditionalUsers = additionalUsers;
            this.Capabilities = capabilities;
            this.RemoteEndPoint = remoteEndPoint;
            this.Id = id;
            this.UserName = userName;
            this._Client = _client;
            this.DeviceName = deviceName;
            this.DeviceType = deviceType;
            this.NowPlayingItem = nowPlayingItem;
            this.FullNowPlayingItem = fullNowPlayingItem;
            this.NowViewingItem = nowViewingItem;
            this.DeviceId = deviceId;
            this.ApplicationVersion = applicationVersion;
            this.TranscodingInfo = transcodingInfo;
            this.NowPlayingQueue = nowPlayingQueue;
            this.PlaylistItemId = playlistItemId;
            this.ServerId = serverId;
            this.UserPrimaryImageTag = userPrimaryImageTag;
            this.PlayState = playState;
            this.AdditionalUsers = additionalUsers;
            this.Capabilities = capabilities;
            this.RemoteEndPoint = remoteEndPoint;
            this.Id = id;
            this.UserId = userId;
            this.UserName = userName;
            this._Client = _client;
            this.LastActivityDate = lastActivityDate;
            this.LastPlaybackCheckIn = lastPlaybackCheckIn;
            this.DeviceName = deviceName;
            this.DeviceType = deviceType;
            this.NowPlayingItem = nowPlayingItem;
            this.FullNowPlayingItem = fullNowPlayingItem;
            this.NowViewingItem = nowViewingItem;
            this.DeviceId = deviceId;
            this.ApplicationVersion = applicationVersion;
            this.TranscodingInfo = transcodingInfo;
            this.NowPlayingQueue = nowPlayingQueue;
            this.HasCustomDeviceName = hasCustomDeviceName;
            this.PlaylistItemId = playlistItemId;
            this.ServerId = serverId;
            this.UserPrimaryImageTag = userPrimaryImageTag;
        }

        /// <summary>
        /// Gets or Sets PlayState
        /// </summary>
        [DataMember(Name="PlayState", EmitDefaultValue=true)]
        public PlayerStateInfo PlayState { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalUsers
        /// </summary>
        [DataMember(Name="AdditionalUsers", EmitDefaultValue=true)]
        public List<SessionUserInfo> AdditionalUsers { get; set; }

        /// <summary>
        /// Gets or Sets Capabilities
        /// </summary>
        [DataMember(Name="Capabilities", EmitDefaultValue=true)]
        public ClientCapabilities Capabilities { get; set; }

        /// <summary>
        /// Gets or sets the remote end point.
        /// </summary>
        /// <value>Gets or sets the remote end point.</value>
        [DataMember(Name="RemoteEndPoint", EmitDefaultValue=true)]
        public string RemoteEndPoint { get; set; }

        /// <summary>
        /// Gets or sets the playable media types.
        /// </summary>
        /// <value>Gets or sets the playable media types.</value>
        [DataMember(Name="PlayableMediaTypes", EmitDefaultValue=true)]
        public List<string> PlayableMediaTypes { get; private set; }

        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        /// <value>Gets or sets the id.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the user id.
        /// </summary>
        /// <value>Gets or sets the user id.</value>
        [DataMember(Name="UserId", EmitDefaultValue=false)]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or sets the username.
        /// </summary>
        /// <value>Gets or sets the username.</value>
        [DataMember(Name="UserName", EmitDefaultValue=true)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or sets the type of the client.
        /// </summary>
        /// <value>Gets or sets the type of the client.</value>
        [DataMember(Name="Client", EmitDefaultValue=true)]
        public string _Client { get; set; }

        /// <summary>
        /// Gets or sets the last activity date.
        /// </summary>
        /// <value>Gets or sets the last activity date.</value>
        [DataMember(Name="LastActivityDate", EmitDefaultValue=false)]
        public DateTime LastActivityDate { get; set; }

        /// <summary>
        /// Gets or sets the last playback check in.
        /// </summary>
        /// <value>Gets or sets the last playback check in.</value>
        [DataMember(Name="LastPlaybackCheckIn", EmitDefaultValue=false)]
        public DateTime LastPlaybackCheckIn { get; set; }

        /// <summary>
        /// Gets or sets the name of the device.
        /// </summary>
        /// <value>Gets or sets the name of the device.</value>
        [DataMember(Name="DeviceName", EmitDefaultValue=true)]
        public string DeviceName { get; set; }

        /// <summary>
        /// Gets or sets the type of the device.
        /// </summary>
        /// <value>Gets or sets the type of the device.</value>
        [DataMember(Name="DeviceType", EmitDefaultValue=true)]
        public string DeviceType { get; set; }

        /// <summary>
        /// Gets or sets the now playing item.
        /// </summary>
        /// <value>Gets or sets the now playing item.</value>
        [DataMember(Name="NowPlayingItem", EmitDefaultValue=true)]
        public BaseItemDto NowPlayingItem { get; set; }

        /// <summary>
        /// Class BaseItem.
        /// </summary>
        /// <value>Class BaseItem.</value>
        [DataMember(Name="FullNowPlayingItem", EmitDefaultValue=true)]
        public BaseItem FullNowPlayingItem { get; set; }

        /// <summary>
        /// This is strictly used as a data transfer object from the api layer.  This holds information about a BaseItem in a format that is convenient for the client.
        /// </summary>
        /// <value>This is strictly used as a data transfer object from the api layer.  This holds information about a BaseItem in a format that is convenient for the client.</value>
        [DataMember(Name="NowViewingItem", EmitDefaultValue=true)]
        public BaseItemDto NowViewingItem { get; set; }

        /// <summary>
        /// Gets or sets the device id.
        /// </summary>
        /// <value>Gets or sets the device id.</value>
        [DataMember(Name="DeviceId", EmitDefaultValue=true)]
        public string DeviceId { get; set; }

        /// <summary>
        /// Gets or sets the application version.
        /// </summary>
        /// <value>Gets or sets the application version.</value>
        [DataMember(Name="ApplicationVersion", EmitDefaultValue=true)]
        public string ApplicationVersion { get; set; }

        /// <summary>
        /// Gets or Sets TranscodingInfo
        /// </summary>
        [DataMember(Name="TranscodingInfo", EmitDefaultValue=true)]
        public TranscodingInfo TranscodingInfo { get; set; }

        /// <summary>
        /// Gets a value indicating whether this instance is active.
        /// </summary>
        /// <value>Gets a value indicating whether this instance is active.</value>
        [DataMember(Name="IsActive", EmitDefaultValue=false)]
        public bool IsActive { get; private set; }

        /// <summary>
        /// Gets or Sets SupportsMediaControl
        /// </summary>
        [DataMember(Name="SupportsMediaControl", EmitDefaultValue=false)]
        public bool SupportsMediaControl { get; private set; }

        /// <summary>
        /// Gets or Sets SupportsRemoteControl
        /// </summary>
        [DataMember(Name="SupportsRemoteControl", EmitDefaultValue=false)]
        public bool SupportsRemoteControl { get; private set; }

        /// <summary>
        /// Gets or Sets NowPlayingQueue
        /// </summary>
        [DataMember(Name="NowPlayingQueue", EmitDefaultValue=true)]
        public List<QueueItem> NowPlayingQueue { get; set; }

        /// <summary>
        /// Gets or Sets HasCustomDeviceName
        /// </summary>
        [DataMember(Name="HasCustomDeviceName", EmitDefaultValue=false)]
        public bool HasCustomDeviceName { get; set; }

        /// <summary>
        /// Gets or Sets PlaylistItemId
        /// </summary>
        [DataMember(Name="PlaylistItemId", EmitDefaultValue=true)]
        public string PlaylistItemId { get; set; }

        /// <summary>
        /// Gets or Sets ServerId
        /// </summary>
        [DataMember(Name="ServerId", EmitDefaultValue=true)]
        public string ServerId { get; set; }

        /// <summary>
        /// Gets or Sets UserPrimaryImageTag
        /// </summary>
        [DataMember(Name="UserPrimaryImageTag", EmitDefaultValue=true)]
        public string UserPrimaryImageTag { get; set; }

        /// <summary>
        /// Gets or sets the supported commands.
        /// </summary>
        /// <value>Gets or sets the supported commands.</value>
        [DataMember(Name="SupportedCommands", EmitDefaultValue=true)]
        public List<GeneralCommandType> SupportedCommands { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SessionInfo {\n");
            sb.Append("  PlayState: ").Append(PlayState).Append("\n");
            sb.Append("  AdditionalUsers: ").Append(AdditionalUsers).Append("\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("  RemoteEndPoint: ").Append(RemoteEndPoint).Append("\n");
            sb.Append("  PlayableMediaTypes: ").Append(PlayableMediaTypes).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  _Client: ").Append(_Client).Append("\n");
            sb.Append("  LastActivityDate: ").Append(LastActivityDate).Append("\n");
            sb.Append("  LastPlaybackCheckIn: ").Append(LastPlaybackCheckIn).Append("\n");
            sb.Append("  DeviceName: ").Append(DeviceName).Append("\n");
            sb.Append("  DeviceType: ").Append(DeviceType).Append("\n");
            sb.Append("  NowPlayingItem: ").Append(NowPlayingItem).Append("\n");
            sb.Append("  FullNowPlayingItem: ").Append(FullNowPlayingItem).Append("\n");
            sb.Append("  NowViewingItem: ").Append(NowViewingItem).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  ApplicationVersion: ").Append(ApplicationVersion).Append("\n");
            sb.Append("  TranscodingInfo: ").Append(TranscodingInfo).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  SupportsMediaControl: ").Append(SupportsMediaControl).Append("\n");
            sb.Append("  SupportsRemoteControl: ").Append(SupportsRemoteControl).Append("\n");
            sb.Append("  NowPlayingQueue: ").Append(NowPlayingQueue).Append("\n");
            sb.Append("  HasCustomDeviceName: ").Append(HasCustomDeviceName).Append("\n");
            sb.Append("  PlaylistItemId: ").Append(PlaylistItemId).Append("\n");
            sb.Append("  ServerId: ").Append(ServerId).Append("\n");
            sb.Append("  UserPrimaryImageTag: ").Append(UserPrimaryImageTag).Append("\n");
            sb.Append("  SupportedCommands: ").Append(SupportedCommands).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SessionInfo);
        }

        /// <summary>
        /// Returns true if SessionInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SessionInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PlayState == input.PlayState ||
                    (this.PlayState != null &&
                    this.PlayState.Equals(input.PlayState))
                ) && 
                (
                    this.AdditionalUsers == input.AdditionalUsers ||
                    this.AdditionalUsers != null &&
                    input.AdditionalUsers != null &&
                    this.AdditionalUsers.SequenceEqual(input.AdditionalUsers)
                ) && 
                (
                    this.Capabilities == input.Capabilities ||
                    (this.Capabilities != null &&
                    this.Capabilities.Equals(input.Capabilities))
                ) && 
                (
                    this.RemoteEndPoint == input.RemoteEndPoint ||
                    (this.RemoteEndPoint != null &&
                    this.RemoteEndPoint.Equals(input.RemoteEndPoint))
                ) && 
                (
                    this.PlayableMediaTypes == input.PlayableMediaTypes ||
                    this.PlayableMediaTypes != null &&
                    input.PlayableMediaTypes != null &&
                    this.PlayableMediaTypes.SequenceEqual(input.PlayableMediaTypes)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this._Client == input._Client ||
                    (this._Client != null &&
                    this._Client.Equals(input._Client))
                ) && 
                (
                    this.LastActivityDate == input.LastActivityDate ||
                    (this.LastActivityDate != null &&
                    this.LastActivityDate.Equals(input.LastActivityDate))
                ) && 
                (
                    this.LastPlaybackCheckIn == input.LastPlaybackCheckIn ||
                    (this.LastPlaybackCheckIn != null &&
                    this.LastPlaybackCheckIn.Equals(input.LastPlaybackCheckIn))
                ) && 
                (
                    this.DeviceName == input.DeviceName ||
                    (this.DeviceName != null &&
                    this.DeviceName.Equals(input.DeviceName))
                ) && 
                (
                    this.DeviceType == input.DeviceType ||
                    (this.DeviceType != null &&
                    this.DeviceType.Equals(input.DeviceType))
                ) && 
                (
                    this.NowPlayingItem == input.NowPlayingItem ||
                    (this.NowPlayingItem != null &&
                    this.NowPlayingItem.Equals(input.NowPlayingItem))
                ) && 
                (
                    this.FullNowPlayingItem == input.FullNowPlayingItem ||
                    (this.FullNowPlayingItem != null &&
                    this.FullNowPlayingItem.Equals(input.FullNowPlayingItem))
                ) && 
                (
                    this.NowViewingItem == input.NowViewingItem ||
                    (this.NowViewingItem != null &&
                    this.NowViewingItem.Equals(input.NowViewingItem))
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.ApplicationVersion == input.ApplicationVersion ||
                    (this.ApplicationVersion != null &&
                    this.ApplicationVersion.Equals(input.ApplicationVersion))
                ) && 
                (
                    this.TranscodingInfo == input.TranscodingInfo ||
                    (this.TranscodingInfo != null &&
                    this.TranscodingInfo.Equals(input.TranscodingInfo))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.SupportsMediaControl == input.SupportsMediaControl ||
                    (this.SupportsMediaControl != null &&
                    this.SupportsMediaControl.Equals(input.SupportsMediaControl))
                ) && 
                (
                    this.SupportsRemoteControl == input.SupportsRemoteControl ||
                    (this.SupportsRemoteControl != null &&
                    this.SupportsRemoteControl.Equals(input.SupportsRemoteControl))
                ) && 
                (
                    this.NowPlayingQueue == input.NowPlayingQueue ||
                    this.NowPlayingQueue != null &&
                    input.NowPlayingQueue != null &&
                    this.NowPlayingQueue.SequenceEqual(input.NowPlayingQueue)
                ) && 
                (
                    this.HasCustomDeviceName == input.HasCustomDeviceName ||
                    (this.HasCustomDeviceName != null &&
                    this.HasCustomDeviceName.Equals(input.HasCustomDeviceName))
                ) && 
                (
                    this.PlaylistItemId == input.PlaylistItemId ||
                    (this.PlaylistItemId != null &&
                    this.PlaylistItemId.Equals(input.PlaylistItemId))
                ) && 
                (
                    this.ServerId == input.ServerId ||
                    (this.ServerId != null &&
                    this.ServerId.Equals(input.ServerId))
                ) && 
                (
                    this.UserPrimaryImageTag == input.UserPrimaryImageTag ||
                    (this.UserPrimaryImageTag != null &&
                    this.UserPrimaryImageTag.Equals(input.UserPrimaryImageTag))
                ) && 
                (
                    this.SupportedCommands == input.SupportedCommands ||
                    this.SupportedCommands != null &&
                    input.SupportedCommands != null &&
                    this.SupportedCommands.SequenceEqual(input.SupportedCommands)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PlayState != null)
                    hashCode = hashCode * 59 + this.PlayState.GetHashCode();
                if (this.AdditionalUsers != null)
                    hashCode = hashCode * 59 + this.AdditionalUsers.GetHashCode();
                if (this.Capabilities != null)
                    hashCode = hashCode * 59 + this.Capabilities.GetHashCode();
                if (this.RemoteEndPoint != null)
                    hashCode = hashCode * 59 + this.RemoteEndPoint.GetHashCode();
                if (this.PlayableMediaTypes != null)
                    hashCode = hashCode * 59 + this.PlayableMediaTypes.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this._Client != null)
                    hashCode = hashCode * 59 + this._Client.GetHashCode();
                if (this.LastActivityDate != null)
                    hashCode = hashCode * 59 + this.LastActivityDate.GetHashCode();
                if (this.LastPlaybackCheckIn != null)
                    hashCode = hashCode * 59 + this.LastPlaybackCheckIn.GetHashCode();
                if (this.DeviceName != null)
                    hashCode = hashCode * 59 + this.DeviceName.GetHashCode();
                if (this.DeviceType != null)
                    hashCode = hashCode * 59 + this.DeviceType.GetHashCode();
                if (this.NowPlayingItem != null)
                    hashCode = hashCode * 59 + this.NowPlayingItem.GetHashCode();
                if (this.FullNowPlayingItem != null)
                    hashCode = hashCode * 59 + this.FullNowPlayingItem.GetHashCode();
                if (this.NowViewingItem != null)
                    hashCode = hashCode * 59 + this.NowViewingItem.GetHashCode();
                if (this.DeviceId != null)
                    hashCode = hashCode * 59 + this.DeviceId.GetHashCode();
                if (this.ApplicationVersion != null)
                    hashCode = hashCode * 59 + this.ApplicationVersion.GetHashCode();
                if (this.TranscodingInfo != null)
                    hashCode = hashCode * 59 + this.TranscodingInfo.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.SupportsMediaControl != null)
                    hashCode = hashCode * 59 + this.SupportsMediaControl.GetHashCode();
                if (this.SupportsRemoteControl != null)
                    hashCode = hashCode * 59 + this.SupportsRemoteControl.GetHashCode();
                if (this.NowPlayingQueue != null)
                    hashCode = hashCode * 59 + this.NowPlayingQueue.GetHashCode();
                if (this.HasCustomDeviceName != null)
                    hashCode = hashCode * 59 + this.HasCustomDeviceName.GetHashCode();
                if (this.PlaylistItemId != null)
                    hashCode = hashCode * 59 + this.PlaylistItemId.GetHashCode();
                if (this.ServerId != null)
                    hashCode = hashCode * 59 + this.ServerId.GetHashCode();
                if (this.UserPrimaryImageTag != null)
                    hashCode = hashCode * 59 + this.UserPrimaryImageTag.GetHashCode();
                if (this.SupportedCommands != null)
                    hashCode = hashCode * 59 + this.SupportedCommands.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
