/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Represents the server configuration.
    /// </summary>
    [DataContract]
    public partial class ServerConfiguration :  IEquatable<ServerConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Gets or sets the image saving convention.
        /// </summary>
        /// <value>Gets or sets the image saving convention.</value>
        [DataMember(Name="ImageSavingConvention", EmitDefaultValue=false)]
        public ImageSavingConvention? ImageSavingConvention { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerConfiguration" /> class.
        /// </summary>
        /// <param name="logFileRetentionDays">Gets or sets the number of days we should retain log files..</param>
        /// <param name="isStartupWizardCompleted">Gets or sets a value indicating whether this instance is first run..</param>
        /// <param name="cachePath">Gets or sets the cache path..</param>
        /// <param name="previousVersion">Gets or sets the last known version that was ran using the configuration..</param>
        /// <param name="previousVersionStr">Gets or sets the stringified PreviousVersion to be stored/loaded,  because System.Version itself isn&#39;t xml-serializable..</param>
        /// <param name="enableUPnP">Gets or sets a value indicating whether to enable automatic port forwarding..</param>
        /// <param name="enableMetrics">Gets or sets a value indicating whether to enable prometheus metrics exporting..</param>
        /// <param name="publicPort">Gets or sets the public mapped port..</param>
        /// <param name="uPnPCreateHttpPortMap">Gets or sets a value indicating whether the http port should be mapped as part of UPnP automatic port forwarding..</param>
        /// <param name="uDPPortRange">Gets or sets client udp port range..</param>
        /// <param name="enableIPV6">Gets or sets a value indicating whether IPV6 capability is enabled..</param>
        /// <param name="enableIPV4">Gets or sets a value indicating whether IPV4 capability is enabled..</param>
        /// <param name="enableSSDPTracing">Gets or sets a value indicating whether detailed ssdp logs are sent to the console/log.  \&quot;Emby.Dlna\&quot;: \&quot;Debug\&quot; must be set in logging.default.json for this property to work..</param>
        /// <param name="sSDPTracingFilter">Gets or sets a value indicating whether an IP address is to be used to filter the detailed ssdp logs that are being sent to the console/log.  If the setting \&quot;Emby.Dlna\&quot;: \&quot;Debug\&quot; msut be set in logging.default.json for this property to work..</param>
        /// <param name="uDPSendCount">Gets or sets the number of times SSDP UDP messages are sent..</param>
        /// <param name="uDPSendDelay">Gets or sets the delay between each groups of SSDP messages (in ms)..</param>
        /// <param name="ignoreVirtualInterfaces">Gets or sets a value indicating whether address names that match MediaBrowser.Model.Configuration.ServerConfiguration.VirtualInterfaceNames should be Ignore for the purposes of binding..</param>
        /// <param name="virtualInterfaceNames">Gets or sets a value indicating the interfaces that should be ignored. The list can be comma separated. &lt;seealso cref&#x3D;\&quot;P:MediaBrowser.Model.Configuration.ServerConfiguration.IgnoreVirtualInterfaces\&quot; /&gt;..</param>
        /// <param name="gatewayMonitorPeriod">Gets or sets the time (in seconds) between the pings of SSDP gateway monitor..</param>
        /// <param name="trustAllIP6Interfaces">Gets or sets a value indicating whether all IPv6 interfaces should be treated as on the internal network.  Depending on the address range implemented ULA ranges might not be used..</param>
        /// <param name="hDHomerunPortRange">Gets or sets the ports that HDHomerun uses..</param>
        /// <param name="publishedServerUriBySubnet">Gets or sets PublishedServerUri to advertise for specific subnets..</param>
        /// <param name="autoDiscoveryTracing">Gets or sets a value indicating whether Autodiscovery tracing is enabled..</param>
        /// <param name="autoDiscovery">Gets or sets a value indicating whether Autodiscovery is enabled..</param>
        /// <param name="publicHttpsPort">Gets or sets the public HTTPS port..</param>
        /// <param name="httpServerPortNumber">Gets or sets the HTTP server port number..</param>
        /// <param name="httpsPortNumber">Gets or sets the HTTPS server port number..</param>
        /// <param name="enableHttps">Gets or sets a value indicating whether to use HTTPS..</param>
        /// <param name="enableNormalizedItemByNameIds">enableNormalizedItemByNameIds.</param>
        /// <param name="certificatePath">Gets or sets the filesystem path of an X.509 certificate to use for SSL..</param>
        /// <param name="certificatePassword">Gets or sets the password required to access the X.509 certificate data in the file specified by MediaBrowser.Model.Configuration.ServerConfiguration.CertificatePath..</param>
        /// <param name="isPortAuthorized">Gets or sets a value indicating whether this instance is port authorized..</param>
        /// <param name="quickConnectAvailable">Gets or sets a value indicating whether quick connect is available for use on this server..</param>
        /// <param name="enableRemoteAccess">Gets or sets a value indicating whether access outside of the LAN is permitted..</param>
        /// <param name="enableCaseSensitiveItemIds">Gets or sets a value indicating whether [enable case sensitive item ids]..</param>
        /// <param name="disableLiveTvChannelUserDataName">disableLiveTvChannelUserDataName.</param>
        /// <param name="metadataPath">Gets or sets the metadata path..</param>
        /// <param name="metadataNetworkPath">metadataNetworkPath.</param>
        /// <param name="preferredMetadataLanguage">Gets or sets the preferred metadata language..</param>
        /// <param name="metadataCountryCode">Gets or sets the metadata country code..</param>
        /// <param name="sortReplaceCharacters">Gets or sets characters to be replaced with a &#39; &#39; in strings to create a sort name..</param>
        /// <param name="sortRemoveCharacters">Gets or sets characters to be removed from strings to create a sort name..</param>
        /// <param name="sortRemoveWords">Gets or sets words to be removed from strings to create a sort name..</param>
        /// <param name="minResumePct">Gets or sets the minimum percentage of an item that must be played in order for playstate to be updated..</param>
        /// <param name="maxResumePct">Gets or sets the maximum percentage of an item that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched..</param>
        /// <param name="minResumeDurationSeconds">Gets or sets the minimum duration that an item must have in order to be eligible for playstate updates...</param>
        /// <param name="minAudiobookResume">Gets or sets the minimum minutes of a book that must be played in order for playstate to be updated..</param>
        /// <param name="maxAudiobookResume">Gets or sets the remaining minutes of a book that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched..</param>
        /// <param name="libraryMonitorDelay">Gets or sets the delay in seconds that we will wait after a file system change to try and discover what has been added/removed  Some delay is necessary with some items because their creation is not atomic.  It involves the creation of several  different directories and files..</param>
        /// <param name="enableDashboardResponseCaching">Gets or sets a value indicating whether [enable dashboard response caching].  Allows potential contributors without visual studio to modify production dashboard code and test changes..</param>
        /// <param name="imageSavingConvention">Gets or sets the image saving convention..</param>
        /// <param name="metadataOptions">metadataOptions.</param>
        /// <param name="skipDeserializationForBasicTypes">skipDeserializationForBasicTypes.</param>
        /// <param name="serverName">serverName.</param>
        /// <param name="baseUrl">baseUrl.</param>
        /// <param name="uICulture">uICulture.</param>
        /// <param name="saveMetadataHidden">saveMetadataHidden.</param>
        /// <param name="contentTypes">contentTypes.</param>
        /// <param name="remoteClientBitrateLimit">remoteClientBitrateLimit.</param>
        /// <param name="enableFolderView">enableFolderView.</param>
        /// <param name="enableGroupingIntoCollections">enableGroupingIntoCollections.</param>
        /// <param name="displaySpecialsWithinSeasons">displaySpecialsWithinSeasons.</param>
        /// <param name="localNetworkSubnets">Gets or sets the subnets that are deemed to make up the LAN..</param>
        /// <param name="localNetworkAddresses">Gets or sets the interface addresses which Jellyfin will bind to. If empty, all interfaces will be used..</param>
        /// <param name="codecsUsed">codecsUsed.</param>
        /// <param name="pluginRepositories">pluginRepositories.</param>
        /// <param name="enableExternalContentInSuggestions">enableExternalContentInSuggestions.</param>
        /// <param name="requireHttps">Gets or sets a value indicating whether the server should force connections over HTTPS..</param>
        /// <param name="enableNewOmdbSupport">enableNewOmdbSupport.</param>
        /// <param name="remoteIPFilter">Gets or sets the filter for remote IP connectivity. Used in conjuntion with &lt;seealso cref&#x3D;\&quot;P:MediaBrowser.Model.Configuration.ServerConfiguration.IsRemoteIPFilterBlacklist\&quot; /&gt;..</param>
        /// <param name="isRemoteIPFilterBlacklist">Gets or sets a value indicating whether &lt;seealso cref&#x3D;\&quot;P:MediaBrowser.Model.Configuration.ServerConfiguration.RemoteIPFilter\&quot; /&gt; contains a blacklist or a whitelist. Default is a whitelist..</param>
        /// <param name="imageExtractionTimeoutMs">imageExtractionTimeoutMs.</param>
        /// <param name="pathSubstitutions">pathSubstitutions.</param>
        /// <param name="uninstalledPlugins">uninstalledPlugins.</param>
        /// <param name="enableSlowResponseWarning">Gets or sets a value indicating whether slow server responses should be logged as a warning..</param>
        /// <param name="slowResponseThresholdMs">Gets or sets the threshold for the slow response time warning in ms..</param>
        /// <param name="corsHosts">Gets or sets the cors hosts..</param>
        /// <param name="knownProxies">Gets or sets the known proxies..</param>
        /// <param name="activityLogRetentionDays">Gets or sets the number of days we should retain activity logs..</param>
        /// <param name="libraryScanFanoutConcurrency">Gets or sets the how the library scan fans out..</param>
        /// <param name="libraryMetadataRefreshConcurrency">Gets or sets the how many metadata refreshes can run concurrently..</param>
        /// <param name="removeOldPlugins">Gets or sets a value indicating whether older plugins should automatically be deleted from the plugin folder..</param>
        public ServerConfiguration(int logFileRetentionDays = default(int), bool isStartupWizardCompleted = default(bool), string cachePath = default(string), Version previousVersion = default(Version), string previousVersionStr = default(string), bool enableUPnP = default(bool), bool enableMetrics = default(bool), int publicPort = default(int), bool uPnPCreateHttpPortMap = default(bool), string uDPPortRange = default(string), bool enableIPV6 = default(bool), bool enableIPV4 = default(bool), bool enableSSDPTracing = default(bool), string sSDPTracingFilter = default(string), int uDPSendCount = default(int), int uDPSendDelay = default(int), bool ignoreVirtualInterfaces = default(bool), string virtualInterfaceNames = default(string), int gatewayMonitorPeriod = default(int), bool trustAllIP6Interfaces = default(bool), string hDHomerunPortRange = default(string), List<string> publishedServerUriBySubnet = default(List<string>), bool autoDiscoveryTracing = default(bool), bool autoDiscovery = default(bool), int publicHttpsPort = default(int), int httpServerPortNumber = default(int), int httpsPortNumber = default(int), bool enableHttps = default(bool), bool enableNormalizedItemByNameIds = default(bool), string certificatePath = default(string), string certificatePassword = default(string), bool isPortAuthorized = default(bool), bool quickConnectAvailable = default(bool), bool enableRemoteAccess = default(bool), bool enableCaseSensitiveItemIds = default(bool), bool disableLiveTvChannelUserDataName = default(bool), string metadataPath = default(string), string metadataNetworkPath = default(string), string preferredMetadataLanguage = default(string), string metadataCountryCode = default(string), List<string> sortReplaceCharacters = default(List<string>), List<string> sortRemoveCharacters = default(List<string>), List<string> sortRemoveWords = default(List<string>), int minResumePct = default(int), int maxResumePct = default(int), int minResumeDurationSeconds = default(int), int minAudiobookResume = default(int), int maxAudiobookResume = default(int), int libraryMonitorDelay = default(int), bool enableDashboardResponseCaching = default(bool), ImageSavingConvention? imageSavingConvention = default(ImageSavingConvention?), List<MetadataOptions> metadataOptions = default(List<MetadataOptions>), bool skipDeserializationForBasicTypes = default(bool), string serverName = default(string), string baseUrl = default(string), string uICulture = default(string), bool saveMetadataHidden = default(bool), List<NameValuePair> contentTypes = default(List<NameValuePair>), int remoteClientBitrateLimit = default(int), bool enableFolderView = default(bool), bool enableGroupingIntoCollections = default(bool), bool displaySpecialsWithinSeasons = default(bool), List<string> localNetworkSubnets = default(List<string>), List<string> localNetworkAddresses = default(List<string>), List<string> codecsUsed = default(List<string>), List<RepositoryInfo> pluginRepositories = default(List<RepositoryInfo>), bool enableExternalContentInSuggestions = default(bool), bool requireHttps = default(bool), bool enableNewOmdbSupport = default(bool), List<string> remoteIPFilter = default(List<string>), bool isRemoteIPFilterBlacklist = default(bool), int imageExtractionTimeoutMs = default(int), List<PathSubstitution> pathSubstitutions = default(List<PathSubstitution>), List<string> uninstalledPlugins = default(List<string>), bool enableSlowResponseWarning = default(bool), long slowResponseThresholdMs = default(long), List<string> corsHosts = default(List<string>), List<string> knownProxies = default(List<string>), int? activityLogRetentionDays = default(int?), int libraryScanFanoutConcurrency = default(int), int libraryMetadataRefreshConcurrency = default(int), bool removeOldPlugins = default(bool))
        {
            this.CachePath = cachePath;
            this.PreviousVersion = previousVersion;
            this.PreviousVersionStr = previousVersionStr;
            this.UDPPortRange = uDPPortRange;
            this.SSDPTracingFilter = sSDPTracingFilter;
            this.VirtualInterfaceNames = virtualInterfaceNames;
            this.HDHomerunPortRange = hDHomerunPortRange;
            this.PublishedServerUriBySubnet = publishedServerUriBySubnet;
            this.CertificatePath = certificatePath;
            this.CertificatePassword = certificatePassword;
            this.MetadataPath = metadataPath;
            this.MetadataNetworkPath = metadataNetworkPath;
            this.PreferredMetadataLanguage = preferredMetadataLanguage;
            this.MetadataCountryCode = metadataCountryCode;
            this.SortReplaceCharacters = sortReplaceCharacters;
            this.SortRemoveCharacters = sortRemoveCharacters;
            this.SortRemoveWords = sortRemoveWords;
            this.MetadataOptions = metadataOptions;
            this.ServerName = serverName;
            this.BaseUrl = baseUrl;
            this.UICulture = uICulture;
            this.ContentTypes = contentTypes;
            this.LocalNetworkSubnets = localNetworkSubnets;
            this.LocalNetworkAddresses = localNetworkAddresses;
            this.CodecsUsed = codecsUsed;
            this.PluginRepositories = pluginRepositories;
            this.RemoteIPFilter = remoteIPFilter;
            this.PathSubstitutions = pathSubstitutions;
            this.UninstalledPlugins = uninstalledPlugins;
            this.CorsHosts = corsHosts;
            this.KnownProxies = knownProxies;
            this.ActivityLogRetentionDays = activityLogRetentionDays;
            this.LogFileRetentionDays = logFileRetentionDays;
            this.IsStartupWizardCompleted = isStartupWizardCompleted;
            this.CachePath = cachePath;
            this.PreviousVersion = previousVersion;
            this.PreviousVersionStr = previousVersionStr;
            this.EnableUPnP = enableUPnP;
            this.EnableMetrics = enableMetrics;
            this.PublicPort = publicPort;
            this.UPnPCreateHttpPortMap = uPnPCreateHttpPortMap;
            this.UDPPortRange = uDPPortRange;
            this.EnableIPV6 = enableIPV6;
            this.EnableIPV4 = enableIPV4;
            this.EnableSSDPTracing = enableSSDPTracing;
            this.SSDPTracingFilter = sSDPTracingFilter;
            this.UDPSendCount = uDPSendCount;
            this.UDPSendDelay = uDPSendDelay;
            this.IgnoreVirtualInterfaces = ignoreVirtualInterfaces;
            this.VirtualInterfaceNames = virtualInterfaceNames;
            this.GatewayMonitorPeriod = gatewayMonitorPeriod;
            this.TrustAllIP6Interfaces = trustAllIP6Interfaces;
            this.HDHomerunPortRange = hDHomerunPortRange;
            this.PublishedServerUriBySubnet = publishedServerUriBySubnet;
            this.AutoDiscoveryTracing = autoDiscoveryTracing;
            this.AutoDiscovery = autoDiscovery;
            this.PublicHttpsPort = publicHttpsPort;
            this.HttpServerPortNumber = httpServerPortNumber;
            this.HttpsPortNumber = httpsPortNumber;
            this.EnableHttps = enableHttps;
            this.EnableNormalizedItemByNameIds = enableNormalizedItemByNameIds;
            this.CertificatePath = certificatePath;
            this.CertificatePassword = certificatePassword;
            this.IsPortAuthorized = isPortAuthorized;
            this.QuickConnectAvailable = quickConnectAvailable;
            this.EnableRemoteAccess = enableRemoteAccess;
            this.EnableCaseSensitiveItemIds = enableCaseSensitiveItemIds;
            this.DisableLiveTvChannelUserDataName = disableLiveTvChannelUserDataName;
            this.MetadataPath = metadataPath;
            this.MetadataNetworkPath = metadataNetworkPath;
            this.PreferredMetadataLanguage = preferredMetadataLanguage;
            this.MetadataCountryCode = metadataCountryCode;
            this.SortReplaceCharacters = sortReplaceCharacters;
            this.SortRemoveCharacters = sortRemoveCharacters;
            this.SortRemoveWords = sortRemoveWords;
            this.MinResumePct = minResumePct;
            this.MaxResumePct = maxResumePct;
            this.MinResumeDurationSeconds = minResumeDurationSeconds;
            this.MinAudiobookResume = minAudiobookResume;
            this.MaxAudiobookResume = maxAudiobookResume;
            this.LibraryMonitorDelay = libraryMonitorDelay;
            this.EnableDashboardResponseCaching = enableDashboardResponseCaching;
            this.ImageSavingConvention = imageSavingConvention;
            this.MetadataOptions = metadataOptions;
            this.SkipDeserializationForBasicTypes = skipDeserializationForBasicTypes;
            this.ServerName = serverName;
            this.BaseUrl = baseUrl;
            this.UICulture = uICulture;
            this.SaveMetadataHidden = saveMetadataHidden;
            this.ContentTypes = contentTypes;
            this.RemoteClientBitrateLimit = remoteClientBitrateLimit;
            this.EnableFolderView = enableFolderView;
            this.EnableGroupingIntoCollections = enableGroupingIntoCollections;
            this.DisplaySpecialsWithinSeasons = displaySpecialsWithinSeasons;
            this.LocalNetworkSubnets = localNetworkSubnets;
            this.LocalNetworkAddresses = localNetworkAddresses;
            this.CodecsUsed = codecsUsed;
            this.PluginRepositories = pluginRepositories;
            this.EnableExternalContentInSuggestions = enableExternalContentInSuggestions;
            this.RequireHttps = requireHttps;
            this.EnableNewOmdbSupport = enableNewOmdbSupport;
            this.RemoteIPFilter = remoteIPFilter;
            this.IsRemoteIPFilterBlacklist = isRemoteIPFilterBlacklist;
            this.ImageExtractionTimeoutMs = imageExtractionTimeoutMs;
            this.PathSubstitutions = pathSubstitutions;
            this.UninstalledPlugins = uninstalledPlugins;
            this.EnableSlowResponseWarning = enableSlowResponseWarning;
            this.SlowResponseThresholdMs = slowResponseThresholdMs;
            this.CorsHosts = corsHosts;
            this.KnownProxies = knownProxies;
            this.ActivityLogRetentionDays = activityLogRetentionDays;
            this.LibraryScanFanoutConcurrency = libraryScanFanoutConcurrency;
            this.LibraryMetadataRefreshConcurrency = libraryMetadataRefreshConcurrency;
            this.RemoveOldPlugins = removeOldPlugins;
        }

        /// <summary>
        /// Gets or sets the number of days we should retain log files.
        /// </summary>
        /// <value>Gets or sets the number of days we should retain log files.</value>
        [DataMember(Name="LogFileRetentionDays", EmitDefaultValue=false)]
        public int LogFileRetentionDays { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is first run.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is first run.</value>
        [DataMember(Name="IsStartupWizardCompleted", EmitDefaultValue=false)]
        public bool IsStartupWizardCompleted { get; set; }

        /// <summary>
        /// Gets or sets the cache path.
        /// </summary>
        /// <value>Gets or sets the cache path.</value>
        [DataMember(Name="CachePath", EmitDefaultValue=true)]
        public string CachePath { get; set; }

        /// <summary>
        /// Gets or sets the last known version that was ran using the configuration.
        /// </summary>
        /// <value>Gets or sets the last known version that was ran using the configuration.</value>
        [DataMember(Name="PreviousVersion", EmitDefaultValue=true)]
        public Version PreviousVersion { get; set; }

        /// <summary>
        /// Gets or sets the stringified PreviousVersion to be stored/loaded,  because System.Version itself isn&#39;t xml-serializable.
        /// </summary>
        /// <value>Gets or sets the stringified PreviousVersion to be stored/loaded,  because System.Version itself isn&#39;t xml-serializable.</value>
        [DataMember(Name="PreviousVersionStr", EmitDefaultValue=true)]
        public string PreviousVersionStr { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to enable automatic port forwarding.
        /// </summary>
        /// <value>Gets or sets a value indicating whether to enable automatic port forwarding.</value>
        [DataMember(Name="EnableUPnP", EmitDefaultValue=false)]
        public bool EnableUPnP { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to enable prometheus metrics exporting.
        /// </summary>
        /// <value>Gets or sets a value indicating whether to enable prometheus metrics exporting.</value>
        [DataMember(Name="EnableMetrics", EmitDefaultValue=false)]
        public bool EnableMetrics { get; set; }

        /// <summary>
        /// Gets or sets the public mapped port.
        /// </summary>
        /// <value>Gets or sets the public mapped port.</value>
        [DataMember(Name="PublicPort", EmitDefaultValue=false)]
        public int PublicPort { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the http port should be mapped as part of UPnP automatic port forwarding.
        /// </summary>
        /// <value>Gets or sets a value indicating whether the http port should be mapped as part of UPnP automatic port forwarding.</value>
        [DataMember(Name="UPnPCreateHttpPortMap", EmitDefaultValue=false)]
        public bool UPnPCreateHttpPortMap { get; set; }

        /// <summary>
        /// Gets or sets client udp port range.
        /// </summary>
        /// <value>Gets or sets client udp port range.</value>
        [DataMember(Name="UDPPortRange", EmitDefaultValue=true)]
        public string UDPPortRange { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether IPV6 capability is enabled.
        /// </summary>
        /// <value>Gets or sets a value indicating whether IPV6 capability is enabled.</value>
        [DataMember(Name="EnableIPV6", EmitDefaultValue=false)]
        public bool EnableIPV6 { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether IPV4 capability is enabled.
        /// </summary>
        /// <value>Gets or sets a value indicating whether IPV4 capability is enabled.</value>
        [DataMember(Name="EnableIPV4", EmitDefaultValue=false)]
        public bool EnableIPV4 { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether detailed ssdp logs are sent to the console/log.  \&quot;Emby.Dlna\&quot;: \&quot;Debug\&quot; must be set in logging.default.json for this property to work.
        /// </summary>
        /// <value>Gets or sets a value indicating whether detailed ssdp logs are sent to the console/log.  \&quot;Emby.Dlna\&quot;: \&quot;Debug\&quot; must be set in logging.default.json for this property to work.</value>
        [DataMember(Name="EnableSSDPTracing", EmitDefaultValue=false)]
        public bool EnableSSDPTracing { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether an IP address is to be used to filter the detailed ssdp logs that are being sent to the console/log.  If the setting \&quot;Emby.Dlna\&quot;: \&quot;Debug\&quot; msut be set in logging.default.json for this property to work.
        /// </summary>
        /// <value>Gets or sets a value indicating whether an IP address is to be used to filter the detailed ssdp logs that are being sent to the console/log.  If the setting \&quot;Emby.Dlna\&quot;: \&quot;Debug\&quot; msut be set in logging.default.json for this property to work.</value>
        [DataMember(Name="SSDPTracingFilter", EmitDefaultValue=true)]
        public string SSDPTracingFilter { get; set; }

        /// <summary>
        /// Gets or sets the number of times SSDP UDP messages are sent.
        /// </summary>
        /// <value>Gets or sets the number of times SSDP UDP messages are sent.</value>
        [DataMember(Name="UDPSendCount", EmitDefaultValue=false)]
        public int UDPSendCount { get; set; }

        /// <summary>
        /// Gets or sets the delay between each groups of SSDP messages (in ms).
        /// </summary>
        /// <value>Gets or sets the delay between each groups of SSDP messages (in ms).</value>
        [DataMember(Name="UDPSendDelay", EmitDefaultValue=false)]
        public int UDPSendDelay { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether address names that match MediaBrowser.Model.Configuration.ServerConfiguration.VirtualInterfaceNames should be Ignore for the purposes of binding.
        /// </summary>
        /// <value>Gets or sets a value indicating whether address names that match MediaBrowser.Model.Configuration.ServerConfiguration.VirtualInterfaceNames should be Ignore for the purposes of binding.</value>
        [DataMember(Name="IgnoreVirtualInterfaces", EmitDefaultValue=false)]
        public bool IgnoreVirtualInterfaces { get; set; }

        /// <summary>
        /// Gets or sets a value indicating the interfaces that should be ignored. The list can be comma separated. &lt;seealso cref&#x3D;\&quot;P:MediaBrowser.Model.Configuration.ServerConfiguration.IgnoreVirtualInterfaces\&quot; /&gt;.
        /// </summary>
        /// <value>Gets or sets a value indicating the interfaces that should be ignored. The list can be comma separated. &lt;seealso cref&#x3D;\&quot;P:MediaBrowser.Model.Configuration.ServerConfiguration.IgnoreVirtualInterfaces\&quot; /&gt;.</value>
        [DataMember(Name="VirtualInterfaceNames", EmitDefaultValue=true)]
        public string VirtualInterfaceNames { get; set; }

        /// <summary>
        /// Gets or sets the time (in seconds) between the pings of SSDP gateway monitor.
        /// </summary>
        /// <value>Gets or sets the time (in seconds) between the pings of SSDP gateway monitor.</value>
        [DataMember(Name="GatewayMonitorPeriod", EmitDefaultValue=false)]
        public int GatewayMonitorPeriod { get; set; }

        /// <summary>
        /// Gets a value indicating whether multi-socket binding is available.
        /// </summary>
        /// <value>Gets a value indicating whether multi-socket binding is available.</value>
        [DataMember(Name="EnableMultiSocketBinding", EmitDefaultValue=false)]
        public bool EnableMultiSocketBinding { get; private set; }

        /// <summary>
        /// Gets or sets a value indicating whether all IPv6 interfaces should be treated as on the internal network.  Depending on the address range implemented ULA ranges might not be used.
        /// </summary>
        /// <value>Gets or sets a value indicating whether all IPv6 interfaces should be treated as on the internal network.  Depending on the address range implemented ULA ranges might not be used.</value>
        [DataMember(Name="TrustAllIP6Interfaces", EmitDefaultValue=false)]
        public bool TrustAllIP6Interfaces { get; set; }

        /// <summary>
        /// Gets or sets the ports that HDHomerun uses.
        /// </summary>
        /// <value>Gets or sets the ports that HDHomerun uses.</value>
        [DataMember(Name="HDHomerunPortRange", EmitDefaultValue=true)]
        public string HDHomerunPortRange { get; set; }

        /// <summary>
        /// Gets or sets PublishedServerUri to advertise for specific subnets.
        /// </summary>
        /// <value>Gets or sets PublishedServerUri to advertise for specific subnets.</value>
        [DataMember(Name="PublishedServerUriBySubnet", EmitDefaultValue=true)]
        public List<string> PublishedServerUriBySubnet { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether Autodiscovery tracing is enabled.
        /// </summary>
        /// <value>Gets or sets a value indicating whether Autodiscovery tracing is enabled.</value>
        [DataMember(Name="AutoDiscoveryTracing", EmitDefaultValue=false)]
        public bool AutoDiscoveryTracing { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether Autodiscovery is enabled.
        /// </summary>
        /// <value>Gets or sets a value indicating whether Autodiscovery is enabled.</value>
        [DataMember(Name="AutoDiscovery", EmitDefaultValue=false)]
        public bool AutoDiscovery { get; set; }

        /// <summary>
        /// Gets or sets the public HTTPS port.
        /// </summary>
        /// <value>Gets or sets the public HTTPS port.</value>
        [DataMember(Name="PublicHttpsPort", EmitDefaultValue=false)]
        public int PublicHttpsPort { get; set; }

        /// <summary>
        /// Gets or sets the HTTP server port number.
        /// </summary>
        /// <value>Gets or sets the HTTP server port number.</value>
        [DataMember(Name="HttpServerPortNumber", EmitDefaultValue=false)]
        public int HttpServerPortNumber { get; set; }

        /// <summary>
        /// Gets or sets the HTTPS server port number.
        /// </summary>
        /// <value>Gets or sets the HTTPS server port number.</value>
        [DataMember(Name="HttpsPortNumber", EmitDefaultValue=false)]
        public int HttpsPortNumber { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to use HTTPS.
        /// </summary>
        /// <value>Gets or sets a value indicating whether to use HTTPS.</value>
        [DataMember(Name="EnableHttps", EmitDefaultValue=false)]
        public bool EnableHttps { get; set; }

        /// <summary>
        /// Gets or Sets EnableNormalizedItemByNameIds
        /// </summary>
        [DataMember(Name="EnableNormalizedItemByNameIds", EmitDefaultValue=false)]
        public bool EnableNormalizedItemByNameIds { get; set; }

        /// <summary>
        /// Gets or sets the filesystem path of an X.509 certificate to use for SSL.
        /// </summary>
        /// <value>Gets or sets the filesystem path of an X.509 certificate to use for SSL.</value>
        [DataMember(Name="CertificatePath", EmitDefaultValue=true)]
        public string CertificatePath { get; set; }

        /// <summary>
        /// Gets or sets the password required to access the X.509 certificate data in the file specified by MediaBrowser.Model.Configuration.ServerConfiguration.CertificatePath.
        /// </summary>
        /// <value>Gets or sets the password required to access the X.509 certificate data in the file specified by MediaBrowser.Model.Configuration.ServerConfiguration.CertificatePath.</value>
        [DataMember(Name="CertificatePassword", EmitDefaultValue=true)]
        public string CertificatePassword { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is port authorized.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is port authorized.</value>
        [DataMember(Name="IsPortAuthorized", EmitDefaultValue=false)]
        public bool IsPortAuthorized { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether quick connect is available for use on this server.
        /// </summary>
        /// <value>Gets or sets a value indicating whether quick connect is available for use on this server.</value>
        [DataMember(Name="QuickConnectAvailable", EmitDefaultValue=false)]
        public bool QuickConnectAvailable { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether access outside of the LAN is permitted.
        /// </summary>
        /// <value>Gets or sets a value indicating whether access outside of the LAN is permitted.</value>
        [DataMember(Name="EnableRemoteAccess", EmitDefaultValue=false)]
        public bool EnableRemoteAccess { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [enable case sensitive item ids].
        /// </summary>
        /// <value>Gets or sets a value indicating whether [enable case sensitive item ids].</value>
        [DataMember(Name="EnableCaseSensitiveItemIds", EmitDefaultValue=false)]
        public bool EnableCaseSensitiveItemIds { get; set; }

        /// <summary>
        /// Gets or Sets DisableLiveTvChannelUserDataName
        /// </summary>
        [DataMember(Name="DisableLiveTvChannelUserDataName", EmitDefaultValue=false)]
        public bool DisableLiveTvChannelUserDataName { get; set; }

        /// <summary>
        /// Gets or sets the metadata path.
        /// </summary>
        /// <value>Gets or sets the metadata path.</value>
        [DataMember(Name="MetadataPath", EmitDefaultValue=true)]
        public string MetadataPath { get; set; }

        /// <summary>
        /// Gets or Sets MetadataNetworkPath
        /// </summary>
        [DataMember(Name="MetadataNetworkPath", EmitDefaultValue=true)]
        public string MetadataNetworkPath { get; set; }

        /// <summary>
        /// Gets or sets the preferred metadata language.
        /// </summary>
        /// <value>Gets or sets the preferred metadata language.</value>
        [DataMember(Name="PreferredMetadataLanguage", EmitDefaultValue=true)]
        public string PreferredMetadataLanguage { get; set; }

        /// <summary>
        /// Gets or sets the metadata country code.
        /// </summary>
        /// <value>Gets or sets the metadata country code.</value>
        [DataMember(Name="MetadataCountryCode", EmitDefaultValue=true)]
        public string MetadataCountryCode { get; set; }

        /// <summary>
        /// Gets or sets characters to be replaced with a &#39; &#39; in strings to create a sort name.
        /// </summary>
        /// <value>Gets or sets characters to be replaced with a &#39; &#39; in strings to create a sort name.</value>
        [DataMember(Name="SortReplaceCharacters", EmitDefaultValue=true)]
        public List<string> SortReplaceCharacters { get; set; }

        /// <summary>
        /// Gets or sets characters to be removed from strings to create a sort name.
        /// </summary>
        /// <value>Gets or sets characters to be removed from strings to create a sort name.</value>
        [DataMember(Name="SortRemoveCharacters", EmitDefaultValue=true)]
        public List<string> SortRemoveCharacters { get; set; }

        /// <summary>
        /// Gets or sets words to be removed from strings to create a sort name.
        /// </summary>
        /// <value>Gets or sets words to be removed from strings to create a sort name.</value>
        [DataMember(Name="SortRemoveWords", EmitDefaultValue=true)]
        public List<string> SortRemoveWords { get; set; }

        /// <summary>
        /// Gets or sets the minimum percentage of an item that must be played in order for playstate to be updated.
        /// </summary>
        /// <value>Gets or sets the minimum percentage of an item that must be played in order for playstate to be updated.</value>
        [DataMember(Name="MinResumePct", EmitDefaultValue=false)]
        public int MinResumePct { get; set; }

        /// <summary>
        /// Gets or sets the maximum percentage of an item that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.
        /// </summary>
        /// <value>Gets or sets the maximum percentage of an item that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.</value>
        [DataMember(Name="MaxResumePct", EmitDefaultValue=false)]
        public int MaxResumePct { get; set; }

        /// <summary>
        /// Gets or sets the minimum duration that an item must have in order to be eligible for playstate updates..
        /// </summary>
        /// <value>Gets or sets the minimum duration that an item must have in order to be eligible for playstate updates..</value>
        [DataMember(Name="MinResumeDurationSeconds", EmitDefaultValue=false)]
        public int MinResumeDurationSeconds { get; set; }

        /// <summary>
        /// Gets or sets the minimum minutes of a book that must be played in order for playstate to be updated.
        /// </summary>
        /// <value>Gets or sets the minimum minutes of a book that must be played in order for playstate to be updated.</value>
        [DataMember(Name="MinAudiobookResume", EmitDefaultValue=false)]
        public int MinAudiobookResume { get; set; }

        /// <summary>
        /// Gets or sets the remaining minutes of a book that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.
        /// </summary>
        /// <value>Gets or sets the remaining minutes of a book that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.</value>
        [DataMember(Name="MaxAudiobookResume", EmitDefaultValue=false)]
        public int MaxAudiobookResume { get; set; }

        /// <summary>
        /// Gets or sets the delay in seconds that we will wait after a file system change to try and discover what has been added/removed  Some delay is necessary with some items because their creation is not atomic.  It involves the creation of several  different directories and files.
        /// </summary>
        /// <value>Gets or sets the delay in seconds that we will wait after a file system change to try and discover what has been added/removed  Some delay is necessary with some items because their creation is not atomic.  It involves the creation of several  different directories and files.</value>
        [DataMember(Name="LibraryMonitorDelay", EmitDefaultValue=false)]
        public int LibraryMonitorDelay { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [enable dashboard response caching].  Allows potential contributors without visual studio to modify production dashboard code and test changes.
        /// </summary>
        /// <value>Gets or sets a value indicating whether [enable dashboard response caching].  Allows potential contributors without visual studio to modify production dashboard code and test changes.</value>
        [DataMember(Name="EnableDashboardResponseCaching", EmitDefaultValue=false)]
        public bool EnableDashboardResponseCaching { get; set; }


        /// <summary>
        /// Gets or Sets MetadataOptions
        /// </summary>
        [DataMember(Name="MetadataOptions", EmitDefaultValue=true)]
        public List<MetadataOptions> MetadataOptions { get; set; }

        /// <summary>
        /// Gets or Sets SkipDeserializationForBasicTypes
        /// </summary>
        [DataMember(Name="SkipDeserializationForBasicTypes", EmitDefaultValue=false)]
        public bool SkipDeserializationForBasicTypes { get; set; }

        /// <summary>
        /// Gets or Sets ServerName
        /// </summary>
        [DataMember(Name="ServerName", EmitDefaultValue=true)]
        public string ServerName { get; set; }

        /// <summary>
        /// Gets or Sets BaseUrl
        /// </summary>
        [DataMember(Name="BaseUrl", EmitDefaultValue=true)]
        public string BaseUrl { get; set; }

        /// <summary>
        /// Gets or Sets UICulture
        /// </summary>
        [DataMember(Name="UICulture", EmitDefaultValue=true)]
        public string UICulture { get; set; }

        /// <summary>
        /// Gets or Sets SaveMetadataHidden
        /// </summary>
        [DataMember(Name="SaveMetadataHidden", EmitDefaultValue=false)]
        public bool SaveMetadataHidden { get; set; }

        /// <summary>
        /// Gets or Sets ContentTypes
        /// </summary>
        [DataMember(Name="ContentTypes", EmitDefaultValue=true)]
        public List<NameValuePair> ContentTypes { get; set; }

        /// <summary>
        /// Gets or Sets RemoteClientBitrateLimit
        /// </summary>
        [DataMember(Name="RemoteClientBitrateLimit", EmitDefaultValue=false)]
        public int RemoteClientBitrateLimit { get; set; }

        /// <summary>
        /// Gets or Sets EnableFolderView
        /// </summary>
        [DataMember(Name="EnableFolderView", EmitDefaultValue=false)]
        public bool EnableFolderView { get; set; }

        /// <summary>
        /// Gets or Sets EnableGroupingIntoCollections
        /// </summary>
        [DataMember(Name="EnableGroupingIntoCollections", EmitDefaultValue=false)]
        public bool EnableGroupingIntoCollections { get; set; }

        /// <summary>
        /// Gets or Sets DisplaySpecialsWithinSeasons
        /// </summary>
        [DataMember(Name="DisplaySpecialsWithinSeasons", EmitDefaultValue=false)]
        public bool DisplaySpecialsWithinSeasons { get; set; }

        /// <summary>
        /// Gets or sets the subnets that are deemed to make up the LAN.
        /// </summary>
        /// <value>Gets or sets the subnets that are deemed to make up the LAN.</value>
        [DataMember(Name="LocalNetworkSubnets", EmitDefaultValue=true)]
        public List<string> LocalNetworkSubnets { get; set; }

        /// <summary>
        /// Gets or sets the interface addresses which Jellyfin will bind to. If empty, all interfaces will be used.
        /// </summary>
        /// <value>Gets or sets the interface addresses which Jellyfin will bind to. If empty, all interfaces will be used.</value>
        [DataMember(Name="LocalNetworkAddresses", EmitDefaultValue=true)]
        public List<string> LocalNetworkAddresses { get; set; }

        /// <summary>
        /// Gets or Sets CodecsUsed
        /// </summary>
        [DataMember(Name="CodecsUsed", EmitDefaultValue=true)]
        public List<string> CodecsUsed { get; set; }

        /// <summary>
        /// Gets or Sets PluginRepositories
        /// </summary>
        [DataMember(Name="PluginRepositories", EmitDefaultValue=true)]
        public List<RepositoryInfo> PluginRepositories { get; set; }

        /// <summary>
        /// Gets or Sets EnableExternalContentInSuggestions
        /// </summary>
        [DataMember(Name="EnableExternalContentInSuggestions", EmitDefaultValue=false)]
        public bool EnableExternalContentInSuggestions { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the server should force connections over HTTPS.
        /// </summary>
        /// <value>Gets or sets a value indicating whether the server should force connections over HTTPS.</value>
        [DataMember(Name="RequireHttps", EmitDefaultValue=false)]
        public bool RequireHttps { get; set; }

        /// <summary>
        /// Gets or Sets EnableNewOmdbSupport
        /// </summary>
        [DataMember(Name="EnableNewOmdbSupport", EmitDefaultValue=false)]
        public bool EnableNewOmdbSupport { get; set; }

        /// <summary>
        /// Gets or sets the filter for remote IP connectivity. Used in conjuntion with &lt;seealso cref&#x3D;\&quot;P:MediaBrowser.Model.Configuration.ServerConfiguration.IsRemoteIPFilterBlacklist\&quot; /&gt;.
        /// </summary>
        /// <value>Gets or sets the filter for remote IP connectivity. Used in conjuntion with &lt;seealso cref&#x3D;\&quot;P:MediaBrowser.Model.Configuration.ServerConfiguration.IsRemoteIPFilterBlacklist\&quot; /&gt;.</value>
        [DataMember(Name="RemoteIPFilter", EmitDefaultValue=true)]
        public List<string> RemoteIPFilter { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether &lt;seealso cref&#x3D;\&quot;P:MediaBrowser.Model.Configuration.ServerConfiguration.RemoteIPFilter\&quot; /&gt; contains a blacklist or a whitelist. Default is a whitelist.
        /// </summary>
        /// <value>Gets or sets a value indicating whether &lt;seealso cref&#x3D;\&quot;P:MediaBrowser.Model.Configuration.ServerConfiguration.RemoteIPFilter\&quot; /&gt; contains a blacklist or a whitelist. Default is a whitelist.</value>
        [DataMember(Name="IsRemoteIPFilterBlacklist", EmitDefaultValue=false)]
        public bool IsRemoteIPFilterBlacklist { get; set; }

        /// <summary>
        /// Gets or Sets ImageExtractionTimeoutMs
        /// </summary>
        [DataMember(Name="ImageExtractionTimeoutMs", EmitDefaultValue=false)]
        public int ImageExtractionTimeoutMs { get; set; }

        /// <summary>
        /// Gets or Sets PathSubstitutions
        /// </summary>
        [DataMember(Name="PathSubstitutions", EmitDefaultValue=true)]
        public List<PathSubstitution> PathSubstitutions { get; set; }

        /// <summary>
        /// Gets or Sets UninstalledPlugins
        /// </summary>
        [DataMember(Name="UninstalledPlugins", EmitDefaultValue=true)]
        public List<string> UninstalledPlugins { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether slow server responses should be logged as a warning.
        /// </summary>
        /// <value>Gets or sets a value indicating whether slow server responses should be logged as a warning.</value>
        [DataMember(Name="EnableSlowResponseWarning", EmitDefaultValue=false)]
        public bool EnableSlowResponseWarning { get; set; }

        /// <summary>
        /// Gets or sets the threshold for the slow response time warning in ms.
        /// </summary>
        /// <value>Gets or sets the threshold for the slow response time warning in ms.</value>
        [DataMember(Name="SlowResponseThresholdMs", EmitDefaultValue=false)]
        public long SlowResponseThresholdMs { get; set; }

        /// <summary>
        /// Gets or sets the cors hosts.
        /// </summary>
        /// <value>Gets or sets the cors hosts.</value>
        [DataMember(Name="CorsHosts", EmitDefaultValue=true)]
        public List<string> CorsHosts { get; set; }

        /// <summary>
        /// Gets or sets the known proxies.
        /// </summary>
        /// <value>Gets or sets the known proxies.</value>
        [DataMember(Name="KnownProxies", EmitDefaultValue=true)]
        public List<string> KnownProxies { get; set; }

        /// <summary>
        /// Gets or sets the number of days we should retain activity logs.
        /// </summary>
        /// <value>Gets or sets the number of days we should retain activity logs.</value>
        [DataMember(Name="ActivityLogRetentionDays", EmitDefaultValue=true)]
        public int? ActivityLogRetentionDays { get; set; }

        /// <summary>
        /// Gets or sets the how the library scan fans out.
        /// </summary>
        /// <value>Gets or sets the how the library scan fans out.</value>
        [DataMember(Name="LibraryScanFanoutConcurrency", EmitDefaultValue=false)]
        public int LibraryScanFanoutConcurrency { get; set; }

        /// <summary>
        /// Gets or sets the how many metadata refreshes can run concurrently.
        /// </summary>
        /// <value>Gets or sets the how many metadata refreshes can run concurrently.</value>
        [DataMember(Name="LibraryMetadataRefreshConcurrency", EmitDefaultValue=false)]
        public int LibraryMetadataRefreshConcurrency { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether older plugins should automatically be deleted from the plugin folder.
        /// </summary>
        /// <value>Gets or sets a value indicating whether older plugins should automatically be deleted from the plugin folder.</value>
        [DataMember(Name="RemoveOldPlugins", EmitDefaultValue=false)]
        public bool RemoveOldPlugins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServerConfiguration {\n");
            sb.Append("  LogFileRetentionDays: ").Append(LogFileRetentionDays).Append("\n");
            sb.Append("  IsStartupWizardCompleted: ").Append(IsStartupWizardCompleted).Append("\n");
            sb.Append("  CachePath: ").Append(CachePath).Append("\n");
            sb.Append("  PreviousVersion: ").Append(PreviousVersion).Append("\n");
            sb.Append("  PreviousVersionStr: ").Append(PreviousVersionStr).Append("\n");
            sb.Append("  EnableUPnP: ").Append(EnableUPnP).Append("\n");
            sb.Append("  EnableMetrics: ").Append(EnableMetrics).Append("\n");
            sb.Append("  PublicPort: ").Append(PublicPort).Append("\n");
            sb.Append("  UPnPCreateHttpPortMap: ").Append(UPnPCreateHttpPortMap).Append("\n");
            sb.Append("  UDPPortRange: ").Append(UDPPortRange).Append("\n");
            sb.Append("  EnableIPV6: ").Append(EnableIPV6).Append("\n");
            sb.Append("  EnableIPV4: ").Append(EnableIPV4).Append("\n");
            sb.Append("  EnableSSDPTracing: ").Append(EnableSSDPTracing).Append("\n");
            sb.Append("  SSDPTracingFilter: ").Append(SSDPTracingFilter).Append("\n");
            sb.Append("  UDPSendCount: ").Append(UDPSendCount).Append("\n");
            sb.Append("  UDPSendDelay: ").Append(UDPSendDelay).Append("\n");
            sb.Append("  IgnoreVirtualInterfaces: ").Append(IgnoreVirtualInterfaces).Append("\n");
            sb.Append("  VirtualInterfaceNames: ").Append(VirtualInterfaceNames).Append("\n");
            sb.Append("  GatewayMonitorPeriod: ").Append(GatewayMonitorPeriod).Append("\n");
            sb.Append("  EnableMultiSocketBinding: ").Append(EnableMultiSocketBinding).Append("\n");
            sb.Append("  TrustAllIP6Interfaces: ").Append(TrustAllIP6Interfaces).Append("\n");
            sb.Append("  HDHomerunPortRange: ").Append(HDHomerunPortRange).Append("\n");
            sb.Append("  PublishedServerUriBySubnet: ").Append(PublishedServerUriBySubnet).Append("\n");
            sb.Append("  AutoDiscoveryTracing: ").Append(AutoDiscoveryTracing).Append("\n");
            sb.Append("  AutoDiscovery: ").Append(AutoDiscovery).Append("\n");
            sb.Append("  PublicHttpsPort: ").Append(PublicHttpsPort).Append("\n");
            sb.Append("  HttpServerPortNumber: ").Append(HttpServerPortNumber).Append("\n");
            sb.Append("  HttpsPortNumber: ").Append(HttpsPortNumber).Append("\n");
            sb.Append("  EnableHttps: ").Append(EnableHttps).Append("\n");
            sb.Append("  EnableNormalizedItemByNameIds: ").Append(EnableNormalizedItemByNameIds).Append("\n");
            sb.Append("  CertificatePath: ").Append(CertificatePath).Append("\n");
            sb.Append("  CertificatePassword: ").Append(CertificatePassword).Append("\n");
            sb.Append("  IsPortAuthorized: ").Append(IsPortAuthorized).Append("\n");
            sb.Append("  QuickConnectAvailable: ").Append(QuickConnectAvailable).Append("\n");
            sb.Append("  EnableRemoteAccess: ").Append(EnableRemoteAccess).Append("\n");
            sb.Append("  EnableCaseSensitiveItemIds: ").Append(EnableCaseSensitiveItemIds).Append("\n");
            sb.Append("  DisableLiveTvChannelUserDataName: ").Append(DisableLiveTvChannelUserDataName).Append("\n");
            sb.Append("  MetadataPath: ").Append(MetadataPath).Append("\n");
            sb.Append("  MetadataNetworkPath: ").Append(MetadataNetworkPath).Append("\n");
            sb.Append("  PreferredMetadataLanguage: ").Append(PreferredMetadataLanguage).Append("\n");
            sb.Append("  MetadataCountryCode: ").Append(MetadataCountryCode).Append("\n");
            sb.Append("  SortReplaceCharacters: ").Append(SortReplaceCharacters).Append("\n");
            sb.Append("  SortRemoveCharacters: ").Append(SortRemoveCharacters).Append("\n");
            sb.Append("  SortRemoveWords: ").Append(SortRemoveWords).Append("\n");
            sb.Append("  MinResumePct: ").Append(MinResumePct).Append("\n");
            sb.Append("  MaxResumePct: ").Append(MaxResumePct).Append("\n");
            sb.Append("  MinResumeDurationSeconds: ").Append(MinResumeDurationSeconds).Append("\n");
            sb.Append("  MinAudiobookResume: ").Append(MinAudiobookResume).Append("\n");
            sb.Append("  MaxAudiobookResume: ").Append(MaxAudiobookResume).Append("\n");
            sb.Append("  LibraryMonitorDelay: ").Append(LibraryMonitorDelay).Append("\n");
            sb.Append("  EnableDashboardResponseCaching: ").Append(EnableDashboardResponseCaching).Append("\n");
            sb.Append("  ImageSavingConvention: ").Append(ImageSavingConvention).Append("\n");
            sb.Append("  MetadataOptions: ").Append(MetadataOptions).Append("\n");
            sb.Append("  SkipDeserializationForBasicTypes: ").Append(SkipDeserializationForBasicTypes).Append("\n");
            sb.Append("  ServerName: ").Append(ServerName).Append("\n");
            sb.Append("  BaseUrl: ").Append(BaseUrl).Append("\n");
            sb.Append("  UICulture: ").Append(UICulture).Append("\n");
            sb.Append("  SaveMetadataHidden: ").Append(SaveMetadataHidden).Append("\n");
            sb.Append("  ContentTypes: ").Append(ContentTypes).Append("\n");
            sb.Append("  RemoteClientBitrateLimit: ").Append(RemoteClientBitrateLimit).Append("\n");
            sb.Append("  EnableFolderView: ").Append(EnableFolderView).Append("\n");
            sb.Append("  EnableGroupingIntoCollections: ").Append(EnableGroupingIntoCollections).Append("\n");
            sb.Append("  DisplaySpecialsWithinSeasons: ").Append(DisplaySpecialsWithinSeasons).Append("\n");
            sb.Append("  LocalNetworkSubnets: ").Append(LocalNetworkSubnets).Append("\n");
            sb.Append("  LocalNetworkAddresses: ").Append(LocalNetworkAddresses).Append("\n");
            sb.Append("  CodecsUsed: ").Append(CodecsUsed).Append("\n");
            sb.Append("  PluginRepositories: ").Append(PluginRepositories).Append("\n");
            sb.Append("  EnableExternalContentInSuggestions: ").Append(EnableExternalContentInSuggestions).Append("\n");
            sb.Append("  RequireHttps: ").Append(RequireHttps).Append("\n");
            sb.Append("  EnableNewOmdbSupport: ").Append(EnableNewOmdbSupport).Append("\n");
            sb.Append("  RemoteIPFilter: ").Append(RemoteIPFilter).Append("\n");
            sb.Append("  IsRemoteIPFilterBlacklist: ").Append(IsRemoteIPFilterBlacklist).Append("\n");
            sb.Append("  ImageExtractionTimeoutMs: ").Append(ImageExtractionTimeoutMs).Append("\n");
            sb.Append("  PathSubstitutions: ").Append(PathSubstitutions).Append("\n");
            sb.Append("  UninstalledPlugins: ").Append(UninstalledPlugins).Append("\n");
            sb.Append("  EnableSlowResponseWarning: ").Append(EnableSlowResponseWarning).Append("\n");
            sb.Append("  SlowResponseThresholdMs: ").Append(SlowResponseThresholdMs).Append("\n");
            sb.Append("  CorsHosts: ").Append(CorsHosts).Append("\n");
            sb.Append("  KnownProxies: ").Append(KnownProxies).Append("\n");
            sb.Append("  ActivityLogRetentionDays: ").Append(ActivityLogRetentionDays).Append("\n");
            sb.Append("  LibraryScanFanoutConcurrency: ").Append(LibraryScanFanoutConcurrency).Append("\n");
            sb.Append("  LibraryMetadataRefreshConcurrency: ").Append(LibraryMetadataRefreshConcurrency).Append("\n");
            sb.Append("  RemoveOldPlugins: ").Append(RemoveOldPlugins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServerConfiguration);
        }

        /// <summary>
        /// Returns true if ServerConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of ServerConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServerConfiguration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LogFileRetentionDays == input.LogFileRetentionDays ||
                    (this.LogFileRetentionDays != null &&
                    this.LogFileRetentionDays.Equals(input.LogFileRetentionDays))
                ) && 
                (
                    this.IsStartupWizardCompleted == input.IsStartupWizardCompleted ||
                    (this.IsStartupWizardCompleted != null &&
                    this.IsStartupWizardCompleted.Equals(input.IsStartupWizardCompleted))
                ) && 
                (
                    this.CachePath == input.CachePath ||
                    (this.CachePath != null &&
                    this.CachePath.Equals(input.CachePath))
                ) && 
                (
                    this.PreviousVersion == input.PreviousVersion ||
                    (this.PreviousVersion != null &&
                    this.PreviousVersion.Equals(input.PreviousVersion))
                ) && 
                (
                    this.PreviousVersionStr == input.PreviousVersionStr ||
                    (this.PreviousVersionStr != null &&
                    this.PreviousVersionStr.Equals(input.PreviousVersionStr))
                ) && 
                (
                    this.EnableUPnP == input.EnableUPnP ||
                    (this.EnableUPnP != null &&
                    this.EnableUPnP.Equals(input.EnableUPnP))
                ) && 
                (
                    this.EnableMetrics == input.EnableMetrics ||
                    (this.EnableMetrics != null &&
                    this.EnableMetrics.Equals(input.EnableMetrics))
                ) && 
                (
                    this.PublicPort == input.PublicPort ||
                    (this.PublicPort != null &&
                    this.PublicPort.Equals(input.PublicPort))
                ) && 
                (
                    this.UPnPCreateHttpPortMap == input.UPnPCreateHttpPortMap ||
                    (this.UPnPCreateHttpPortMap != null &&
                    this.UPnPCreateHttpPortMap.Equals(input.UPnPCreateHttpPortMap))
                ) && 
                (
                    this.UDPPortRange == input.UDPPortRange ||
                    (this.UDPPortRange != null &&
                    this.UDPPortRange.Equals(input.UDPPortRange))
                ) && 
                (
                    this.EnableIPV6 == input.EnableIPV6 ||
                    (this.EnableIPV6 != null &&
                    this.EnableIPV6.Equals(input.EnableIPV6))
                ) && 
                (
                    this.EnableIPV4 == input.EnableIPV4 ||
                    (this.EnableIPV4 != null &&
                    this.EnableIPV4.Equals(input.EnableIPV4))
                ) && 
                (
                    this.EnableSSDPTracing == input.EnableSSDPTracing ||
                    (this.EnableSSDPTracing != null &&
                    this.EnableSSDPTracing.Equals(input.EnableSSDPTracing))
                ) && 
                (
                    this.SSDPTracingFilter == input.SSDPTracingFilter ||
                    (this.SSDPTracingFilter != null &&
                    this.SSDPTracingFilter.Equals(input.SSDPTracingFilter))
                ) && 
                (
                    this.UDPSendCount == input.UDPSendCount ||
                    (this.UDPSendCount != null &&
                    this.UDPSendCount.Equals(input.UDPSendCount))
                ) && 
                (
                    this.UDPSendDelay == input.UDPSendDelay ||
                    (this.UDPSendDelay != null &&
                    this.UDPSendDelay.Equals(input.UDPSendDelay))
                ) && 
                (
                    this.IgnoreVirtualInterfaces == input.IgnoreVirtualInterfaces ||
                    (this.IgnoreVirtualInterfaces != null &&
                    this.IgnoreVirtualInterfaces.Equals(input.IgnoreVirtualInterfaces))
                ) && 
                (
                    this.VirtualInterfaceNames == input.VirtualInterfaceNames ||
                    (this.VirtualInterfaceNames != null &&
                    this.VirtualInterfaceNames.Equals(input.VirtualInterfaceNames))
                ) && 
                (
                    this.GatewayMonitorPeriod == input.GatewayMonitorPeriod ||
                    (this.GatewayMonitorPeriod != null &&
                    this.GatewayMonitorPeriod.Equals(input.GatewayMonitorPeriod))
                ) && 
                (
                    this.EnableMultiSocketBinding == input.EnableMultiSocketBinding ||
                    (this.EnableMultiSocketBinding != null &&
                    this.EnableMultiSocketBinding.Equals(input.EnableMultiSocketBinding))
                ) && 
                (
                    this.TrustAllIP6Interfaces == input.TrustAllIP6Interfaces ||
                    (this.TrustAllIP6Interfaces != null &&
                    this.TrustAllIP6Interfaces.Equals(input.TrustAllIP6Interfaces))
                ) && 
                (
                    this.HDHomerunPortRange == input.HDHomerunPortRange ||
                    (this.HDHomerunPortRange != null &&
                    this.HDHomerunPortRange.Equals(input.HDHomerunPortRange))
                ) && 
                (
                    this.PublishedServerUriBySubnet == input.PublishedServerUriBySubnet ||
                    this.PublishedServerUriBySubnet != null &&
                    input.PublishedServerUriBySubnet != null &&
                    this.PublishedServerUriBySubnet.SequenceEqual(input.PublishedServerUriBySubnet)
                ) && 
                (
                    this.AutoDiscoveryTracing == input.AutoDiscoveryTracing ||
                    (this.AutoDiscoveryTracing != null &&
                    this.AutoDiscoveryTracing.Equals(input.AutoDiscoveryTracing))
                ) && 
                (
                    this.AutoDiscovery == input.AutoDiscovery ||
                    (this.AutoDiscovery != null &&
                    this.AutoDiscovery.Equals(input.AutoDiscovery))
                ) && 
                (
                    this.PublicHttpsPort == input.PublicHttpsPort ||
                    (this.PublicHttpsPort != null &&
                    this.PublicHttpsPort.Equals(input.PublicHttpsPort))
                ) && 
                (
                    this.HttpServerPortNumber == input.HttpServerPortNumber ||
                    (this.HttpServerPortNumber != null &&
                    this.HttpServerPortNumber.Equals(input.HttpServerPortNumber))
                ) && 
                (
                    this.HttpsPortNumber == input.HttpsPortNumber ||
                    (this.HttpsPortNumber != null &&
                    this.HttpsPortNumber.Equals(input.HttpsPortNumber))
                ) && 
                (
                    this.EnableHttps == input.EnableHttps ||
                    (this.EnableHttps != null &&
                    this.EnableHttps.Equals(input.EnableHttps))
                ) && 
                (
                    this.EnableNormalizedItemByNameIds == input.EnableNormalizedItemByNameIds ||
                    (this.EnableNormalizedItemByNameIds != null &&
                    this.EnableNormalizedItemByNameIds.Equals(input.EnableNormalizedItemByNameIds))
                ) && 
                (
                    this.CertificatePath == input.CertificatePath ||
                    (this.CertificatePath != null &&
                    this.CertificatePath.Equals(input.CertificatePath))
                ) && 
                (
                    this.CertificatePassword == input.CertificatePassword ||
                    (this.CertificatePassword != null &&
                    this.CertificatePassword.Equals(input.CertificatePassword))
                ) && 
                (
                    this.IsPortAuthorized == input.IsPortAuthorized ||
                    (this.IsPortAuthorized != null &&
                    this.IsPortAuthorized.Equals(input.IsPortAuthorized))
                ) && 
                (
                    this.QuickConnectAvailable == input.QuickConnectAvailable ||
                    (this.QuickConnectAvailable != null &&
                    this.QuickConnectAvailable.Equals(input.QuickConnectAvailable))
                ) && 
                (
                    this.EnableRemoteAccess == input.EnableRemoteAccess ||
                    (this.EnableRemoteAccess != null &&
                    this.EnableRemoteAccess.Equals(input.EnableRemoteAccess))
                ) && 
                (
                    this.EnableCaseSensitiveItemIds == input.EnableCaseSensitiveItemIds ||
                    (this.EnableCaseSensitiveItemIds != null &&
                    this.EnableCaseSensitiveItemIds.Equals(input.EnableCaseSensitiveItemIds))
                ) && 
                (
                    this.DisableLiveTvChannelUserDataName == input.DisableLiveTvChannelUserDataName ||
                    (this.DisableLiveTvChannelUserDataName != null &&
                    this.DisableLiveTvChannelUserDataName.Equals(input.DisableLiveTvChannelUserDataName))
                ) && 
                (
                    this.MetadataPath == input.MetadataPath ||
                    (this.MetadataPath != null &&
                    this.MetadataPath.Equals(input.MetadataPath))
                ) && 
                (
                    this.MetadataNetworkPath == input.MetadataNetworkPath ||
                    (this.MetadataNetworkPath != null &&
                    this.MetadataNetworkPath.Equals(input.MetadataNetworkPath))
                ) && 
                (
                    this.PreferredMetadataLanguage == input.PreferredMetadataLanguage ||
                    (this.PreferredMetadataLanguage != null &&
                    this.PreferredMetadataLanguage.Equals(input.PreferredMetadataLanguage))
                ) && 
                (
                    this.MetadataCountryCode == input.MetadataCountryCode ||
                    (this.MetadataCountryCode != null &&
                    this.MetadataCountryCode.Equals(input.MetadataCountryCode))
                ) && 
                (
                    this.SortReplaceCharacters == input.SortReplaceCharacters ||
                    this.SortReplaceCharacters != null &&
                    input.SortReplaceCharacters != null &&
                    this.SortReplaceCharacters.SequenceEqual(input.SortReplaceCharacters)
                ) && 
                (
                    this.SortRemoveCharacters == input.SortRemoveCharacters ||
                    this.SortRemoveCharacters != null &&
                    input.SortRemoveCharacters != null &&
                    this.SortRemoveCharacters.SequenceEqual(input.SortRemoveCharacters)
                ) && 
                (
                    this.SortRemoveWords == input.SortRemoveWords ||
                    this.SortRemoveWords != null &&
                    input.SortRemoveWords != null &&
                    this.SortRemoveWords.SequenceEqual(input.SortRemoveWords)
                ) && 
                (
                    this.MinResumePct == input.MinResumePct ||
                    (this.MinResumePct != null &&
                    this.MinResumePct.Equals(input.MinResumePct))
                ) && 
                (
                    this.MaxResumePct == input.MaxResumePct ||
                    (this.MaxResumePct != null &&
                    this.MaxResumePct.Equals(input.MaxResumePct))
                ) && 
                (
                    this.MinResumeDurationSeconds == input.MinResumeDurationSeconds ||
                    (this.MinResumeDurationSeconds != null &&
                    this.MinResumeDurationSeconds.Equals(input.MinResumeDurationSeconds))
                ) && 
                (
                    this.MinAudiobookResume == input.MinAudiobookResume ||
                    (this.MinAudiobookResume != null &&
                    this.MinAudiobookResume.Equals(input.MinAudiobookResume))
                ) && 
                (
                    this.MaxAudiobookResume == input.MaxAudiobookResume ||
                    (this.MaxAudiobookResume != null &&
                    this.MaxAudiobookResume.Equals(input.MaxAudiobookResume))
                ) && 
                (
                    this.LibraryMonitorDelay == input.LibraryMonitorDelay ||
                    (this.LibraryMonitorDelay != null &&
                    this.LibraryMonitorDelay.Equals(input.LibraryMonitorDelay))
                ) && 
                (
                    this.EnableDashboardResponseCaching == input.EnableDashboardResponseCaching ||
                    (this.EnableDashboardResponseCaching != null &&
                    this.EnableDashboardResponseCaching.Equals(input.EnableDashboardResponseCaching))
                ) && 
                (
                    this.ImageSavingConvention == input.ImageSavingConvention ||
                    (this.ImageSavingConvention != null &&
                    this.ImageSavingConvention.Equals(input.ImageSavingConvention))
                ) && 
                (
                    this.MetadataOptions == input.MetadataOptions ||
                    this.MetadataOptions != null &&
                    input.MetadataOptions != null &&
                    this.MetadataOptions.SequenceEqual(input.MetadataOptions)
                ) && 
                (
                    this.SkipDeserializationForBasicTypes == input.SkipDeserializationForBasicTypes ||
                    (this.SkipDeserializationForBasicTypes != null &&
                    this.SkipDeserializationForBasicTypes.Equals(input.SkipDeserializationForBasicTypes))
                ) && 
                (
                    this.ServerName == input.ServerName ||
                    (this.ServerName != null &&
                    this.ServerName.Equals(input.ServerName))
                ) && 
                (
                    this.BaseUrl == input.BaseUrl ||
                    (this.BaseUrl != null &&
                    this.BaseUrl.Equals(input.BaseUrl))
                ) && 
                (
                    this.UICulture == input.UICulture ||
                    (this.UICulture != null &&
                    this.UICulture.Equals(input.UICulture))
                ) && 
                (
                    this.SaveMetadataHidden == input.SaveMetadataHidden ||
                    (this.SaveMetadataHidden != null &&
                    this.SaveMetadataHidden.Equals(input.SaveMetadataHidden))
                ) && 
                (
                    this.ContentTypes == input.ContentTypes ||
                    this.ContentTypes != null &&
                    input.ContentTypes != null &&
                    this.ContentTypes.SequenceEqual(input.ContentTypes)
                ) && 
                (
                    this.RemoteClientBitrateLimit == input.RemoteClientBitrateLimit ||
                    (this.RemoteClientBitrateLimit != null &&
                    this.RemoteClientBitrateLimit.Equals(input.RemoteClientBitrateLimit))
                ) && 
                (
                    this.EnableFolderView == input.EnableFolderView ||
                    (this.EnableFolderView != null &&
                    this.EnableFolderView.Equals(input.EnableFolderView))
                ) && 
                (
                    this.EnableGroupingIntoCollections == input.EnableGroupingIntoCollections ||
                    (this.EnableGroupingIntoCollections != null &&
                    this.EnableGroupingIntoCollections.Equals(input.EnableGroupingIntoCollections))
                ) && 
                (
                    this.DisplaySpecialsWithinSeasons == input.DisplaySpecialsWithinSeasons ||
                    (this.DisplaySpecialsWithinSeasons != null &&
                    this.DisplaySpecialsWithinSeasons.Equals(input.DisplaySpecialsWithinSeasons))
                ) && 
                (
                    this.LocalNetworkSubnets == input.LocalNetworkSubnets ||
                    this.LocalNetworkSubnets != null &&
                    input.LocalNetworkSubnets != null &&
                    this.LocalNetworkSubnets.SequenceEqual(input.LocalNetworkSubnets)
                ) && 
                (
                    this.LocalNetworkAddresses == input.LocalNetworkAddresses ||
                    this.LocalNetworkAddresses != null &&
                    input.LocalNetworkAddresses != null &&
                    this.LocalNetworkAddresses.SequenceEqual(input.LocalNetworkAddresses)
                ) && 
                (
                    this.CodecsUsed == input.CodecsUsed ||
                    this.CodecsUsed != null &&
                    input.CodecsUsed != null &&
                    this.CodecsUsed.SequenceEqual(input.CodecsUsed)
                ) && 
                (
                    this.PluginRepositories == input.PluginRepositories ||
                    this.PluginRepositories != null &&
                    input.PluginRepositories != null &&
                    this.PluginRepositories.SequenceEqual(input.PluginRepositories)
                ) && 
                (
                    this.EnableExternalContentInSuggestions == input.EnableExternalContentInSuggestions ||
                    (this.EnableExternalContentInSuggestions != null &&
                    this.EnableExternalContentInSuggestions.Equals(input.EnableExternalContentInSuggestions))
                ) && 
                (
                    this.RequireHttps == input.RequireHttps ||
                    (this.RequireHttps != null &&
                    this.RequireHttps.Equals(input.RequireHttps))
                ) && 
                (
                    this.EnableNewOmdbSupport == input.EnableNewOmdbSupport ||
                    (this.EnableNewOmdbSupport != null &&
                    this.EnableNewOmdbSupport.Equals(input.EnableNewOmdbSupport))
                ) && 
                (
                    this.RemoteIPFilter == input.RemoteIPFilter ||
                    this.RemoteIPFilter != null &&
                    input.RemoteIPFilter != null &&
                    this.RemoteIPFilter.SequenceEqual(input.RemoteIPFilter)
                ) && 
                (
                    this.IsRemoteIPFilterBlacklist == input.IsRemoteIPFilterBlacklist ||
                    (this.IsRemoteIPFilterBlacklist != null &&
                    this.IsRemoteIPFilterBlacklist.Equals(input.IsRemoteIPFilterBlacklist))
                ) && 
                (
                    this.ImageExtractionTimeoutMs == input.ImageExtractionTimeoutMs ||
                    (this.ImageExtractionTimeoutMs != null &&
                    this.ImageExtractionTimeoutMs.Equals(input.ImageExtractionTimeoutMs))
                ) && 
                (
                    this.PathSubstitutions == input.PathSubstitutions ||
                    this.PathSubstitutions != null &&
                    input.PathSubstitutions != null &&
                    this.PathSubstitutions.SequenceEqual(input.PathSubstitutions)
                ) && 
                (
                    this.UninstalledPlugins == input.UninstalledPlugins ||
                    this.UninstalledPlugins != null &&
                    input.UninstalledPlugins != null &&
                    this.UninstalledPlugins.SequenceEqual(input.UninstalledPlugins)
                ) && 
                (
                    this.EnableSlowResponseWarning == input.EnableSlowResponseWarning ||
                    (this.EnableSlowResponseWarning != null &&
                    this.EnableSlowResponseWarning.Equals(input.EnableSlowResponseWarning))
                ) && 
                (
                    this.SlowResponseThresholdMs == input.SlowResponseThresholdMs ||
                    (this.SlowResponseThresholdMs != null &&
                    this.SlowResponseThresholdMs.Equals(input.SlowResponseThresholdMs))
                ) && 
                (
                    this.CorsHosts == input.CorsHosts ||
                    this.CorsHosts != null &&
                    input.CorsHosts != null &&
                    this.CorsHosts.SequenceEqual(input.CorsHosts)
                ) && 
                (
                    this.KnownProxies == input.KnownProxies ||
                    this.KnownProxies != null &&
                    input.KnownProxies != null &&
                    this.KnownProxies.SequenceEqual(input.KnownProxies)
                ) && 
                (
                    this.ActivityLogRetentionDays == input.ActivityLogRetentionDays ||
                    (this.ActivityLogRetentionDays != null &&
                    this.ActivityLogRetentionDays.Equals(input.ActivityLogRetentionDays))
                ) && 
                (
                    this.LibraryScanFanoutConcurrency == input.LibraryScanFanoutConcurrency ||
                    (this.LibraryScanFanoutConcurrency != null &&
                    this.LibraryScanFanoutConcurrency.Equals(input.LibraryScanFanoutConcurrency))
                ) && 
                (
                    this.LibraryMetadataRefreshConcurrency == input.LibraryMetadataRefreshConcurrency ||
                    (this.LibraryMetadataRefreshConcurrency != null &&
                    this.LibraryMetadataRefreshConcurrency.Equals(input.LibraryMetadataRefreshConcurrency))
                ) && 
                (
                    this.RemoveOldPlugins == input.RemoveOldPlugins ||
                    (this.RemoveOldPlugins != null &&
                    this.RemoveOldPlugins.Equals(input.RemoveOldPlugins))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LogFileRetentionDays != null)
                    hashCode = hashCode * 59 + this.LogFileRetentionDays.GetHashCode();
                if (this.IsStartupWizardCompleted != null)
                    hashCode = hashCode * 59 + this.IsStartupWizardCompleted.GetHashCode();
                if (this.CachePath != null)
                    hashCode = hashCode * 59 + this.CachePath.GetHashCode();
                if (this.PreviousVersion != null)
                    hashCode = hashCode * 59 + this.PreviousVersion.GetHashCode();
                if (this.PreviousVersionStr != null)
                    hashCode = hashCode * 59 + this.PreviousVersionStr.GetHashCode();
                if (this.EnableUPnP != null)
                    hashCode = hashCode * 59 + this.EnableUPnP.GetHashCode();
                if (this.EnableMetrics != null)
                    hashCode = hashCode * 59 + this.EnableMetrics.GetHashCode();
                if (this.PublicPort != null)
                    hashCode = hashCode * 59 + this.PublicPort.GetHashCode();
                if (this.UPnPCreateHttpPortMap != null)
                    hashCode = hashCode * 59 + this.UPnPCreateHttpPortMap.GetHashCode();
                if (this.UDPPortRange != null)
                    hashCode = hashCode * 59 + this.UDPPortRange.GetHashCode();
                if (this.EnableIPV6 != null)
                    hashCode = hashCode * 59 + this.EnableIPV6.GetHashCode();
                if (this.EnableIPV4 != null)
                    hashCode = hashCode * 59 + this.EnableIPV4.GetHashCode();
                if (this.EnableSSDPTracing != null)
                    hashCode = hashCode * 59 + this.EnableSSDPTracing.GetHashCode();
                if (this.SSDPTracingFilter != null)
                    hashCode = hashCode * 59 + this.SSDPTracingFilter.GetHashCode();
                if (this.UDPSendCount != null)
                    hashCode = hashCode * 59 + this.UDPSendCount.GetHashCode();
                if (this.UDPSendDelay != null)
                    hashCode = hashCode * 59 + this.UDPSendDelay.GetHashCode();
                if (this.IgnoreVirtualInterfaces != null)
                    hashCode = hashCode * 59 + this.IgnoreVirtualInterfaces.GetHashCode();
                if (this.VirtualInterfaceNames != null)
                    hashCode = hashCode * 59 + this.VirtualInterfaceNames.GetHashCode();
                if (this.GatewayMonitorPeriod != null)
                    hashCode = hashCode * 59 + this.GatewayMonitorPeriod.GetHashCode();
                if (this.EnableMultiSocketBinding != null)
                    hashCode = hashCode * 59 + this.EnableMultiSocketBinding.GetHashCode();
                if (this.TrustAllIP6Interfaces != null)
                    hashCode = hashCode * 59 + this.TrustAllIP6Interfaces.GetHashCode();
                if (this.HDHomerunPortRange != null)
                    hashCode = hashCode * 59 + this.HDHomerunPortRange.GetHashCode();
                if (this.PublishedServerUriBySubnet != null)
                    hashCode = hashCode * 59 + this.PublishedServerUriBySubnet.GetHashCode();
                if (this.AutoDiscoveryTracing != null)
                    hashCode = hashCode * 59 + this.AutoDiscoveryTracing.GetHashCode();
                if (this.AutoDiscovery != null)
                    hashCode = hashCode * 59 + this.AutoDiscovery.GetHashCode();
                if (this.PublicHttpsPort != null)
                    hashCode = hashCode * 59 + this.PublicHttpsPort.GetHashCode();
                if (this.HttpServerPortNumber != null)
                    hashCode = hashCode * 59 + this.HttpServerPortNumber.GetHashCode();
                if (this.HttpsPortNumber != null)
                    hashCode = hashCode * 59 + this.HttpsPortNumber.GetHashCode();
                if (this.EnableHttps != null)
                    hashCode = hashCode * 59 + this.EnableHttps.GetHashCode();
                if (this.EnableNormalizedItemByNameIds != null)
                    hashCode = hashCode * 59 + this.EnableNormalizedItemByNameIds.GetHashCode();
                if (this.CertificatePath != null)
                    hashCode = hashCode * 59 + this.CertificatePath.GetHashCode();
                if (this.CertificatePassword != null)
                    hashCode = hashCode * 59 + this.CertificatePassword.GetHashCode();
                if (this.IsPortAuthorized != null)
                    hashCode = hashCode * 59 + this.IsPortAuthorized.GetHashCode();
                if (this.QuickConnectAvailable != null)
                    hashCode = hashCode * 59 + this.QuickConnectAvailable.GetHashCode();
                if (this.EnableRemoteAccess != null)
                    hashCode = hashCode * 59 + this.EnableRemoteAccess.GetHashCode();
                if (this.EnableCaseSensitiveItemIds != null)
                    hashCode = hashCode * 59 + this.EnableCaseSensitiveItemIds.GetHashCode();
                if (this.DisableLiveTvChannelUserDataName != null)
                    hashCode = hashCode * 59 + this.DisableLiveTvChannelUserDataName.GetHashCode();
                if (this.MetadataPath != null)
                    hashCode = hashCode * 59 + this.MetadataPath.GetHashCode();
                if (this.MetadataNetworkPath != null)
                    hashCode = hashCode * 59 + this.MetadataNetworkPath.GetHashCode();
                if (this.PreferredMetadataLanguage != null)
                    hashCode = hashCode * 59 + this.PreferredMetadataLanguage.GetHashCode();
                if (this.MetadataCountryCode != null)
                    hashCode = hashCode * 59 + this.MetadataCountryCode.GetHashCode();
                if (this.SortReplaceCharacters != null)
                    hashCode = hashCode * 59 + this.SortReplaceCharacters.GetHashCode();
                if (this.SortRemoveCharacters != null)
                    hashCode = hashCode * 59 + this.SortRemoveCharacters.GetHashCode();
                if (this.SortRemoveWords != null)
                    hashCode = hashCode * 59 + this.SortRemoveWords.GetHashCode();
                if (this.MinResumePct != null)
                    hashCode = hashCode * 59 + this.MinResumePct.GetHashCode();
                if (this.MaxResumePct != null)
                    hashCode = hashCode * 59 + this.MaxResumePct.GetHashCode();
                if (this.MinResumeDurationSeconds != null)
                    hashCode = hashCode * 59 + this.MinResumeDurationSeconds.GetHashCode();
                if (this.MinAudiobookResume != null)
                    hashCode = hashCode * 59 + this.MinAudiobookResume.GetHashCode();
                if (this.MaxAudiobookResume != null)
                    hashCode = hashCode * 59 + this.MaxAudiobookResume.GetHashCode();
                if (this.LibraryMonitorDelay != null)
                    hashCode = hashCode * 59 + this.LibraryMonitorDelay.GetHashCode();
                if (this.EnableDashboardResponseCaching != null)
                    hashCode = hashCode * 59 + this.EnableDashboardResponseCaching.GetHashCode();
                if (this.ImageSavingConvention != null)
                    hashCode = hashCode * 59 + this.ImageSavingConvention.GetHashCode();
                if (this.MetadataOptions != null)
                    hashCode = hashCode * 59 + this.MetadataOptions.GetHashCode();
                if (this.SkipDeserializationForBasicTypes != null)
                    hashCode = hashCode * 59 + this.SkipDeserializationForBasicTypes.GetHashCode();
                if (this.ServerName != null)
                    hashCode = hashCode * 59 + this.ServerName.GetHashCode();
                if (this.BaseUrl != null)
                    hashCode = hashCode * 59 + this.BaseUrl.GetHashCode();
                if (this.UICulture != null)
                    hashCode = hashCode * 59 + this.UICulture.GetHashCode();
                if (this.SaveMetadataHidden != null)
                    hashCode = hashCode * 59 + this.SaveMetadataHidden.GetHashCode();
                if (this.ContentTypes != null)
                    hashCode = hashCode * 59 + this.ContentTypes.GetHashCode();
                if (this.RemoteClientBitrateLimit != null)
                    hashCode = hashCode * 59 + this.RemoteClientBitrateLimit.GetHashCode();
                if (this.EnableFolderView != null)
                    hashCode = hashCode * 59 + this.EnableFolderView.GetHashCode();
                if (this.EnableGroupingIntoCollections != null)
                    hashCode = hashCode * 59 + this.EnableGroupingIntoCollections.GetHashCode();
                if (this.DisplaySpecialsWithinSeasons != null)
                    hashCode = hashCode * 59 + this.DisplaySpecialsWithinSeasons.GetHashCode();
                if (this.LocalNetworkSubnets != null)
                    hashCode = hashCode * 59 + this.LocalNetworkSubnets.GetHashCode();
                if (this.LocalNetworkAddresses != null)
                    hashCode = hashCode * 59 + this.LocalNetworkAddresses.GetHashCode();
                if (this.CodecsUsed != null)
                    hashCode = hashCode * 59 + this.CodecsUsed.GetHashCode();
                if (this.PluginRepositories != null)
                    hashCode = hashCode * 59 + this.PluginRepositories.GetHashCode();
                if (this.EnableExternalContentInSuggestions != null)
                    hashCode = hashCode * 59 + this.EnableExternalContentInSuggestions.GetHashCode();
                if (this.RequireHttps != null)
                    hashCode = hashCode * 59 + this.RequireHttps.GetHashCode();
                if (this.EnableNewOmdbSupport != null)
                    hashCode = hashCode * 59 + this.EnableNewOmdbSupport.GetHashCode();
                if (this.RemoteIPFilter != null)
                    hashCode = hashCode * 59 + this.RemoteIPFilter.GetHashCode();
                if (this.IsRemoteIPFilterBlacklist != null)
                    hashCode = hashCode * 59 + this.IsRemoteIPFilterBlacklist.GetHashCode();
                if (this.ImageExtractionTimeoutMs != null)
                    hashCode = hashCode * 59 + this.ImageExtractionTimeoutMs.GetHashCode();
                if (this.PathSubstitutions != null)
                    hashCode = hashCode * 59 + this.PathSubstitutions.GetHashCode();
                if (this.UninstalledPlugins != null)
                    hashCode = hashCode * 59 + this.UninstalledPlugins.GetHashCode();
                if (this.EnableSlowResponseWarning != null)
                    hashCode = hashCode * 59 + this.EnableSlowResponseWarning.GetHashCode();
                if (this.SlowResponseThresholdMs != null)
                    hashCode = hashCode * 59 + this.SlowResponseThresholdMs.GetHashCode();
                if (this.CorsHosts != null)
                    hashCode = hashCode * 59 + this.CorsHosts.GetHashCode();
                if (this.KnownProxies != null)
                    hashCode = hashCode * 59 + this.KnownProxies.GetHashCode();
                if (this.ActivityLogRetentionDays != null)
                    hashCode = hashCode * 59 + this.ActivityLogRetentionDays.GetHashCode();
                if (this.LibraryScanFanoutConcurrency != null)
                    hashCode = hashCode * 59 + this.LibraryScanFanoutConcurrency.GetHashCode();
                if (this.LibraryMetadataRefreshConcurrency != null)
                    hashCode = hashCode * 59 + this.LibraryMetadataRefreshConcurrency.GetHashCode();
                if (this.RemoveOldPlugins != null)
                    hashCode = hashCode * 59 + this.RemoveOldPlugins.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
