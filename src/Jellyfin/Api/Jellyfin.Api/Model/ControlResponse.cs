/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// ControlResponse
    /// </summary>
    [DataContract]
    public partial class ControlResponse :  IEquatable<ControlResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ControlResponse" /> class.
        /// </summary>
        /// <param name="xml">xml.</param>
        /// <param name="isSuccessful">isSuccessful.</param>
        public ControlResponse(string xml = default(string), bool isSuccessful = default(bool))
        {
            this.Xml = xml;
            this.Xml = xml;
            this.IsSuccessful = isSuccessful;
        }

        /// <summary>
        /// Gets or Sets Headers
        /// </summary>
        [DataMember(Name="Headers", EmitDefaultValue=true)]
        public Dictionary<string, string> Headers { get; private set; }

        /// <summary>
        /// Gets or Sets Xml
        /// </summary>
        [DataMember(Name="Xml", EmitDefaultValue=true)]
        public string Xml { get; set; }

        /// <summary>
        /// Gets or Sets IsSuccessful
        /// </summary>
        [DataMember(Name="IsSuccessful", EmitDefaultValue=false)]
        public bool IsSuccessful { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ControlResponse {\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  Xml: ").Append(Xml).Append("\n");
            sb.Append("  IsSuccessful: ").Append(IsSuccessful).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ControlResponse);
        }

        /// <summary>
        /// Returns true if ControlResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ControlResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ControlResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Headers == input.Headers ||
                    this.Headers != null &&
                    input.Headers != null &&
                    this.Headers.SequenceEqual(input.Headers)
                ) && 
                (
                    this.Xml == input.Xml ||
                    (this.Xml != null &&
                    this.Xml.Equals(input.Xml))
                ) && 
                (
                    this.IsSuccessful == input.IsSuccessful ||
                    (this.IsSuccessful != null &&
                    this.IsSuccessful.Equals(input.IsSuccessful))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Headers != null)
                    hashCode = hashCode * 59 + this.Headers.GetHashCode();
                if (this.Xml != null)
                    hashCode = hashCode * 59 + this.Xml.GetHashCode();
                if (this.IsSuccessful != null)
                    hashCode = hashCode * 59 + this.IsSuccessful.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
