/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// TranscodingInfo
    /// </summary>
    [DataContract]
    public partial class TranscodingInfo :  IEquatable<TranscodingInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TranscodingInfo" /> class.
        /// </summary>
        /// <param name="audioCodec">audioCodec.</param>
        /// <param name="videoCodec">videoCodec.</param>
        /// <param name="container">container.</param>
        /// <param name="isVideoDirect">isVideoDirect.</param>
        /// <param name="isAudioDirect">isAudioDirect.</param>
        /// <param name="bitrate">bitrate.</param>
        /// <param name="framerate">framerate.</param>
        /// <param name="completionPercentage">completionPercentage.</param>
        /// <param name="width">width.</param>
        /// <param name="height">height.</param>
        /// <param name="audioChannels">audioChannels.</param>
        /// <param name="transcodeReasons">transcodeReasons.</param>
        public TranscodingInfo(string audioCodec = default(string), string videoCodec = default(string), string container = default(string), bool isVideoDirect = default(bool), bool isAudioDirect = default(bool), int? bitrate = default(int?), float? framerate = default(float?), double? completionPercentage = default(double?), int? width = default(int?), int? height = default(int?), int? audioChannels = default(int?), List<TranscodeReason> transcodeReasons = default(List<TranscodeReason>))
        {
            this.AudioCodec = audioCodec;
            this.VideoCodec = videoCodec;
            this.Container = container;
            this.Bitrate = bitrate;
            this.Framerate = framerate;
            this.CompletionPercentage = completionPercentage;
            this.Width = width;
            this.Height = height;
            this.AudioChannels = audioChannels;
            this.TranscodeReasons = transcodeReasons;
            this.AudioCodec = audioCodec;
            this.VideoCodec = videoCodec;
            this.Container = container;
            this.IsVideoDirect = isVideoDirect;
            this.IsAudioDirect = isAudioDirect;
            this.Bitrate = bitrate;
            this.Framerate = framerate;
            this.CompletionPercentage = completionPercentage;
            this.Width = width;
            this.Height = height;
            this.AudioChannels = audioChannels;
            this.TranscodeReasons = transcodeReasons;
        }

        /// <summary>
        /// Gets or Sets AudioCodec
        /// </summary>
        [DataMember(Name="AudioCodec", EmitDefaultValue=true)]
        public string AudioCodec { get; set; }

        /// <summary>
        /// Gets or Sets VideoCodec
        /// </summary>
        [DataMember(Name="VideoCodec", EmitDefaultValue=true)]
        public string VideoCodec { get; set; }

        /// <summary>
        /// Gets or Sets Container
        /// </summary>
        [DataMember(Name="Container", EmitDefaultValue=true)]
        public string Container { get; set; }

        /// <summary>
        /// Gets or Sets IsVideoDirect
        /// </summary>
        [DataMember(Name="IsVideoDirect", EmitDefaultValue=false)]
        public bool IsVideoDirect { get; set; }

        /// <summary>
        /// Gets or Sets IsAudioDirect
        /// </summary>
        [DataMember(Name="IsAudioDirect", EmitDefaultValue=false)]
        public bool IsAudioDirect { get; set; }

        /// <summary>
        /// Gets or Sets Bitrate
        /// </summary>
        [DataMember(Name="Bitrate", EmitDefaultValue=true)]
        public int? Bitrate { get; set; }

        /// <summary>
        /// Gets or Sets Framerate
        /// </summary>
        [DataMember(Name="Framerate", EmitDefaultValue=true)]
        public float? Framerate { get; set; }

        /// <summary>
        /// Gets or Sets CompletionPercentage
        /// </summary>
        [DataMember(Name="CompletionPercentage", EmitDefaultValue=true)]
        public double? CompletionPercentage { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name="Width", EmitDefaultValue=true)]
        public int? Width { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="Height", EmitDefaultValue=true)]
        public int? Height { get; set; }

        /// <summary>
        /// Gets or Sets AudioChannels
        /// </summary>
        [DataMember(Name="AudioChannels", EmitDefaultValue=true)]
        public int? AudioChannels { get; set; }

        /// <summary>
        /// Gets or Sets TranscodeReasons
        /// </summary>
        [DataMember(Name="TranscodeReasons", EmitDefaultValue=true)]
        public List<TranscodeReason> TranscodeReasons { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TranscodingInfo {\n");
            sb.Append("  AudioCodec: ").Append(AudioCodec).Append("\n");
            sb.Append("  VideoCodec: ").Append(VideoCodec).Append("\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  IsVideoDirect: ").Append(IsVideoDirect).Append("\n");
            sb.Append("  IsAudioDirect: ").Append(IsAudioDirect).Append("\n");
            sb.Append("  Bitrate: ").Append(Bitrate).Append("\n");
            sb.Append("  Framerate: ").Append(Framerate).Append("\n");
            sb.Append("  CompletionPercentage: ").Append(CompletionPercentage).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  AudioChannels: ").Append(AudioChannels).Append("\n");
            sb.Append("  TranscodeReasons: ").Append(TranscodeReasons).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TranscodingInfo);
        }

        /// <summary>
        /// Returns true if TranscodingInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of TranscodingInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TranscodingInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AudioCodec == input.AudioCodec ||
                    (this.AudioCodec != null &&
                    this.AudioCodec.Equals(input.AudioCodec))
                ) && 
                (
                    this.VideoCodec == input.VideoCodec ||
                    (this.VideoCodec != null &&
                    this.VideoCodec.Equals(input.VideoCodec))
                ) && 
                (
                    this.Container == input.Container ||
                    (this.Container != null &&
                    this.Container.Equals(input.Container))
                ) && 
                (
                    this.IsVideoDirect == input.IsVideoDirect ||
                    (this.IsVideoDirect != null &&
                    this.IsVideoDirect.Equals(input.IsVideoDirect))
                ) && 
                (
                    this.IsAudioDirect == input.IsAudioDirect ||
                    (this.IsAudioDirect != null &&
                    this.IsAudioDirect.Equals(input.IsAudioDirect))
                ) && 
                (
                    this.Bitrate == input.Bitrate ||
                    (this.Bitrate != null &&
                    this.Bitrate.Equals(input.Bitrate))
                ) && 
                (
                    this.Framerate == input.Framerate ||
                    (this.Framerate != null &&
                    this.Framerate.Equals(input.Framerate))
                ) && 
                (
                    this.CompletionPercentage == input.CompletionPercentage ||
                    (this.CompletionPercentage != null &&
                    this.CompletionPercentage.Equals(input.CompletionPercentage))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.AudioChannels == input.AudioChannels ||
                    (this.AudioChannels != null &&
                    this.AudioChannels.Equals(input.AudioChannels))
                ) && 
                (
                    this.TranscodeReasons == input.TranscodeReasons ||
                    this.TranscodeReasons != null &&
                    input.TranscodeReasons != null &&
                    this.TranscodeReasons.SequenceEqual(input.TranscodeReasons)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AudioCodec != null)
                    hashCode = hashCode * 59 + this.AudioCodec.GetHashCode();
                if (this.VideoCodec != null)
                    hashCode = hashCode * 59 + this.VideoCodec.GetHashCode();
                if (this.Container != null)
                    hashCode = hashCode * 59 + this.Container.GetHashCode();
                if (this.IsVideoDirect != null)
                    hashCode = hashCode * 59 + this.IsVideoDirect.GetHashCode();
                if (this.IsAudioDirect != null)
                    hashCode = hashCode * 59 + this.IsAudioDirect.GetHashCode();
                if (this.Bitrate != null)
                    hashCode = hashCode * 59 + this.Bitrate.GetHashCode();
                if (this.Framerate != null)
                    hashCode = hashCode * 59 + this.Framerate.GetHashCode();
                if (this.CompletionPercentage != null)
                    hashCode = hashCode * 59 + this.CompletionPercentage.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.AudioChannels != null)
                    hashCode = hashCode * 59 + this.AudioChannels.GetHashCode();
                if (this.TranscodeReasons != null)
                    hashCode = hashCode * 59 + this.TranscodeReasons.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
