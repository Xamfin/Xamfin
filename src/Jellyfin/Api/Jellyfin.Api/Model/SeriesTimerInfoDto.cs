/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Class SeriesTimerInfoDto.
    /// </summary>
    [DataContract]
    public partial class SeriesTimerInfoDto :  IEquatable<SeriesTimerInfoDto>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets KeepUntil
        /// </summary>
        [DataMember(Name="KeepUntil", EmitDefaultValue=false)]
        public KeepUntil? KeepUntil { get; set; }
        /// <summary>
        /// Gets or sets the day pattern.
        /// </summary>
        /// <value>Gets or sets the day pattern.</value>
        [DataMember(Name="DayPattern", EmitDefaultValue=true)]
        public DayPattern? DayPattern { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SeriesTimerInfoDto" /> class.
        /// </summary>
        /// <param name="id">Id of the recording..</param>
        /// <param name="type">type.</param>
        /// <param name="serverId">Gets or sets the server identifier..</param>
        /// <param name="externalId">Gets or sets the external identifier..</param>
        /// <param name="channelId">ChannelId of the recording..</param>
        /// <param name="externalChannelId">Gets or sets the external channel identifier..</param>
        /// <param name="channelName">ChannelName of the recording..</param>
        /// <param name="channelPrimaryImageTag">channelPrimaryImageTag.</param>
        /// <param name="programId">Gets or sets the program identifier..</param>
        /// <param name="externalProgramId">Gets or sets the external program identifier..</param>
        /// <param name="name">Name of the recording..</param>
        /// <param name="overview">Description of the recording..</param>
        /// <param name="startDate">The start date of the recording, in UTC..</param>
        /// <param name="endDate">The end date of the recording, in UTC..</param>
        /// <param name="serviceName">Gets or sets the name of the service..</param>
        /// <param name="priority">Gets or sets the priority..</param>
        /// <param name="prePaddingSeconds">Gets or sets the pre padding seconds..</param>
        /// <param name="postPaddingSeconds">Gets or sets the post padding seconds..</param>
        /// <param name="isPrePaddingRequired">Gets or sets a value indicating whether this instance is pre padding required..</param>
        /// <param name="parentBackdropItemId">If the item does not have any backdrops, this will hold the Id of the Parent that has one..</param>
        /// <param name="parentBackdropImageTags">Gets or sets the parent backdrop image tags..</param>
        /// <param name="isPostPaddingRequired">Gets or sets a value indicating whether this instance is post padding required..</param>
        /// <param name="keepUntil">keepUntil.</param>
        /// <param name="recordAnyTime">Gets or sets a value indicating whether [record any time]..</param>
        /// <param name="skipEpisodesInLibrary">skipEpisodesInLibrary.</param>
        /// <param name="recordAnyChannel">Gets or sets a value indicating whether [record any channel]..</param>
        /// <param name="keepUpTo">keepUpTo.</param>
        /// <param name="recordNewOnly">Gets or sets a value indicating whether [record new only]..</param>
        /// <param name="days">Gets or sets the days..</param>
        /// <param name="dayPattern">Gets or sets the day pattern..</param>
        /// <param name="imageTags">Gets or sets the image tags..</param>
        /// <param name="parentThumbItemId">Gets or sets the parent thumb item id..</param>
        /// <param name="parentThumbImageTag">Gets or sets the parent thumb image tag..</param>
        /// <param name="parentPrimaryImageItemId">Gets or sets the parent primary image item identifier..</param>
        /// <param name="parentPrimaryImageTag">Gets or sets the parent primary image tag..</param>
        public SeriesTimerInfoDto(string id = default(string), string type = default(string), string serverId = default(string), string externalId = default(string), Guid channelId = default(Guid), string externalChannelId = default(string), string channelName = default(string), string channelPrimaryImageTag = default(string), string programId = default(string), string externalProgramId = default(string), string name = default(string), string overview = default(string), DateTime startDate = default(DateTime), DateTime endDate = default(DateTime), string serviceName = default(string), int priority = default(int), int prePaddingSeconds = default(int), int postPaddingSeconds = default(int), bool isPrePaddingRequired = default(bool), string parentBackdropItemId = default(string), List<string> parentBackdropImageTags = default(List<string>), bool isPostPaddingRequired = default(bool), KeepUntil? keepUntil = default(KeepUntil?), bool recordAnyTime = default(bool), bool skipEpisodesInLibrary = default(bool), bool recordAnyChannel = default(bool), int keepUpTo = default(int), bool recordNewOnly = default(bool), List<DayOfWeek> days = default(List<DayOfWeek>), DayPattern? dayPattern = default(DayPattern?), Dictionary<string, string> imageTags = default(Dictionary<string, string>), string parentThumbItemId = default(string), string parentThumbImageTag = default(string), string parentPrimaryImageItemId = default(string), string parentPrimaryImageTag = default(string))
        {
            this.Id = id;
            this.Type = type;
            this.ServerId = serverId;
            this.ExternalId = externalId;
            this.ExternalChannelId = externalChannelId;
            this.ChannelName = channelName;
            this.ChannelPrimaryImageTag = channelPrimaryImageTag;
            this.ProgramId = programId;
            this.ExternalProgramId = externalProgramId;
            this.Name = name;
            this.Overview = overview;
            this.ServiceName = serviceName;
            this.ParentBackdropItemId = parentBackdropItemId;
            this.ParentBackdropImageTags = parentBackdropImageTags;
            this.Days = days;
            this.DayPattern = dayPattern;
            this.ImageTags = imageTags;
            this.ParentThumbItemId = parentThumbItemId;
            this.ParentThumbImageTag = parentThumbImageTag;
            this.ParentPrimaryImageItemId = parentPrimaryImageItemId;
            this.ParentPrimaryImageTag = parentPrimaryImageTag;
            this.Id = id;
            this.Type = type;
            this.ServerId = serverId;
            this.ExternalId = externalId;
            this.ChannelId = channelId;
            this.ExternalChannelId = externalChannelId;
            this.ChannelName = channelName;
            this.ChannelPrimaryImageTag = channelPrimaryImageTag;
            this.ProgramId = programId;
            this.ExternalProgramId = externalProgramId;
            this.Name = name;
            this.Overview = overview;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.ServiceName = serviceName;
            this.Priority = priority;
            this.PrePaddingSeconds = prePaddingSeconds;
            this.PostPaddingSeconds = postPaddingSeconds;
            this.IsPrePaddingRequired = isPrePaddingRequired;
            this.ParentBackdropItemId = parentBackdropItemId;
            this.ParentBackdropImageTags = parentBackdropImageTags;
            this.IsPostPaddingRequired = isPostPaddingRequired;
            this.KeepUntil = keepUntil;
            this.RecordAnyTime = recordAnyTime;
            this.SkipEpisodesInLibrary = skipEpisodesInLibrary;
            this.RecordAnyChannel = recordAnyChannel;
            this.KeepUpTo = keepUpTo;
            this.RecordNewOnly = recordNewOnly;
            this.Days = days;
            this.DayPattern = dayPattern;
            this.ImageTags = imageTags;
            this.ParentThumbItemId = parentThumbItemId;
            this.ParentThumbImageTag = parentThumbImageTag;
            this.ParentPrimaryImageItemId = parentPrimaryImageItemId;
            this.ParentPrimaryImageTag = parentPrimaryImageTag;
        }

        /// <summary>
        /// Id of the recording.
        /// </summary>
        /// <value>Id of the recording.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the server identifier.
        /// </summary>
        /// <value>Gets or sets the server identifier.</value>
        [DataMember(Name="ServerId", EmitDefaultValue=true)]
        public string ServerId { get; set; }

        /// <summary>
        /// Gets or sets the external identifier.
        /// </summary>
        /// <value>Gets or sets the external identifier.</value>
        [DataMember(Name="ExternalId", EmitDefaultValue=true)]
        public string ExternalId { get; set; }

        /// <summary>
        /// ChannelId of the recording.
        /// </summary>
        /// <value>ChannelId of the recording.</value>
        [DataMember(Name="ChannelId", EmitDefaultValue=false)]
        public Guid ChannelId { get; set; }

        /// <summary>
        /// Gets or sets the external channel identifier.
        /// </summary>
        /// <value>Gets or sets the external channel identifier.</value>
        [DataMember(Name="ExternalChannelId", EmitDefaultValue=true)]
        public string ExternalChannelId { get; set; }

        /// <summary>
        /// ChannelName of the recording.
        /// </summary>
        /// <value>ChannelName of the recording.</value>
        [DataMember(Name="ChannelName", EmitDefaultValue=true)]
        public string ChannelName { get; set; }

        /// <summary>
        /// Gets or Sets ChannelPrimaryImageTag
        /// </summary>
        [DataMember(Name="ChannelPrimaryImageTag", EmitDefaultValue=true)]
        public string ChannelPrimaryImageTag { get; set; }

        /// <summary>
        /// Gets or sets the program identifier.
        /// </summary>
        /// <value>Gets or sets the program identifier.</value>
        [DataMember(Name="ProgramId", EmitDefaultValue=true)]
        public string ProgramId { get; set; }

        /// <summary>
        /// Gets or sets the external program identifier.
        /// </summary>
        /// <value>Gets or sets the external program identifier.</value>
        [DataMember(Name="ExternalProgramId", EmitDefaultValue=true)]
        public string ExternalProgramId { get; set; }

        /// <summary>
        /// Name of the recording.
        /// </summary>
        /// <value>Name of the recording.</value>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Description of the recording.
        /// </summary>
        /// <value>Description of the recording.</value>
        [DataMember(Name="Overview", EmitDefaultValue=true)]
        public string Overview { get; set; }

        /// <summary>
        /// The start date of the recording, in UTC.
        /// </summary>
        /// <value>The start date of the recording, in UTC.</value>
        [DataMember(Name="StartDate", EmitDefaultValue=false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// The end date of the recording, in UTC.
        /// </summary>
        /// <value>The end date of the recording, in UTC.</value>
        [DataMember(Name="EndDate", EmitDefaultValue=false)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Gets or sets the name of the service.
        /// </summary>
        /// <value>Gets or sets the name of the service.</value>
        [DataMember(Name="ServiceName", EmitDefaultValue=true)]
        public string ServiceName { get; set; }

        /// <summary>
        /// Gets or sets the priority.
        /// </summary>
        /// <value>Gets or sets the priority.</value>
        [DataMember(Name="Priority", EmitDefaultValue=false)]
        public int Priority { get; set; }

        /// <summary>
        /// Gets or sets the pre padding seconds.
        /// </summary>
        /// <value>Gets or sets the pre padding seconds.</value>
        [DataMember(Name="PrePaddingSeconds", EmitDefaultValue=false)]
        public int PrePaddingSeconds { get; set; }

        /// <summary>
        /// Gets or sets the post padding seconds.
        /// </summary>
        /// <value>Gets or sets the post padding seconds.</value>
        [DataMember(Name="PostPaddingSeconds", EmitDefaultValue=false)]
        public int PostPaddingSeconds { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is pre padding required.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is pre padding required.</value>
        [DataMember(Name="IsPrePaddingRequired", EmitDefaultValue=false)]
        public bool IsPrePaddingRequired { get; set; }

        /// <summary>
        /// If the item does not have any backdrops, this will hold the Id of the Parent that has one.
        /// </summary>
        /// <value>If the item does not have any backdrops, this will hold the Id of the Parent that has one.</value>
        [DataMember(Name="ParentBackdropItemId", EmitDefaultValue=true)]
        public string ParentBackdropItemId { get; set; }

        /// <summary>
        /// Gets or sets the parent backdrop image tags.
        /// </summary>
        /// <value>Gets or sets the parent backdrop image tags.</value>
        [DataMember(Name="ParentBackdropImageTags", EmitDefaultValue=true)]
        public List<string> ParentBackdropImageTags { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is post padding required.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is post padding required.</value>
        [DataMember(Name="IsPostPaddingRequired", EmitDefaultValue=false)]
        public bool IsPostPaddingRequired { get; set; }


        /// <summary>
        /// Gets or sets a value indicating whether [record any time].
        /// </summary>
        /// <value>Gets or sets a value indicating whether [record any time].</value>
        [DataMember(Name="RecordAnyTime", EmitDefaultValue=false)]
        public bool RecordAnyTime { get; set; }

        /// <summary>
        /// Gets or Sets SkipEpisodesInLibrary
        /// </summary>
        [DataMember(Name="SkipEpisodesInLibrary", EmitDefaultValue=false)]
        public bool SkipEpisodesInLibrary { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [record any channel].
        /// </summary>
        /// <value>Gets or sets a value indicating whether [record any channel].</value>
        [DataMember(Name="RecordAnyChannel", EmitDefaultValue=false)]
        public bool RecordAnyChannel { get; set; }

        /// <summary>
        /// Gets or Sets KeepUpTo
        /// </summary>
        [DataMember(Name="KeepUpTo", EmitDefaultValue=false)]
        public int KeepUpTo { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [record new only].
        /// </summary>
        /// <value>Gets or sets a value indicating whether [record new only].</value>
        [DataMember(Name="RecordNewOnly", EmitDefaultValue=false)]
        public bool RecordNewOnly { get; set; }

        /// <summary>
        /// Gets or sets the days.
        /// </summary>
        /// <value>Gets or sets the days.</value>
        [DataMember(Name="Days", EmitDefaultValue=true)]
        public List<DayOfWeek> Days { get; set; }


        /// <summary>
        /// Gets or sets the image tags.
        /// </summary>
        /// <value>Gets or sets the image tags.</value>
        [DataMember(Name="ImageTags", EmitDefaultValue=true)]
        public Dictionary<string, string> ImageTags { get; set; }

        /// <summary>
        /// Gets or sets the parent thumb item id.
        /// </summary>
        /// <value>Gets or sets the parent thumb item id.</value>
        [DataMember(Name="ParentThumbItemId", EmitDefaultValue=true)]
        public string ParentThumbItemId { get; set; }

        /// <summary>
        /// Gets or sets the parent thumb image tag.
        /// </summary>
        /// <value>Gets or sets the parent thumb image tag.</value>
        [DataMember(Name="ParentThumbImageTag", EmitDefaultValue=true)]
        public string ParentThumbImageTag { get; set; }

        /// <summary>
        /// Gets or sets the parent primary image item identifier.
        /// </summary>
        /// <value>Gets or sets the parent primary image item identifier.</value>
        [DataMember(Name="ParentPrimaryImageItemId", EmitDefaultValue=true)]
        public string ParentPrimaryImageItemId { get; set; }

        /// <summary>
        /// Gets or sets the parent primary image tag.
        /// </summary>
        /// <value>Gets or sets the parent primary image tag.</value>
        [DataMember(Name="ParentPrimaryImageTag", EmitDefaultValue=true)]
        public string ParentPrimaryImageTag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SeriesTimerInfoDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ServerId: ").Append(ServerId).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  ExternalChannelId: ").Append(ExternalChannelId).Append("\n");
            sb.Append("  ChannelName: ").Append(ChannelName).Append("\n");
            sb.Append("  ChannelPrimaryImageTag: ").Append(ChannelPrimaryImageTag).Append("\n");
            sb.Append("  ProgramId: ").Append(ProgramId).Append("\n");
            sb.Append("  ExternalProgramId: ").Append(ExternalProgramId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Overview: ").Append(Overview).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  PrePaddingSeconds: ").Append(PrePaddingSeconds).Append("\n");
            sb.Append("  PostPaddingSeconds: ").Append(PostPaddingSeconds).Append("\n");
            sb.Append("  IsPrePaddingRequired: ").Append(IsPrePaddingRequired).Append("\n");
            sb.Append("  ParentBackdropItemId: ").Append(ParentBackdropItemId).Append("\n");
            sb.Append("  ParentBackdropImageTags: ").Append(ParentBackdropImageTags).Append("\n");
            sb.Append("  IsPostPaddingRequired: ").Append(IsPostPaddingRequired).Append("\n");
            sb.Append("  KeepUntil: ").Append(KeepUntil).Append("\n");
            sb.Append("  RecordAnyTime: ").Append(RecordAnyTime).Append("\n");
            sb.Append("  SkipEpisodesInLibrary: ").Append(SkipEpisodesInLibrary).Append("\n");
            sb.Append("  RecordAnyChannel: ").Append(RecordAnyChannel).Append("\n");
            sb.Append("  KeepUpTo: ").Append(KeepUpTo).Append("\n");
            sb.Append("  RecordNewOnly: ").Append(RecordNewOnly).Append("\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  DayPattern: ").Append(DayPattern).Append("\n");
            sb.Append("  ImageTags: ").Append(ImageTags).Append("\n");
            sb.Append("  ParentThumbItemId: ").Append(ParentThumbItemId).Append("\n");
            sb.Append("  ParentThumbImageTag: ").Append(ParentThumbImageTag).Append("\n");
            sb.Append("  ParentPrimaryImageItemId: ").Append(ParentPrimaryImageItemId).Append("\n");
            sb.Append("  ParentPrimaryImageTag: ").Append(ParentPrimaryImageTag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SeriesTimerInfoDto);
        }

        /// <summary>
        /// Returns true if SeriesTimerInfoDto instances are equal
        /// </summary>
        /// <param name="input">Instance of SeriesTimerInfoDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SeriesTimerInfoDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ServerId == input.ServerId ||
                    (this.ServerId != null &&
                    this.ServerId.Equals(input.ServerId))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.ChannelId == input.ChannelId ||
                    (this.ChannelId != null &&
                    this.ChannelId.Equals(input.ChannelId))
                ) && 
                (
                    this.ExternalChannelId == input.ExternalChannelId ||
                    (this.ExternalChannelId != null &&
                    this.ExternalChannelId.Equals(input.ExternalChannelId))
                ) && 
                (
                    this.ChannelName == input.ChannelName ||
                    (this.ChannelName != null &&
                    this.ChannelName.Equals(input.ChannelName))
                ) && 
                (
                    this.ChannelPrimaryImageTag == input.ChannelPrimaryImageTag ||
                    (this.ChannelPrimaryImageTag != null &&
                    this.ChannelPrimaryImageTag.Equals(input.ChannelPrimaryImageTag))
                ) && 
                (
                    this.ProgramId == input.ProgramId ||
                    (this.ProgramId != null &&
                    this.ProgramId.Equals(input.ProgramId))
                ) && 
                (
                    this.ExternalProgramId == input.ExternalProgramId ||
                    (this.ExternalProgramId != null &&
                    this.ExternalProgramId.Equals(input.ExternalProgramId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Overview == input.Overview ||
                    (this.Overview != null &&
                    this.Overview.Equals(input.Overview))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.ServiceName == input.ServiceName ||
                    (this.ServiceName != null &&
                    this.ServiceName.Equals(input.ServiceName))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.PrePaddingSeconds == input.PrePaddingSeconds ||
                    (this.PrePaddingSeconds != null &&
                    this.PrePaddingSeconds.Equals(input.PrePaddingSeconds))
                ) && 
                (
                    this.PostPaddingSeconds == input.PostPaddingSeconds ||
                    (this.PostPaddingSeconds != null &&
                    this.PostPaddingSeconds.Equals(input.PostPaddingSeconds))
                ) && 
                (
                    this.IsPrePaddingRequired == input.IsPrePaddingRequired ||
                    (this.IsPrePaddingRequired != null &&
                    this.IsPrePaddingRequired.Equals(input.IsPrePaddingRequired))
                ) && 
                (
                    this.ParentBackdropItemId == input.ParentBackdropItemId ||
                    (this.ParentBackdropItemId != null &&
                    this.ParentBackdropItemId.Equals(input.ParentBackdropItemId))
                ) && 
                (
                    this.ParentBackdropImageTags == input.ParentBackdropImageTags ||
                    this.ParentBackdropImageTags != null &&
                    input.ParentBackdropImageTags != null &&
                    this.ParentBackdropImageTags.SequenceEqual(input.ParentBackdropImageTags)
                ) && 
                (
                    this.IsPostPaddingRequired == input.IsPostPaddingRequired ||
                    (this.IsPostPaddingRequired != null &&
                    this.IsPostPaddingRequired.Equals(input.IsPostPaddingRequired))
                ) && 
                (
                    this.KeepUntil == input.KeepUntil ||
                    (this.KeepUntil != null &&
                    this.KeepUntil.Equals(input.KeepUntil))
                ) && 
                (
                    this.RecordAnyTime == input.RecordAnyTime ||
                    (this.RecordAnyTime != null &&
                    this.RecordAnyTime.Equals(input.RecordAnyTime))
                ) && 
                (
                    this.SkipEpisodesInLibrary == input.SkipEpisodesInLibrary ||
                    (this.SkipEpisodesInLibrary != null &&
                    this.SkipEpisodesInLibrary.Equals(input.SkipEpisodesInLibrary))
                ) && 
                (
                    this.RecordAnyChannel == input.RecordAnyChannel ||
                    (this.RecordAnyChannel != null &&
                    this.RecordAnyChannel.Equals(input.RecordAnyChannel))
                ) && 
                (
                    this.KeepUpTo == input.KeepUpTo ||
                    (this.KeepUpTo != null &&
                    this.KeepUpTo.Equals(input.KeepUpTo))
                ) && 
                (
                    this.RecordNewOnly == input.RecordNewOnly ||
                    (this.RecordNewOnly != null &&
                    this.RecordNewOnly.Equals(input.RecordNewOnly))
                ) && 
                (
                    this.Days == input.Days ||
                    this.Days != null &&
                    input.Days != null &&
                    this.Days.SequenceEqual(input.Days)
                ) && 
                (
                    this.DayPattern == input.DayPattern ||
                    (this.DayPattern != null &&
                    this.DayPattern.Equals(input.DayPattern))
                ) && 
                (
                    this.ImageTags == input.ImageTags ||
                    this.ImageTags != null &&
                    input.ImageTags != null &&
                    this.ImageTags.SequenceEqual(input.ImageTags)
                ) && 
                (
                    this.ParentThumbItemId == input.ParentThumbItemId ||
                    (this.ParentThumbItemId != null &&
                    this.ParentThumbItemId.Equals(input.ParentThumbItemId))
                ) && 
                (
                    this.ParentThumbImageTag == input.ParentThumbImageTag ||
                    (this.ParentThumbImageTag != null &&
                    this.ParentThumbImageTag.Equals(input.ParentThumbImageTag))
                ) && 
                (
                    this.ParentPrimaryImageItemId == input.ParentPrimaryImageItemId ||
                    (this.ParentPrimaryImageItemId != null &&
                    this.ParentPrimaryImageItemId.Equals(input.ParentPrimaryImageItemId))
                ) && 
                (
                    this.ParentPrimaryImageTag == input.ParentPrimaryImageTag ||
                    (this.ParentPrimaryImageTag != null &&
                    this.ParentPrimaryImageTag.Equals(input.ParentPrimaryImageTag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ServerId != null)
                    hashCode = hashCode * 59 + this.ServerId.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.ChannelId != null)
                    hashCode = hashCode * 59 + this.ChannelId.GetHashCode();
                if (this.ExternalChannelId != null)
                    hashCode = hashCode * 59 + this.ExternalChannelId.GetHashCode();
                if (this.ChannelName != null)
                    hashCode = hashCode * 59 + this.ChannelName.GetHashCode();
                if (this.ChannelPrimaryImageTag != null)
                    hashCode = hashCode * 59 + this.ChannelPrimaryImageTag.GetHashCode();
                if (this.ProgramId != null)
                    hashCode = hashCode * 59 + this.ProgramId.GetHashCode();
                if (this.ExternalProgramId != null)
                    hashCode = hashCode * 59 + this.ExternalProgramId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Overview != null)
                    hashCode = hashCode * 59 + this.Overview.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.ServiceName != null)
                    hashCode = hashCode * 59 + this.ServiceName.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.PrePaddingSeconds != null)
                    hashCode = hashCode * 59 + this.PrePaddingSeconds.GetHashCode();
                if (this.PostPaddingSeconds != null)
                    hashCode = hashCode * 59 + this.PostPaddingSeconds.GetHashCode();
                if (this.IsPrePaddingRequired != null)
                    hashCode = hashCode * 59 + this.IsPrePaddingRequired.GetHashCode();
                if (this.ParentBackdropItemId != null)
                    hashCode = hashCode * 59 + this.ParentBackdropItemId.GetHashCode();
                if (this.ParentBackdropImageTags != null)
                    hashCode = hashCode * 59 + this.ParentBackdropImageTags.GetHashCode();
                if (this.IsPostPaddingRequired != null)
                    hashCode = hashCode * 59 + this.IsPostPaddingRequired.GetHashCode();
                if (this.KeepUntil != null)
                    hashCode = hashCode * 59 + this.KeepUntil.GetHashCode();
                if (this.RecordAnyTime != null)
                    hashCode = hashCode * 59 + this.RecordAnyTime.GetHashCode();
                if (this.SkipEpisodesInLibrary != null)
                    hashCode = hashCode * 59 + this.SkipEpisodesInLibrary.GetHashCode();
                if (this.RecordAnyChannel != null)
                    hashCode = hashCode * 59 + this.RecordAnyChannel.GetHashCode();
                if (this.KeepUpTo != null)
                    hashCode = hashCode * 59 + this.KeepUpTo.GetHashCode();
                if (this.RecordNewOnly != null)
                    hashCode = hashCode * 59 + this.RecordNewOnly.GetHashCode();
                if (this.Days != null)
                    hashCode = hashCode * 59 + this.Days.GetHashCode();
                if (this.DayPattern != null)
                    hashCode = hashCode * 59 + this.DayPattern.GetHashCode();
                if (this.ImageTags != null)
                    hashCode = hashCode * 59 + this.ImageTags.GetHashCode();
                if (this.ParentThumbItemId != null)
                    hashCode = hashCode * 59 + this.ParentThumbItemId.GetHashCode();
                if (this.ParentThumbImageTag != null)
                    hashCode = hashCode * 59 + this.ParentThumbImageTag.GetHashCode();
                if (this.ParentPrimaryImageItemId != null)
                    hashCode = hashCode * 59 + this.ParentPrimaryImageItemId.GetHashCode();
                if (this.ParentPrimaryImageTag != null)
                    hashCode = hashCode * 59 + this.ParentPrimaryImageTag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
