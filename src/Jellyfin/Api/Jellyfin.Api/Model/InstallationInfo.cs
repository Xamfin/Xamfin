/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Class InstallationInfo.
    /// </summary>
    [DataContract]
    public partial class InstallationInfo :  IEquatable<InstallationInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallationInfo" /> class.
        /// </summary>
        /// <param name="guid">Gets or sets the Id..</param>
        /// <param name="name">Gets or sets the name..</param>
        /// <param name="version">Gets or sets the version..</param>
        /// <param name="changelog">Gets or sets the changelog for this version..</param>
        /// <param name="sourceUrl">Gets or sets the source URL..</param>
        /// <param name="checksum">Gets or sets a checksum for the binary..</param>
        /// <param name="packageInfo">Gets or sets package information for the installation..</param>
        public InstallationInfo(Guid guid = default(Guid), string name = default(string), Version version = default(Version), string changelog = default(string), string sourceUrl = default(string), string checksum = default(string), PackageInfo packageInfo = default(PackageInfo))
        {
            this.Name = name;
            this.Version = version;
            this.Changelog = changelog;
            this.SourceUrl = sourceUrl;
            this.Checksum = checksum;
            this.PackageInfo = packageInfo;
            this.Guid = guid;
            this.Name = name;
            this.Version = version;
            this.Changelog = changelog;
            this.SourceUrl = sourceUrl;
            this.Checksum = checksum;
            this.PackageInfo = packageInfo;
        }

        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        /// <value>Gets or sets the Id.</value>
        [DataMember(Name="Guid", EmitDefaultValue=false)]
        public Guid Guid { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>Gets or sets the name.</value>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the version.
        /// </summary>
        /// <value>Gets or sets the version.</value>
        [DataMember(Name="Version", EmitDefaultValue=true)]
        public Version Version { get; set; }

        /// <summary>
        /// Gets or sets the changelog for this version.
        /// </summary>
        /// <value>Gets or sets the changelog for this version.</value>
        [DataMember(Name="Changelog", EmitDefaultValue=true)]
        public string Changelog { get; set; }

        /// <summary>
        /// Gets or sets the source URL.
        /// </summary>
        /// <value>Gets or sets the source URL.</value>
        [DataMember(Name="SourceUrl", EmitDefaultValue=true)]
        public string SourceUrl { get; set; }

        /// <summary>
        /// Gets or sets a checksum for the binary.
        /// </summary>
        /// <value>Gets or sets a checksum for the binary.</value>
        [DataMember(Name="Checksum", EmitDefaultValue=true)]
        public string Checksum { get; set; }

        /// <summary>
        /// Gets or sets package information for the installation.
        /// </summary>
        /// <value>Gets or sets package information for the installation.</value>
        [DataMember(Name="PackageInfo", EmitDefaultValue=true)]
        public PackageInfo PackageInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InstallationInfo {\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Changelog: ").Append(Changelog).Append("\n");
            sb.Append("  SourceUrl: ").Append(SourceUrl).Append("\n");
            sb.Append("  Checksum: ").Append(Checksum).Append("\n");
            sb.Append("  PackageInfo: ").Append(PackageInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstallationInfo);
        }

        /// <summary>
        /// Returns true if InstallationInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of InstallationInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstallationInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Guid == input.Guid ||
                    (this.Guid != null &&
                    this.Guid.Equals(input.Guid))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Changelog == input.Changelog ||
                    (this.Changelog != null &&
                    this.Changelog.Equals(input.Changelog))
                ) && 
                (
                    this.SourceUrl == input.SourceUrl ||
                    (this.SourceUrl != null &&
                    this.SourceUrl.Equals(input.SourceUrl))
                ) && 
                (
                    this.Checksum == input.Checksum ||
                    (this.Checksum != null &&
                    this.Checksum.Equals(input.Checksum))
                ) && 
                (
                    this.PackageInfo == input.PackageInfo ||
                    (this.PackageInfo != null &&
                    this.PackageInfo.Equals(input.PackageInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Guid != null)
                    hashCode = hashCode * 59 + this.Guid.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Changelog != null)
                    hashCode = hashCode * 59 + this.Changelog.GetHashCode();
                if (this.SourceUrl != null)
                    hashCode = hashCode * 59 + this.SourceUrl.GetHashCode();
                if (this.Checksum != null)
                    hashCode = hashCode * 59 + this.Checksum.GetHashCode();
                if (this.PackageInfo != null)
                    hashCode = hashCode * 59 + this.PackageInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
