/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Library type options dto.
    /// </summary>
    [DataContract]
    public partial class LibraryTypeOptionsDto :  IEquatable<LibraryTypeOptionsDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryTypeOptionsDto" /> class.
        /// </summary>
        /// <param name="type">Gets or sets the type..</param>
        /// <param name="metadataFetchers">Gets or sets the metadata fetchers..</param>
        /// <param name="imageFetchers">Gets or sets the image fetchers..</param>
        /// <param name="supportedImageTypes">Gets or sets the supported image types..</param>
        /// <param name="defaultImageOptions">Gets or sets the default image options..</param>
        public LibraryTypeOptionsDto(string type = default(string), List<LibraryOptionInfoDto> metadataFetchers = default(List<LibraryOptionInfoDto>), List<LibraryOptionInfoDto> imageFetchers = default(List<LibraryOptionInfoDto>), List<ImageType> supportedImageTypes = default(List<ImageType>), List<ImageOption> defaultImageOptions = default(List<ImageOption>))
        {
            this.Type = type;
            this.MetadataFetchers = metadataFetchers;
            this.ImageFetchers = imageFetchers;
            this.SupportedImageTypes = supportedImageTypes;
            this.DefaultImageOptions = defaultImageOptions;
            this.Type = type;
            this.MetadataFetchers = metadataFetchers;
            this.ImageFetchers = imageFetchers;
            this.SupportedImageTypes = supportedImageTypes;
            this.DefaultImageOptions = defaultImageOptions;
        }

        /// <summary>
        /// Gets or sets the type.
        /// </summary>
        /// <value>Gets or sets the type.</value>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the metadata fetchers.
        /// </summary>
        /// <value>Gets or sets the metadata fetchers.</value>
        [DataMember(Name="MetadataFetchers", EmitDefaultValue=true)]
        public List<LibraryOptionInfoDto> MetadataFetchers { get; set; }

        /// <summary>
        /// Gets or sets the image fetchers.
        /// </summary>
        /// <value>Gets or sets the image fetchers.</value>
        [DataMember(Name="ImageFetchers", EmitDefaultValue=true)]
        public List<LibraryOptionInfoDto> ImageFetchers { get; set; }

        /// <summary>
        /// Gets or sets the supported image types.
        /// </summary>
        /// <value>Gets or sets the supported image types.</value>
        [DataMember(Name="SupportedImageTypes", EmitDefaultValue=true)]
        public List<ImageType> SupportedImageTypes { get; set; }

        /// <summary>
        /// Gets or sets the default image options.
        /// </summary>
        /// <value>Gets or sets the default image options.</value>
        [DataMember(Name="DefaultImageOptions", EmitDefaultValue=true)]
        public List<ImageOption> DefaultImageOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LibraryTypeOptionsDto {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MetadataFetchers: ").Append(MetadataFetchers).Append("\n");
            sb.Append("  ImageFetchers: ").Append(ImageFetchers).Append("\n");
            sb.Append("  SupportedImageTypes: ").Append(SupportedImageTypes).Append("\n");
            sb.Append("  DefaultImageOptions: ").Append(DefaultImageOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LibraryTypeOptionsDto);
        }

        /// <summary>
        /// Returns true if LibraryTypeOptionsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of LibraryTypeOptionsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LibraryTypeOptionsDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.MetadataFetchers == input.MetadataFetchers ||
                    this.MetadataFetchers != null &&
                    input.MetadataFetchers != null &&
                    this.MetadataFetchers.SequenceEqual(input.MetadataFetchers)
                ) && 
                (
                    this.ImageFetchers == input.ImageFetchers ||
                    this.ImageFetchers != null &&
                    input.ImageFetchers != null &&
                    this.ImageFetchers.SequenceEqual(input.ImageFetchers)
                ) && 
                (
                    this.SupportedImageTypes == input.SupportedImageTypes ||
                    this.SupportedImageTypes != null &&
                    input.SupportedImageTypes != null &&
                    this.SupportedImageTypes.SequenceEqual(input.SupportedImageTypes)
                ) && 
                (
                    this.DefaultImageOptions == input.DefaultImageOptions ||
                    this.DefaultImageOptions != null &&
                    input.DefaultImageOptions != null &&
                    this.DefaultImageOptions.SequenceEqual(input.DefaultImageOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.MetadataFetchers != null)
                    hashCode = hashCode * 59 + this.MetadataFetchers.GetHashCode();
                if (this.ImageFetchers != null)
                    hashCode = hashCode * 59 + this.ImageFetchers.GetHashCode();
                if (this.SupportedImageTypes != null)
                    hashCode = hashCode * 59 + this.SupportedImageTypes.GetHashCode();
                if (this.DefaultImageOptions != null)
                    hashCode = hashCode * 59 + this.DefaultImageOptions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
