/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Defines the display preferences for any item that supports them (usually Folders).
    /// </summary>
    [DataContract]
    public partial class DisplayPreferencesDto :  IEquatable<DisplayPreferencesDto>, IValidatableObject
    {
        /// <summary>
        /// An enum representing the axis that should be scrolled.
        /// </summary>
        /// <value>An enum representing the axis that should be scrolled.</value>
        [DataMember(Name="ScrollDirection", EmitDefaultValue=false)]
        public ScrollDirection? ScrollDirection { get; set; }
        /// <summary>
        /// An enum representing the sorting order.
        /// </summary>
        /// <value>An enum representing the sorting order.</value>
        [DataMember(Name="SortOrder", EmitDefaultValue=false)]
        public SortOrder? SortOrder { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DisplayPreferencesDto" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the user id..</param>
        /// <param name="viewType">Gets or sets the type of the view..</param>
        /// <param name="sortBy">Gets or sets the sort by..</param>
        /// <param name="indexBy">Gets or sets the index by..</param>
        /// <param name="rememberIndexing">Gets or sets a value indicating whether [remember indexing]..</param>
        /// <param name="primaryImageHeight">Gets or sets the height of the primary image..</param>
        /// <param name="primaryImageWidth">Gets or sets the width of the primary image..</param>
        /// <param name="customPrefs">Gets or sets the custom prefs..</param>
        /// <param name="scrollDirection">An enum representing the axis that should be scrolled..</param>
        /// <param name="showBackdrop">Gets or sets a value indicating whether to show backdrops on this item..</param>
        /// <param name="rememberSorting">Gets or sets a value indicating whether [remember sorting]..</param>
        /// <param name="sortOrder">An enum representing the sorting order..</param>
        /// <param name="showSidebar">Gets or sets a value indicating whether [show sidebar]..</param>
        /// <param name="_client">Gets or sets the client..</param>
        public DisplayPreferencesDto(string id = default(string), string viewType = default(string), string sortBy = default(string), string indexBy = default(string), bool rememberIndexing = default(bool), int primaryImageHeight = default(int), int primaryImageWidth = default(int), Dictionary<string, string> customPrefs = default(Dictionary<string, string>), ScrollDirection? scrollDirection = default(ScrollDirection?), bool showBackdrop = default(bool), bool rememberSorting = default(bool), SortOrder? sortOrder = default(SortOrder?), bool showSidebar = default(bool), string _client = default(string))
        {
            this.Id = id;
            this.ViewType = viewType;
            this.SortBy = sortBy;
            this.IndexBy = indexBy;
            this.CustomPrefs = customPrefs;
            this._Client = _client;
            this.Id = id;
            this.ViewType = viewType;
            this.SortBy = sortBy;
            this.IndexBy = indexBy;
            this.RememberIndexing = rememberIndexing;
            this.PrimaryImageHeight = primaryImageHeight;
            this.PrimaryImageWidth = primaryImageWidth;
            this.CustomPrefs = customPrefs;
            this.ScrollDirection = scrollDirection;
            this.ShowBackdrop = showBackdrop;
            this.RememberSorting = rememberSorting;
            this.SortOrder = sortOrder;
            this.ShowSidebar = showSidebar;
            this._Client = _client;
        }

        /// <summary>
        /// Gets or sets the user id.
        /// </summary>
        /// <value>Gets or sets the user id.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the type of the view.
        /// </summary>
        /// <value>Gets or sets the type of the view.</value>
        [DataMember(Name="ViewType", EmitDefaultValue=true)]
        public string ViewType { get; set; }

        /// <summary>
        /// Gets or sets the sort by.
        /// </summary>
        /// <value>Gets or sets the sort by.</value>
        [DataMember(Name="SortBy", EmitDefaultValue=true)]
        public string SortBy { get; set; }

        /// <summary>
        /// Gets or sets the index by.
        /// </summary>
        /// <value>Gets or sets the index by.</value>
        [DataMember(Name="IndexBy", EmitDefaultValue=true)]
        public string IndexBy { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [remember indexing].
        /// </summary>
        /// <value>Gets or sets a value indicating whether [remember indexing].</value>
        [DataMember(Name="RememberIndexing", EmitDefaultValue=false)]
        public bool RememberIndexing { get; set; }

        /// <summary>
        /// Gets or sets the height of the primary image.
        /// </summary>
        /// <value>Gets or sets the height of the primary image.</value>
        [DataMember(Name="PrimaryImageHeight", EmitDefaultValue=false)]
        public int PrimaryImageHeight { get; set; }

        /// <summary>
        /// Gets or sets the width of the primary image.
        /// </summary>
        /// <value>Gets or sets the width of the primary image.</value>
        [DataMember(Name="PrimaryImageWidth", EmitDefaultValue=false)]
        public int PrimaryImageWidth { get; set; }

        /// <summary>
        /// Gets or sets the custom prefs.
        /// </summary>
        /// <value>Gets or sets the custom prefs.</value>
        [DataMember(Name="CustomPrefs", EmitDefaultValue=true)]
        public Dictionary<string, string> CustomPrefs { get; set; }


        /// <summary>
        /// Gets or sets a value indicating whether to show backdrops on this item.
        /// </summary>
        /// <value>Gets or sets a value indicating whether to show backdrops on this item.</value>
        [DataMember(Name="ShowBackdrop", EmitDefaultValue=false)]
        public bool ShowBackdrop { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [remember sorting].
        /// </summary>
        /// <value>Gets or sets a value indicating whether [remember sorting].</value>
        [DataMember(Name="RememberSorting", EmitDefaultValue=false)]
        public bool RememberSorting { get; set; }


        /// <summary>
        /// Gets or sets a value indicating whether [show sidebar].
        /// </summary>
        /// <value>Gets or sets a value indicating whether [show sidebar].</value>
        [DataMember(Name="ShowSidebar", EmitDefaultValue=false)]
        public bool ShowSidebar { get; set; }

        /// <summary>
        /// Gets or sets the client.
        /// </summary>
        /// <value>Gets or sets the client.</value>
        [DataMember(Name="Client", EmitDefaultValue=true)]
        public string _Client { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DisplayPreferencesDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ViewType: ").Append(ViewType).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("  IndexBy: ").Append(IndexBy).Append("\n");
            sb.Append("  RememberIndexing: ").Append(RememberIndexing).Append("\n");
            sb.Append("  PrimaryImageHeight: ").Append(PrimaryImageHeight).Append("\n");
            sb.Append("  PrimaryImageWidth: ").Append(PrimaryImageWidth).Append("\n");
            sb.Append("  CustomPrefs: ").Append(CustomPrefs).Append("\n");
            sb.Append("  ScrollDirection: ").Append(ScrollDirection).Append("\n");
            sb.Append("  ShowBackdrop: ").Append(ShowBackdrop).Append("\n");
            sb.Append("  RememberSorting: ").Append(RememberSorting).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  ShowSidebar: ").Append(ShowSidebar).Append("\n");
            sb.Append("  _Client: ").Append(_Client).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DisplayPreferencesDto);
        }

        /// <summary>
        /// Returns true if DisplayPreferencesDto instances are equal
        /// </summary>
        /// <param name="input">Instance of DisplayPreferencesDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DisplayPreferencesDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ViewType == input.ViewType ||
                    (this.ViewType != null &&
                    this.ViewType.Equals(input.ViewType))
                ) && 
                (
                    this.SortBy == input.SortBy ||
                    (this.SortBy != null &&
                    this.SortBy.Equals(input.SortBy))
                ) && 
                (
                    this.IndexBy == input.IndexBy ||
                    (this.IndexBy != null &&
                    this.IndexBy.Equals(input.IndexBy))
                ) && 
                (
                    this.RememberIndexing == input.RememberIndexing ||
                    (this.RememberIndexing != null &&
                    this.RememberIndexing.Equals(input.RememberIndexing))
                ) && 
                (
                    this.PrimaryImageHeight == input.PrimaryImageHeight ||
                    (this.PrimaryImageHeight != null &&
                    this.PrimaryImageHeight.Equals(input.PrimaryImageHeight))
                ) && 
                (
                    this.PrimaryImageWidth == input.PrimaryImageWidth ||
                    (this.PrimaryImageWidth != null &&
                    this.PrimaryImageWidth.Equals(input.PrimaryImageWidth))
                ) && 
                (
                    this.CustomPrefs == input.CustomPrefs ||
                    this.CustomPrefs != null &&
                    input.CustomPrefs != null &&
                    this.CustomPrefs.SequenceEqual(input.CustomPrefs)
                ) && 
                (
                    this.ScrollDirection == input.ScrollDirection ||
                    (this.ScrollDirection != null &&
                    this.ScrollDirection.Equals(input.ScrollDirection))
                ) && 
                (
                    this.ShowBackdrop == input.ShowBackdrop ||
                    (this.ShowBackdrop != null &&
                    this.ShowBackdrop.Equals(input.ShowBackdrop))
                ) && 
                (
                    this.RememberSorting == input.RememberSorting ||
                    (this.RememberSorting != null &&
                    this.RememberSorting.Equals(input.RememberSorting))
                ) && 
                (
                    this.SortOrder == input.SortOrder ||
                    (this.SortOrder != null &&
                    this.SortOrder.Equals(input.SortOrder))
                ) && 
                (
                    this.ShowSidebar == input.ShowSidebar ||
                    (this.ShowSidebar != null &&
                    this.ShowSidebar.Equals(input.ShowSidebar))
                ) && 
                (
                    this._Client == input._Client ||
                    (this._Client != null &&
                    this._Client.Equals(input._Client))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ViewType != null)
                    hashCode = hashCode * 59 + this.ViewType.GetHashCode();
                if (this.SortBy != null)
                    hashCode = hashCode * 59 + this.SortBy.GetHashCode();
                if (this.IndexBy != null)
                    hashCode = hashCode * 59 + this.IndexBy.GetHashCode();
                if (this.RememberIndexing != null)
                    hashCode = hashCode * 59 + this.RememberIndexing.GetHashCode();
                if (this.PrimaryImageHeight != null)
                    hashCode = hashCode * 59 + this.PrimaryImageHeight.GetHashCode();
                if (this.PrimaryImageWidth != null)
                    hashCode = hashCode * 59 + this.PrimaryImageWidth.GetHashCode();
                if (this.CustomPrefs != null)
                    hashCode = hashCode * 59 + this.CustomPrefs.GetHashCode();
                if (this.ScrollDirection != null)
                    hashCode = hashCode * 59 + this.ScrollDirection.GetHashCode();
                if (this.ShowBackdrop != null)
                    hashCode = hashCode * 59 + this.ShowBackdrop.GetHashCode();
                if (this.RememberSorting != null)
                    hashCode = hashCode * 59 + this.RememberSorting.GetHashCode();
                if (this.SortOrder != null)
                    hashCode = hashCode * 59 + this.SortOrder.GetHashCode();
                if (this.ShowSidebar != null)
                    hashCode = hashCode * 59 + this.ShowSidebar.GetHashCode();
                if (this._Client != null)
                    hashCode = hashCode * 59 + this._Client.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
