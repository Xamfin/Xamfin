/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// The configuration page info.
    /// </summary>
    [DataContract]
    public partial class ConfigurationPageInfo :  IEquatable<ConfigurationPageInfo>, IValidatableObject
    {
        /// <summary>
        /// Enum ConfigurationPageType.
        /// </summary>
        /// <value>Enum ConfigurationPageType.</value>
        [DataMember(Name="ConfigurationPageType", EmitDefaultValue=false)]
        public ConfigurationPageType? ConfigurationPageType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationPageInfo" /> class.
        /// </summary>
        /// <param name="name">Gets or sets the name..</param>
        /// <param name="enableInMainMenu">Gets or sets a value indicating whether the configurations page is enabled in the main menu..</param>
        /// <param name="menuSection">Gets or sets the menu section..</param>
        /// <param name="menuIcon">Gets or sets the menu icon..</param>
        /// <param name="displayName">Gets or sets the display name..</param>
        /// <param name="configurationPageType">Enum ConfigurationPageType..</param>
        /// <param name="pluginId">Gets or sets the plugin id..</param>
        public ConfigurationPageInfo(string name = default(string), bool enableInMainMenu = default(bool), string menuSection = default(string), string menuIcon = default(string), string displayName = default(string), ConfigurationPageType? configurationPageType = default(ConfigurationPageType?), Guid? pluginId = default(Guid?))
        {
            this.Name = name;
            this.MenuSection = menuSection;
            this.MenuIcon = menuIcon;
            this.DisplayName = displayName;
            this.PluginId = pluginId;
            this.Name = name;
            this.EnableInMainMenu = enableInMainMenu;
            this.MenuSection = menuSection;
            this.MenuIcon = menuIcon;
            this.DisplayName = displayName;
            this.ConfigurationPageType = configurationPageType;
            this.PluginId = pluginId;
        }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>Gets or sets the name.</value>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the configurations page is enabled in the main menu.
        /// </summary>
        /// <value>Gets or sets a value indicating whether the configurations page is enabled in the main menu.</value>
        [DataMember(Name="EnableInMainMenu", EmitDefaultValue=false)]
        public bool EnableInMainMenu { get; set; }

        /// <summary>
        /// Gets or sets the menu section.
        /// </summary>
        /// <value>Gets or sets the menu section.</value>
        [DataMember(Name="MenuSection", EmitDefaultValue=true)]
        public string MenuSection { get; set; }

        /// <summary>
        /// Gets or sets the menu icon.
        /// </summary>
        /// <value>Gets or sets the menu icon.</value>
        [DataMember(Name="MenuIcon", EmitDefaultValue=true)]
        public string MenuIcon { get; set; }

        /// <summary>
        /// Gets or sets the display name.
        /// </summary>
        /// <value>Gets or sets the display name.</value>
        [DataMember(Name="DisplayName", EmitDefaultValue=true)]
        public string DisplayName { get; set; }


        /// <summary>
        /// Gets or sets the plugin id.
        /// </summary>
        /// <value>Gets or sets the plugin id.</value>
        [DataMember(Name="PluginId", EmitDefaultValue=true)]
        public Guid? PluginId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConfigurationPageInfo {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EnableInMainMenu: ").Append(EnableInMainMenu).Append("\n");
            sb.Append("  MenuSection: ").Append(MenuSection).Append("\n");
            sb.Append("  MenuIcon: ").Append(MenuIcon).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  ConfigurationPageType: ").Append(ConfigurationPageType).Append("\n");
            sb.Append("  PluginId: ").Append(PluginId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConfigurationPageInfo);
        }

        /// <summary>
        /// Returns true if ConfigurationPageInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ConfigurationPageInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigurationPageInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.EnableInMainMenu == input.EnableInMainMenu ||
                    (this.EnableInMainMenu != null &&
                    this.EnableInMainMenu.Equals(input.EnableInMainMenu))
                ) && 
                (
                    this.MenuSection == input.MenuSection ||
                    (this.MenuSection != null &&
                    this.MenuSection.Equals(input.MenuSection))
                ) && 
                (
                    this.MenuIcon == input.MenuIcon ||
                    (this.MenuIcon != null &&
                    this.MenuIcon.Equals(input.MenuIcon))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.ConfigurationPageType == input.ConfigurationPageType ||
                    (this.ConfigurationPageType != null &&
                    this.ConfigurationPageType.Equals(input.ConfigurationPageType))
                ) && 
                (
                    this.PluginId == input.PluginId ||
                    (this.PluginId != null &&
                    this.PluginId.Equals(input.PluginId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.EnableInMainMenu != null)
                    hashCode = hashCode * 59 + this.EnableInMainMenu.GetHashCode();
                if (this.MenuSection != null)
                    hashCode = hashCode * 59 + this.MenuSection.GetHashCode();
                if (this.MenuIcon != null)
                    hashCode = hashCode * 59 + this.MenuIcon.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.ConfigurationPageType != null)
                    hashCode = hashCode * 59 + this.ConfigurationPageType.GetHashCode();
                if (this.PluginId != null)
                    hashCode = hashCode * 59 + this.PluginId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
