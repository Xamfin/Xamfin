/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Upload subtitles dto.
    /// </summary>
    [DataContract]
    public partial class UploadSubtitleDto :  IEquatable<UploadSubtitleDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadSubtitleDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UploadSubtitleDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadSubtitleDto" /> class.
        /// </summary>
        /// <param name="language">Gets or sets the subtitle language. (required).</param>
        /// <param name="format">Gets or sets the subtitle format. (required).</param>
        /// <param name="isForced">Gets or sets a value indicating whether the subtitle is forced. (required).</param>
        /// <param name="data">Gets or sets the subtitle data. (required).</param>
        public UploadSubtitleDto(string language = default(string), string format = default(string), bool isForced = default(bool), string data = default(string))
        {
            // to ensure "language" is required (not null)
            if (language == null)
            {
                throw new InvalidDataException("language is a required property for UploadSubtitleDto and cannot be null");
            }
            else
            {
                this.Language = language;
            }

            // to ensure "format" is required (not null)
            if (format == null)
            {
                throw new InvalidDataException("format is a required property for UploadSubtitleDto and cannot be null");
            }
            else
            {
                this.Format = format;
            }

            // to ensure "isForced" is required (not null)
            if (isForced == null)
            {
                throw new InvalidDataException("isForced is a required property for UploadSubtitleDto and cannot be null");
            }
            else
            {
                this.IsForced = isForced;
            }

            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new InvalidDataException("data is a required property for UploadSubtitleDto and cannot be null");
            }
            else
            {
                this.Data = data;
            }

        }

        /// <summary>
        /// Gets or sets the subtitle language.
        /// </summary>
        /// <value>Gets or sets the subtitle language.</value>
        [DataMember(Name="Language", EmitDefaultValue=true)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or sets the subtitle format.
        /// </summary>
        /// <value>Gets or sets the subtitle format.</value>
        [DataMember(Name="Format", EmitDefaultValue=true)]
        public string Format { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the subtitle is forced.
        /// </summary>
        /// <value>Gets or sets a value indicating whether the subtitle is forced.</value>
        [DataMember(Name="IsForced", EmitDefaultValue=true)]
        public bool IsForced { get; set; }

        /// <summary>
        /// Gets or sets the subtitle data.
        /// </summary>
        /// <value>Gets or sets the subtitle data.</value>
        [DataMember(Name="Data", EmitDefaultValue=true)]
        public string Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UploadSubtitleDto {\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  IsForced: ").Append(IsForced).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UploadSubtitleDto);
        }

        /// <summary>
        /// Returns true if UploadSubtitleDto instances are equal
        /// </summary>
        /// <param name="input">Instance of UploadSubtitleDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadSubtitleDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.IsForced == input.IsForced ||
                    (this.IsForced != null &&
                    this.IsForced.Equals(input.IsForced))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.IsForced != null)
                    hashCode = hashCode * 59 + this.IsForced.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
