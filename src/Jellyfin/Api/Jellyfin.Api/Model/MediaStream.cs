/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Class MediaStream.
    /// </summary>
    [DataContract]
    public partial class MediaStream :  IEquatable<MediaStream>, IValidatableObject
    {
        /// <summary>
        /// Gets or sets the type.
        /// </summary>
        /// <value>Gets or sets the type.</value>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public MediaStreamType? Type { get; set; }
        /// <summary>
        /// Gets or sets the method.
        /// </summary>
        /// <value>Gets or sets the method.</value>
        [DataMember(Name="DeliveryMethod", EmitDefaultValue=true)]
        public SubtitleDeliveryMethod? DeliveryMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaStream" /> class.
        /// </summary>
        /// <param name="codec">Gets or sets the codec..</param>
        /// <param name="codecTag">Gets or sets the codec tag..</param>
        /// <param name="language">Gets or sets the language..</param>
        /// <param name="colorRange">Gets or sets the color range..</param>
        /// <param name="colorSpace">Gets or sets the color space..</param>
        /// <param name="colorTransfer">Gets or sets the color transfer..</param>
        /// <param name="colorPrimaries">Gets or sets the color primaries..</param>
        /// <param name="comment">Gets or sets the comment..</param>
        /// <param name="timeBase">Gets or sets the time base..</param>
        /// <param name="codecTimeBase">Gets or sets the codec time base..</param>
        /// <param name="title">Gets or sets the title..</param>
        /// <param name="localizedUndefined">localizedUndefined.</param>
        /// <param name="localizedDefault">localizedDefault.</param>
        /// <param name="localizedForced">localizedForced.</param>
        /// <param name="nalLengthSize">nalLengthSize.</param>
        /// <param name="isInterlaced">Gets or sets a value indicating whether this instance is interlaced..</param>
        /// <param name="isAVC">isAVC.</param>
        /// <param name="channelLayout">Gets or sets the channel layout..</param>
        /// <param name="bitRate">Gets or sets the bit rate..</param>
        /// <param name="bitDepth">Gets or sets the bit depth..</param>
        /// <param name="refFrames">Gets or sets the reference frames..</param>
        /// <param name="packetLength">Gets or sets the length of the packet..</param>
        /// <param name="channels">Gets or sets the channels..</param>
        /// <param name="sampleRate">Gets or sets the sample rate..</param>
        /// <param name="isDefault">Gets or sets a value indicating whether this instance is default..</param>
        /// <param name="isForced">Gets or sets a value indicating whether this instance is forced..</param>
        /// <param name="height">Gets or sets the height..</param>
        /// <param name="width">Gets or sets the width..</param>
        /// <param name="averageFrameRate">Gets or sets the average frame rate..</param>
        /// <param name="realFrameRate">Gets or sets the real frame rate..</param>
        /// <param name="profile">Gets or sets the profile..</param>
        /// <param name="type">Gets or sets the type..</param>
        /// <param name="aspectRatio">Gets or sets the aspect ratio..</param>
        /// <param name="index">Gets or sets the index..</param>
        /// <param name="score">Gets or sets the score..</param>
        /// <param name="isExternal">Gets or sets a value indicating whether this instance is external..</param>
        /// <param name="deliveryMethod">Gets or sets the method..</param>
        /// <param name="deliveryUrl">Gets or sets the delivery URL..</param>
        /// <param name="isExternalUrl">Gets or sets a value indicating whether this instance is external URL..</param>
        /// <param name="supportsExternalStream">Gets or sets a value indicating whether [supports external stream]..</param>
        /// <param name="path">Gets or sets the filename..</param>
        /// <param name="pixelFormat">Gets or sets the pixel format..</param>
        /// <param name="level">Gets or sets the level..</param>
        /// <param name="isAnamorphic">Gets a value indicating whether this instance is anamorphic..</param>
        public MediaStream(string codec = default(string), string codecTag = default(string), string language = default(string), string colorRange = default(string), string colorSpace = default(string), string colorTransfer = default(string), string colorPrimaries = default(string), string comment = default(string), string timeBase = default(string), string codecTimeBase = default(string), string title = default(string), string localizedUndefined = default(string), string localizedDefault = default(string), string localizedForced = default(string), string nalLengthSize = default(string), bool isInterlaced = default(bool), bool? isAVC = default(bool?), string channelLayout = default(string), int? bitRate = default(int?), int? bitDepth = default(int?), int? refFrames = default(int?), int? packetLength = default(int?), int? channels = default(int?), int? sampleRate = default(int?), bool isDefault = default(bool), bool isForced = default(bool), int? height = default(int?), int? width = default(int?), float? averageFrameRate = default(float?), float? realFrameRate = default(float?), string profile = default(string), MediaStreamType? type = default(MediaStreamType?), string aspectRatio = default(string), int index = default(int), int? score = default(int?), bool isExternal = default(bool), SubtitleDeliveryMethod? deliveryMethod = default(SubtitleDeliveryMethod?), string deliveryUrl = default(string), bool? isExternalUrl = default(bool?), bool supportsExternalStream = default(bool), string path = default(string), string pixelFormat = default(string), double? level = default(double?), bool? isAnamorphic = default(bool?))
        {
            this.Codec = codec;
            this.CodecTag = codecTag;
            this.Language = language;
            this.ColorRange = colorRange;
            this.ColorSpace = colorSpace;
            this.ColorTransfer = colorTransfer;
            this.ColorPrimaries = colorPrimaries;
            this.Comment = comment;
            this.TimeBase = timeBase;
            this.CodecTimeBase = codecTimeBase;
            this.Title = title;
            this.LocalizedUndefined = localizedUndefined;
            this.LocalizedDefault = localizedDefault;
            this.LocalizedForced = localizedForced;
            this.NalLengthSize = nalLengthSize;
            this.IsAVC = isAVC;
            this.ChannelLayout = channelLayout;
            this.BitRate = bitRate;
            this.BitDepth = bitDepth;
            this.RefFrames = refFrames;
            this.PacketLength = packetLength;
            this.Channels = channels;
            this.SampleRate = sampleRate;
            this.Height = height;
            this.Width = width;
            this.AverageFrameRate = averageFrameRate;
            this.RealFrameRate = realFrameRate;
            this.Profile = profile;
            this.AspectRatio = aspectRatio;
            this.Score = score;
            this.DeliveryMethod = deliveryMethod;
            this.DeliveryUrl = deliveryUrl;
            this.IsExternalUrl = isExternalUrl;
            this.Path = path;
            this.PixelFormat = pixelFormat;
            this.Level = level;
            this.IsAnamorphic = isAnamorphic;
            this.Codec = codec;
            this.CodecTag = codecTag;
            this.Language = language;
            this.ColorRange = colorRange;
            this.ColorSpace = colorSpace;
            this.ColorTransfer = colorTransfer;
            this.ColorPrimaries = colorPrimaries;
            this.Comment = comment;
            this.TimeBase = timeBase;
            this.CodecTimeBase = codecTimeBase;
            this.Title = title;
            this.LocalizedUndefined = localizedUndefined;
            this.LocalizedDefault = localizedDefault;
            this.LocalizedForced = localizedForced;
            this.NalLengthSize = nalLengthSize;
            this.IsInterlaced = isInterlaced;
            this.IsAVC = isAVC;
            this.ChannelLayout = channelLayout;
            this.BitRate = bitRate;
            this.BitDepth = bitDepth;
            this.RefFrames = refFrames;
            this.PacketLength = packetLength;
            this.Channels = channels;
            this.SampleRate = sampleRate;
            this.IsDefault = isDefault;
            this.IsForced = isForced;
            this.Height = height;
            this.Width = width;
            this.AverageFrameRate = averageFrameRate;
            this.RealFrameRate = realFrameRate;
            this.Profile = profile;
            this.Type = type;
            this.AspectRatio = aspectRatio;
            this.Index = index;
            this.Score = score;
            this.IsExternal = isExternal;
            this.DeliveryMethod = deliveryMethod;
            this.DeliveryUrl = deliveryUrl;
            this.IsExternalUrl = isExternalUrl;
            this.SupportsExternalStream = supportsExternalStream;
            this.Path = path;
            this.PixelFormat = pixelFormat;
            this.Level = level;
            this.IsAnamorphic = isAnamorphic;
        }

        /// <summary>
        /// Gets or sets the codec.
        /// </summary>
        /// <value>Gets or sets the codec.</value>
        [DataMember(Name="Codec", EmitDefaultValue=true)]
        public string Codec { get; set; }

        /// <summary>
        /// Gets or sets the codec tag.
        /// </summary>
        /// <value>Gets or sets the codec tag.</value>
        [DataMember(Name="CodecTag", EmitDefaultValue=true)]
        public string CodecTag { get; set; }

        /// <summary>
        /// Gets or sets the language.
        /// </summary>
        /// <value>Gets or sets the language.</value>
        [DataMember(Name="Language", EmitDefaultValue=true)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or sets the color range.
        /// </summary>
        /// <value>Gets or sets the color range.</value>
        [DataMember(Name="ColorRange", EmitDefaultValue=true)]
        public string ColorRange { get; set; }

        /// <summary>
        /// Gets or sets the color space.
        /// </summary>
        /// <value>Gets or sets the color space.</value>
        [DataMember(Name="ColorSpace", EmitDefaultValue=true)]
        public string ColorSpace { get; set; }

        /// <summary>
        /// Gets or sets the color transfer.
        /// </summary>
        /// <value>Gets or sets the color transfer.</value>
        [DataMember(Name="ColorTransfer", EmitDefaultValue=true)]
        public string ColorTransfer { get; set; }

        /// <summary>
        /// Gets or sets the color primaries.
        /// </summary>
        /// <value>Gets or sets the color primaries.</value>
        [DataMember(Name="ColorPrimaries", EmitDefaultValue=true)]
        public string ColorPrimaries { get; set; }

        /// <summary>
        /// Gets or sets the comment.
        /// </summary>
        /// <value>Gets or sets the comment.</value>
        [DataMember(Name="Comment", EmitDefaultValue=true)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or sets the time base.
        /// </summary>
        /// <value>Gets or sets the time base.</value>
        [DataMember(Name="TimeBase", EmitDefaultValue=true)]
        public string TimeBase { get; set; }

        /// <summary>
        /// Gets or sets the codec time base.
        /// </summary>
        /// <value>Gets or sets the codec time base.</value>
        [DataMember(Name="CodecTimeBase", EmitDefaultValue=true)]
        public string CodecTimeBase { get; set; }

        /// <summary>
        /// Gets or sets the title.
        /// </summary>
        /// <value>Gets or sets the title.</value>
        [DataMember(Name="Title", EmitDefaultValue=true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the video range.
        /// </summary>
        /// <value>Gets or sets the video range.</value>
        [DataMember(Name="VideoRange", EmitDefaultValue=true)]
        public string VideoRange { get; private set; }

        /// <summary>
        /// Gets or Sets LocalizedUndefined
        /// </summary>
        [DataMember(Name="localizedUndefined", EmitDefaultValue=true)]
        public string LocalizedUndefined { get; set; }

        /// <summary>
        /// Gets or Sets LocalizedDefault
        /// </summary>
        [DataMember(Name="localizedDefault", EmitDefaultValue=true)]
        public string LocalizedDefault { get; set; }

        /// <summary>
        /// Gets or Sets LocalizedForced
        /// </summary>
        [DataMember(Name="localizedForced", EmitDefaultValue=true)]
        public string LocalizedForced { get; set; }

        /// <summary>
        /// Gets or Sets DisplayTitle
        /// </summary>
        [DataMember(Name="DisplayTitle", EmitDefaultValue=true)]
        public string DisplayTitle { get; private set; }

        /// <summary>
        /// Gets or Sets NalLengthSize
        /// </summary>
        [DataMember(Name="NalLengthSize", EmitDefaultValue=true)]
        public string NalLengthSize { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is interlaced.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is interlaced.</value>
        [DataMember(Name="IsInterlaced", EmitDefaultValue=false)]
        public bool IsInterlaced { get; set; }

        /// <summary>
        /// Gets or Sets IsAVC
        /// </summary>
        [DataMember(Name="IsAVC", EmitDefaultValue=true)]
        public bool? IsAVC { get; set; }

        /// <summary>
        /// Gets or sets the channel layout.
        /// </summary>
        /// <value>Gets or sets the channel layout.</value>
        [DataMember(Name="ChannelLayout", EmitDefaultValue=true)]
        public string ChannelLayout { get; set; }

        /// <summary>
        /// Gets or sets the bit rate.
        /// </summary>
        /// <value>Gets or sets the bit rate.</value>
        [DataMember(Name="BitRate", EmitDefaultValue=true)]
        public int? BitRate { get; set; }

        /// <summary>
        /// Gets or sets the bit depth.
        /// </summary>
        /// <value>Gets or sets the bit depth.</value>
        [DataMember(Name="BitDepth", EmitDefaultValue=true)]
        public int? BitDepth { get; set; }

        /// <summary>
        /// Gets or sets the reference frames.
        /// </summary>
        /// <value>Gets or sets the reference frames.</value>
        [DataMember(Name="RefFrames", EmitDefaultValue=true)]
        public int? RefFrames { get; set; }

        /// <summary>
        /// Gets or sets the length of the packet.
        /// </summary>
        /// <value>Gets or sets the length of the packet.</value>
        [DataMember(Name="PacketLength", EmitDefaultValue=true)]
        public int? PacketLength { get; set; }

        /// <summary>
        /// Gets or sets the channels.
        /// </summary>
        /// <value>Gets or sets the channels.</value>
        [DataMember(Name="Channels", EmitDefaultValue=true)]
        public int? Channels { get; set; }

        /// <summary>
        /// Gets or sets the sample rate.
        /// </summary>
        /// <value>Gets or sets the sample rate.</value>
        [DataMember(Name="SampleRate", EmitDefaultValue=true)]
        public int? SampleRate { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is default.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is default.</value>
        [DataMember(Name="IsDefault", EmitDefaultValue=false)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is forced.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is forced.</value>
        [DataMember(Name="IsForced", EmitDefaultValue=false)]
        public bool IsForced { get; set; }

        /// <summary>
        /// Gets or sets the height.
        /// </summary>
        /// <value>Gets or sets the height.</value>
        [DataMember(Name="Height", EmitDefaultValue=true)]
        public int? Height { get; set; }

        /// <summary>
        /// Gets or sets the width.
        /// </summary>
        /// <value>Gets or sets the width.</value>
        [DataMember(Name="Width", EmitDefaultValue=true)]
        public int? Width { get; set; }

        /// <summary>
        /// Gets or sets the average frame rate.
        /// </summary>
        /// <value>Gets or sets the average frame rate.</value>
        [DataMember(Name="AverageFrameRate", EmitDefaultValue=true)]
        public float? AverageFrameRate { get; set; }

        /// <summary>
        /// Gets or sets the real frame rate.
        /// </summary>
        /// <value>Gets or sets the real frame rate.</value>
        [DataMember(Name="RealFrameRate", EmitDefaultValue=true)]
        public float? RealFrameRate { get; set; }

        /// <summary>
        /// Gets or sets the profile.
        /// </summary>
        /// <value>Gets or sets the profile.</value>
        [DataMember(Name="Profile", EmitDefaultValue=true)]
        public string Profile { get; set; }


        /// <summary>
        /// Gets or sets the aspect ratio.
        /// </summary>
        /// <value>Gets or sets the aspect ratio.</value>
        [DataMember(Name="AspectRatio", EmitDefaultValue=true)]
        public string AspectRatio { get; set; }

        /// <summary>
        /// Gets or sets the index.
        /// </summary>
        /// <value>Gets or sets the index.</value>
        [DataMember(Name="Index", EmitDefaultValue=false)]
        public int Index { get; set; }

        /// <summary>
        /// Gets or sets the score.
        /// </summary>
        /// <value>Gets or sets the score.</value>
        [DataMember(Name="Score", EmitDefaultValue=true)]
        public int? Score { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is external.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is external.</value>
        [DataMember(Name="IsExternal", EmitDefaultValue=false)]
        public bool IsExternal { get; set; }


        /// <summary>
        /// Gets or sets the delivery URL.
        /// </summary>
        /// <value>Gets or sets the delivery URL.</value>
        [DataMember(Name="DeliveryUrl", EmitDefaultValue=true)]
        public string DeliveryUrl { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is external URL.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is external URL.</value>
        [DataMember(Name="IsExternalUrl", EmitDefaultValue=true)]
        public bool? IsExternalUrl { get; set; }

        /// <summary>
        /// Gets or Sets IsTextSubtitleStream
        /// </summary>
        [DataMember(Name="IsTextSubtitleStream", EmitDefaultValue=false)]
        public bool IsTextSubtitleStream { get; private set; }

        /// <summary>
        /// Gets or sets a value indicating whether [supports external stream].
        /// </summary>
        /// <value>Gets or sets a value indicating whether [supports external stream].</value>
        [DataMember(Name="SupportsExternalStream", EmitDefaultValue=false)]
        public bool SupportsExternalStream { get; set; }

        /// <summary>
        /// Gets or sets the filename.
        /// </summary>
        /// <value>Gets or sets the filename.</value>
        [DataMember(Name="Path", EmitDefaultValue=true)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or sets the pixel format.
        /// </summary>
        /// <value>Gets or sets the pixel format.</value>
        [DataMember(Name="PixelFormat", EmitDefaultValue=true)]
        public string PixelFormat { get; set; }

        /// <summary>
        /// Gets or sets the level.
        /// </summary>
        /// <value>Gets or sets the level.</value>
        [DataMember(Name="Level", EmitDefaultValue=true)]
        public double? Level { get; set; }

        /// <summary>
        /// Gets a value indicating whether this instance is anamorphic.
        /// </summary>
        /// <value>Gets a value indicating whether this instance is anamorphic.</value>
        [DataMember(Name="IsAnamorphic", EmitDefaultValue=true)]
        public bool? IsAnamorphic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaStream {\n");
            sb.Append("  Codec: ").Append(Codec).Append("\n");
            sb.Append("  CodecTag: ").Append(CodecTag).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  ColorRange: ").Append(ColorRange).Append("\n");
            sb.Append("  ColorSpace: ").Append(ColorSpace).Append("\n");
            sb.Append("  ColorTransfer: ").Append(ColorTransfer).Append("\n");
            sb.Append("  ColorPrimaries: ").Append(ColorPrimaries).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  TimeBase: ").Append(TimeBase).Append("\n");
            sb.Append("  CodecTimeBase: ").Append(CodecTimeBase).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  VideoRange: ").Append(VideoRange).Append("\n");
            sb.Append("  LocalizedUndefined: ").Append(LocalizedUndefined).Append("\n");
            sb.Append("  LocalizedDefault: ").Append(LocalizedDefault).Append("\n");
            sb.Append("  LocalizedForced: ").Append(LocalizedForced).Append("\n");
            sb.Append("  DisplayTitle: ").Append(DisplayTitle).Append("\n");
            sb.Append("  NalLengthSize: ").Append(NalLengthSize).Append("\n");
            sb.Append("  IsInterlaced: ").Append(IsInterlaced).Append("\n");
            sb.Append("  IsAVC: ").Append(IsAVC).Append("\n");
            sb.Append("  ChannelLayout: ").Append(ChannelLayout).Append("\n");
            sb.Append("  BitRate: ").Append(BitRate).Append("\n");
            sb.Append("  BitDepth: ").Append(BitDepth).Append("\n");
            sb.Append("  RefFrames: ").Append(RefFrames).Append("\n");
            sb.Append("  PacketLength: ").Append(PacketLength).Append("\n");
            sb.Append("  Channels: ").Append(Channels).Append("\n");
            sb.Append("  SampleRate: ").Append(SampleRate).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  IsForced: ").Append(IsForced).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  AverageFrameRate: ").Append(AverageFrameRate).Append("\n");
            sb.Append("  RealFrameRate: ").Append(RealFrameRate).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AspectRatio: ").Append(AspectRatio).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  IsExternal: ").Append(IsExternal).Append("\n");
            sb.Append("  DeliveryMethod: ").Append(DeliveryMethod).Append("\n");
            sb.Append("  DeliveryUrl: ").Append(DeliveryUrl).Append("\n");
            sb.Append("  IsExternalUrl: ").Append(IsExternalUrl).Append("\n");
            sb.Append("  IsTextSubtitleStream: ").Append(IsTextSubtitleStream).Append("\n");
            sb.Append("  SupportsExternalStream: ").Append(SupportsExternalStream).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  PixelFormat: ").Append(PixelFormat).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  IsAnamorphic: ").Append(IsAnamorphic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediaStream);
        }

        /// <summary>
        /// Returns true if MediaStream instances are equal
        /// </summary>
        /// <param name="input">Instance of MediaStream to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaStream input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Codec == input.Codec ||
                    (this.Codec != null &&
                    this.Codec.Equals(input.Codec))
                ) && 
                (
                    this.CodecTag == input.CodecTag ||
                    (this.CodecTag != null &&
                    this.CodecTag.Equals(input.CodecTag))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.ColorRange == input.ColorRange ||
                    (this.ColorRange != null &&
                    this.ColorRange.Equals(input.ColorRange))
                ) && 
                (
                    this.ColorSpace == input.ColorSpace ||
                    (this.ColorSpace != null &&
                    this.ColorSpace.Equals(input.ColorSpace))
                ) && 
                (
                    this.ColorTransfer == input.ColorTransfer ||
                    (this.ColorTransfer != null &&
                    this.ColorTransfer.Equals(input.ColorTransfer))
                ) && 
                (
                    this.ColorPrimaries == input.ColorPrimaries ||
                    (this.ColorPrimaries != null &&
                    this.ColorPrimaries.Equals(input.ColorPrimaries))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.TimeBase == input.TimeBase ||
                    (this.TimeBase != null &&
                    this.TimeBase.Equals(input.TimeBase))
                ) && 
                (
                    this.CodecTimeBase == input.CodecTimeBase ||
                    (this.CodecTimeBase != null &&
                    this.CodecTimeBase.Equals(input.CodecTimeBase))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.VideoRange == input.VideoRange ||
                    (this.VideoRange != null &&
                    this.VideoRange.Equals(input.VideoRange))
                ) && 
                (
                    this.LocalizedUndefined == input.LocalizedUndefined ||
                    (this.LocalizedUndefined != null &&
                    this.LocalizedUndefined.Equals(input.LocalizedUndefined))
                ) && 
                (
                    this.LocalizedDefault == input.LocalizedDefault ||
                    (this.LocalizedDefault != null &&
                    this.LocalizedDefault.Equals(input.LocalizedDefault))
                ) && 
                (
                    this.LocalizedForced == input.LocalizedForced ||
                    (this.LocalizedForced != null &&
                    this.LocalizedForced.Equals(input.LocalizedForced))
                ) && 
                (
                    this.DisplayTitle == input.DisplayTitle ||
                    (this.DisplayTitle != null &&
                    this.DisplayTitle.Equals(input.DisplayTitle))
                ) && 
                (
                    this.NalLengthSize == input.NalLengthSize ||
                    (this.NalLengthSize != null &&
                    this.NalLengthSize.Equals(input.NalLengthSize))
                ) && 
                (
                    this.IsInterlaced == input.IsInterlaced ||
                    (this.IsInterlaced != null &&
                    this.IsInterlaced.Equals(input.IsInterlaced))
                ) && 
                (
                    this.IsAVC == input.IsAVC ||
                    (this.IsAVC != null &&
                    this.IsAVC.Equals(input.IsAVC))
                ) && 
                (
                    this.ChannelLayout == input.ChannelLayout ||
                    (this.ChannelLayout != null &&
                    this.ChannelLayout.Equals(input.ChannelLayout))
                ) && 
                (
                    this.BitRate == input.BitRate ||
                    (this.BitRate != null &&
                    this.BitRate.Equals(input.BitRate))
                ) && 
                (
                    this.BitDepth == input.BitDepth ||
                    (this.BitDepth != null &&
                    this.BitDepth.Equals(input.BitDepth))
                ) && 
                (
                    this.RefFrames == input.RefFrames ||
                    (this.RefFrames != null &&
                    this.RefFrames.Equals(input.RefFrames))
                ) && 
                (
                    this.PacketLength == input.PacketLength ||
                    (this.PacketLength != null &&
                    this.PacketLength.Equals(input.PacketLength))
                ) && 
                (
                    this.Channels == input.Channels ||
                    (this.Channels != null &&
                    this.Channels.Equals(input.Channels))
                ) && 
                (
                    this.SampleRate == input.SampleRate ||
                    (this.SampleRate != null &&
                    this.SampleRate.Equals(input.SampleRate))
                ) && 
                (
                    this.IsDefault == input.IsDefault ||
                    (this.IsDefault != null &&
                    this.IsDefault.Equals(input.IsDefault))
                ) && 
                (
                    this.IsForced == input.IsForced ||
                    (this.IsForced != null &&
                    this.IsForced.Equals(input.IsForced))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.AverageFrameRate == input.AverageFrameRate ||
                    (this.AverageFrameRate != null &&
                    this.AverageFrameRate.Equals(input.AverageFrameRate))
                ) && 
                (
                    this.RealFrameRate == input.RealFrameRate ||
                    (this.RealFrameRate != null &&
                    this.RealFrameRate.Equals(input.RealFrameRate))
                ) && 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.AspectRatio == input.AspectRatio ||
                    (this.AspectRatio != null &&
                    this.AspectRatio.Equals(input.AspectRatio))
                ) && 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.IsExternal == input.IsExternal ||
                    (this.IsExternal != null &&
                    this.IsExternal.Equals(input.IsExternal))
                ) && 
                (
                    this.DeliveryMethod == input.DeliveryMethod ||
                    (this.DeliveryMethod != null &&
                    this.DeliveryMethod.Equals(input.DeliveryMethod))
                ) && 
                (
                    this.DeliveryUrl == input.DeliveryUrl ||
                    (this.DeliveryUrl != null &&
                    this.DeliveryUrl.Equals(input.DeliveryUrl))
                ) && 
                (
                    this.IsExternalUrl == input.IsExternalUrl ||
                    (this.IsExternalUrl != null &&
                    this.IsExternalUrl.Equals(input.IsExternalUrl))
                ) && 
                (
                    this.IsTextSubtitleStream == input.IsTextSubtitleStream ||
                    (this.IsTextSubtitleStream != null &&
                    this.IsTextSubtitleStream.Equals(input.IsTextSubtitleStream))
                ) && 
                (
                    this.SupportsExternalStream == input.SupportsExternalStream ||
                    (this.SupportsExternalStream != null &&
                    this.SupportsExternalStream.Equals(input.SupportsExternalStream))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.PixelFormat == input.PixelFormat ||
                    (this.PixelFormat != null &&
                    this.PixelFormat.Equals(input.PixelFormat))
                ) && 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                ) && 
                (
                    this.IsAnamorphic == input.IsAnamorphic ||
                    (this.IsAnamorphic != null &&
                    this.IsAnamorphic.Equals(input.IsAnamorphic))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Codec != null)
                    hashCode = hashCode * 59 + this.Codec.GetHashCode();
                if (this.CodecTag != null)
                    hashCode = hashCode * 59 + this.CodecTag.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.ColorRange != null)
                    hashCode = hashCode * 59 + this.ColorRange.GetHashCode();
                if (this.ColorSpace != null)
                    hashCode = hashCode * 59 + this.ColorSpace.GetHashCode();
                if (this.ColorTransfer != null)
                    hashCode = hashCode * 59 + this.ColorTransfer.GetHashCode();
                if (this.ColorPrimaries != null)
                    hashCode = hashCode * 59 + this.ColorPrimaries.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.TimeBase != null)
                    hashCode = hashCode * 59 + this.TimeBase.GetHashCode();
                if (this.CodecTimeBase != null)
                    hashCode = hashCode * 59 + this.CodecTimeBase.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.VideoRange != null)
                    hashCode = hashCode * 59 + this.VideoRange.GetHashCode();
                if (this.LocalizedUndefined != null)
                    hashCode = hashCode * 59 + this.LocalizedUndefined.GetHashCode();
                if (this.LocalizedDefault != null)
                    hashCode = hashCode * 59 + this.LocalizedDefault.GetHashCode();
                if (this.LocalizedForced != null)
                    hashCode = hashCode * 59 + this.LocalizedForced.GetHashCode();
                if (this.DisplayTitle != null)
                    hashCode = hashCode * 59 + this.DisplayTitle.GetHashCode();
                if (this.NalLengthSize != null)
                    hashCode = hashCode * 59 + this.NalLengthSize.GetHashCode();
                if (this.IsInterlaced != null)
                    hashCode = hashCode * 59 + this.IsInterlaced.GetHashCode();
                if (this.IsAVC != null)
                    hashCode = hashCode * 59 + this.IsAVC.GetHashCode();
                if (this.ChannelLayout != null)
                    hashCode = hashCode * 59 + this.ChannelLayout.GetHashCode();
                if (this.BitRate != null)
                    hashCode = hashCode * 59 + this.BitRate.GetHashCode();
                if (this.BitDepth != null)
                    hashCode = hashCode * 59 + this.BitDepth.GetHashCode();
                if (this.RefFrames != null)
                    hashCode = hashCode * 59 + this.RefFrames.GetHashCode();
                if (this.PacketLength != null)
                    hashCode = hashCode * 59 + this.PacketLength.GetHashCode();
                if (this.Channels != null)
                    hashCode = hashCode * 59 + this.Channels.GetHashCode();
                if (this.SampleRate != null)
                    hashCode = hashCode * 59 + this.SampleRate.GetHashCode();
                if (this.IsDefault != null)
                    hashCode = hashCode * 59 + this.IsDefault.GetHashCode();
                if (this.IsForced != null)
                    hashCode = hashCode * 59 + this.IsForced.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.AverageFrameRate != null)
                    hashCode = hashCode * 59 + this.AverageFrameRate.GetHashCode();
                if (this.RealFrameRate != null)
                    hashCode = hashCode * 59 + this.RealFrameRate.GetHashCode();
                if (this.Profile != null)
                    hashCode = hashCode * 59 + this.Profile.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.AspectRatio != null)
                    hashCode = hashCode * 59 + this.AspectRatio.GetHashCode();
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.IsExternal != null)
                    hashCode = hashCode * 59 + this.IsExternal.GetHashCode();
                if (this.DeliveryMethod != null)
                    hashCode = hashCode * 59 + this.DeliveryMethod.GetHashCode();
                if (this.DeliveryUrl != null)
                    hashCode = hashCode * 59 + this.DeliveryUrl.GetHashCode();
                if (this.IsExternalUrl != null)
                    hashCode = hashCode * 59 + this.IsExternalUrl.GetHashCode();
                if (this.IsTextSubtitleStream != null)
                    hashCode = hashCode * 59 + this.IsTextSubtitleStream.GetHashCode();
                if (this.SupportsExternalStream != null)
                    hashCode = hashCode * 59 + this.SupportsExternalStream.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.PixelFormat != null)
                    hashCode = hashCode * 59 + this.PixelFormat.GetHashCode();
                if (this.Level != null)
                    hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.IsAnamorphic != null)
                    hashCode = hashCode * 59 + this.IsAnamorphic.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
