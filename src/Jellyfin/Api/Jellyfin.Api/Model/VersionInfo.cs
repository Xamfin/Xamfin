/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Defines the MediaBrowser.Model.Updates.VersionInfo class.
    /// </summary>
    [DataContract]
    public partial class VersionInfo :  IEquatable<VersionInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionInfo" /> class.
        /// </summary>
        /// <param name="version">Gets or sets the version..</param>
        /// <param name="changelog">Gets or sets the changelog for this version..</param>
        /// <param name="targetAbi">Gets or sets the ABI that this version was built against..</param>
        /// <param name="sourceUrl">Gets or sets the source URL..</param>
        /// <param name="checksum">Gets or sets a checksum for the binary..</param>
        /// <param name="timestamp">Gets or sets a timestamp of when the binary was built..</param>
        /// <param name="repositoryName">Gets or sets the repository name..</param>
        /// <param name="repositoryUrl">Gets or sets the repository url..</param>
        public VersionInfo(string version = default(string), string changelog = default(string), string targetAbi = default(string), string sourceUrl = default(string), string checksum = default(string), string timestamp = default(string), string repositoryName = default(string), string repositoryUrl = default(string))
        {
            this.Version = version;
            this.Changelog = changelog;
            this.TargetAbi = targetAbi;
            this.SourceUrl = sourceUrl;
            this.Checksum = checksum;
            this.Timestamp = timestamp;
            this.RepositoryName = repositoryName;
            this.RepositoryUrl = repositoryUrl;
            this.Version = version;
            this.Changelog = changelog;
            this.TargetAbi = targetAbi;
            this.SourceUrl = sourceUrl;
            this.Checksum = checksum;
            this.Timestamp = timestamp;
            this.RepositoryName = repositoryName;
            this.RepositoryUrl = repositoryUrl;
        }

        /// <summary>
        /// Gets or sets the version.
        /// </summary>
        /// <value>Gets or sets the version.</value>
        [DataMember(Name="version", EmitDefaultValue=true)]
        public string Version { get; set; }

        /// <summary>
        /// Gets the version as a System.Version.
        /// </summary>
        /// <value>Gets the version as a System.Version.</value>
        [DataMember(Name="VersionNumber", EmitDefaultValue=true)]
        public Version VersionNumber { get; private set; }

        /// <summary>
        /// Gets or sets the changelog for this version.
        /// </summary>
        /// <value>Gets or sets the changelog for this version.</value>
        [DataMember(Name="changelog", EmitDefaultValue=true)]
        public string Changelog { get; set; }

        /// <summary>
        /// Gets or sets the ABI that this version was built against.
        /// </summary>
        /// <value>Gets or sets the ABI that this version was built against.</value>
        [DataMember(Name="targetAbi", EmitDefaultValue=true)]
        public string TargetAbi { get; set; }

        /// <summary>
        /// Gets or sets the source URL.
        /// </summary>
        /// <value>Gets or sets the source URL.</value>
        [DataMember(Name="sourceUrl", EmitDefaultValue=true)]
        public string SourceUrl { get; set; }

        /// <summary>
        /// Gets or sets a checksum for the binary.
        /// </summary>
        /// <value>Gets or sets a checksum for the binary.</value>
        [DataMember(Name="checksum", EmitDefaultValue=true)]
        public string Checksum { get; set; }

        /// <summary>
        /// Gets or sets a timestamp of when the binary was built.
        /// </summary>
        /// <value>Gets or sets a timestamp of when the binary was built.</value>
        [DataMember(Name="timestamp", EmitDefaultValue=true)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Gets or sets the repository name.
        /// </summary>
        /// <value>Gets or sets the repository name.</value>
        [DataMember(Name="repositoryName", EmitDefaultValue=true)]
        public string RepositoryName { get; set; }

        /// <summary>
        /// Gets or sets the repository url.
        /// </summary>
        /// <value>Gets or sets the repository url.</value>
        [DataMember(Name="repositoryUrl", EmitDefaultValue=true)]
        public string RepositoryUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VersionInfo {\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  VersionNumber: ").Append(VersionNumber).Append("\n");
            sb.Append("  Changelog: ").Append(Changelog).Append("\n");
            sb.Append("  TargetAbi: ").Append(TargetAbi).Append("\n");
            sb.Append("  SourceUrl: ").Append(SourceUrl).Append("\n");
            sb.Append("  Checksum: ").Append(Checksum).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  RepositoryName: ").Append(RepositoryName).Append("\n");
            sb.Append("  RepositoryUrl: ").Append(RepositoryUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VersionInfo);
        }

        /// <summary>
        /// Returns true if VersionInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of VersionInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VersionInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.VersionNumber == input.VersionNumber ||
                    (this.VersionNumber != null &&
                    this.VersionNumber.Equals(input.VersionNumber))
                ) && 
                (
                    this.Changelog == input.Changelog ||
                    (this.Changelog != null &&
                    this.Changelog.Equals(input.Changelog))
                ) && 
                (
                    this.TargetAbi == input.TargetAbi ||
                    (this.TargetAbi != null &&
                    this.TargetAbi.Equals(input.TargetAbi))
                ) && 
                (
                    this.SourceUrl == input.SourceUrl ||
                    (this.SourceUrl != null &&
                    this.SourceUrl.Equals(input.SourceUrl))
                ) && 
                (
                    this.Checksum == input.Checksum ||
                    (this.Checksum != null &&
                    this.Checksum.Equals(input.Checksum))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.RepositoryName == input.RepositoryName ||
                    (this.RepositoryName != null &&
                    this.RepositoryName.Equals(input.RepositoryName))
                ) && 
                (
                    this.RepositoryUrl == input.RepositoryUrl ||
                    (this.RepositoryUrl != null &&
                    this.RepositoryUrl.Equals(input.RepositoryUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.VersionNumber != null)
                    hashCode = hashCode * 59 + this.VersionNumber.GetHashCode();
                if (this.Changelog != null)
                    hashCode = hashCode * 59 + this.Changelog.GetHashCode();
                if (this.TargetAbi != null)
                    hashCode = hashCode * 59 + this.TargetAbi.GetHashCode();
                if (this.SourceUrl != null)
                    hashCode = hashCode * 59 + this.SourceUrl.GetHashCode();
                if (this.Checksum != null)
                    hashCode = hashCode * 59 + this.Checksum.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.RepositoryName != null)
                    hashCode = hashCode * 59 + this.RepositoryName.GetHashCode();
                if (this.RepositoryUrl != null)
                    hashCode = hashCode * 59 + this.RepositoryUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
