/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// A list of notifications with the total record count for pagination.
    /// </summary>
    [DataContract]
    public partial class NotificationResultDto :  IEquatable<NotificationResultDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationResultDto" /> class.
        /// </summary>
        /// <param name="notifications">Gets or sets the current page of notifications..</param>
        /// <param name="totalRecordCount">Gets or sets the total number of notifications..</param>
        public NotificationResultDto(List<NotificationDto> notifications = default(List<NotificationDto>), int totalRecordCount = default(int))
        {
            this.Notifications = notifications;
            this.Notifications = notifications;
            this.TotalRecordCount = totalRecordCount;
        }

        /// <summary>
        /// Gets or sets the current page of notifications.
        /// </summary>
        /// <value>Gets or sets the current page of notifications.</value>
        [DataMember(Name="Notifications", EmitDefaultValue=true)]
        public List<NotificationDto> Notifications { get; set; }

        /// <summary>
        /// Gets or sets the total number of notifications.
        /// </summary>
        /// <value>Gets or sets the total number of notifications.</value>
        [DataMember(Name="TotalRecordCount", EmitDefaultValue=false)]
        public int TotalRecordCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationResultDto {\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  TotalRecordCount: ").Append(TotalRecordCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotificationResultDto);
        }

        /// <summary>
        /// Returns true if NotificationResultDto instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificationResultDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationResultDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Notifications == input.Notifications ||
                    this.Notifications != null &&
                    input.Notifications != null &&
                    this.Notifications.SequenceEqual(input.Notifications)
                ) && 
                (
                    this.TotalRecordCount == input.TotalRecordCount ||
                    (this.TotalRecordCount != null &&
                    this.TotalRecordCount.Equals(input.TotalRecordCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Notifications != null)
                    hashCode = hashCode * 59 + this.Notifications.GetHashCode();
                if (this.TotalRecordCount != null)
                    hashCode = hashCode * 59 + this.TotalRecordCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
