/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Class PlayRequest.
    /// </summary>
    [DataContract]
    public partial class PlayRequest :  IEquatable<PlayRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or sets the play command.
        /// </summary>
        /// <value>Gets or sets the play command.</value>
        [DataMember(Name="PlayCommand", EmitDefaultValue=false)]
        public PlayCommand? PlayCommand { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayRequest" /> class.
        /// </summary>
        /// <param name="itemIds">Gets or sets the item ids..</param>
        /// <param name="startPositionTicks">Gets or sets the start position ticks that the first item should be played at..</param>
        /// <param name="playCommand">Gets or sets the play command..</param>
        /// <param name="controllingUserId">Gets or sets the controlling user identifier..</param>
        /// <param name="subtitleStreamIndex">subtitleStreamIndex.</param>
        /// <param name="audioStreamIndex">audioStreamIndex.</param>
        /// <param name="mediaSourceId">mediaSourceId.</param>
        /// <param name="startIndex">startIndex.</param>
        public PlayRequest(List<Guid> itemIds = default(List<Guid>), long? startPositionTicks = default(long?), PlayCommand? playCommand = default(PlayCommand?), Guid controllingUserId = default(Guid), int? subtitleStreamIndex = default(int?), int? audioStreamIndex = default(int?), string mediaSourceId = default(string), int? startIndex = default(int?))
        {
            this.ItemIds = itemIds;
            this.StartPositionTicks = startPositionTicks;
            this.SubtitleStreamIndex = subtitleStreamIndex;
            this.AudioStreamIndex = audioStreamIndex;
            this.MediaSourceId = mediaSourceId;
            this.StartIndex = startIndex;
            this.ItemIds = itemIds;
            this.StartPositionTicks = startPositionTicks;
            this.PlayCommand = playCommand;
            this.ControllingUserId = controllingUserId;
            this.SubtitleStreamIndex = subtitleStreamIndex;
            this.AudioStreamIndex = audioStreamIndex;
            this.MediaSourceId = mediaSourceId;
            this.StartIndex = startIndex;
        }

        /// <summary>
        /// Gets or sets the item ids.
        /// </summary>
        /// <value>Gets or sets the item ids.</value>
        [DataMember(Name="ItemIds", EmitDefaultValue=true)]
        public List<Guid> ItemIds { get; set; }

        /// <summary>
        /// Gets or sets the start position ticks that the first item should be played at.
        /// </summary>
        /// <value>Gets or sets the start position ticks that the first item should be played at.</value>
        [DataMember(Name="StartPositionTicks", EmitDefaultValue=true)]
        public long? StartPositionTicks { get; set; }


        /// <summary>
        /// Gets or sets the controlling user identifier.
        /// </summary>
        /// <value>Gets or sets the controlling user identifier.</value>
        [DataMember(Name="ControllingUserId", EmitDefaultValue=false)]
        public Guid ControllingUserId { get; set; }

        /// <summary>
        /// Gets or Sets SubtitleStreamIndex
        /// </summary>
        [DataMember(Name="SubtitleStreamIndex", EmitDefaultValue=true)]
        public int? SubtitleStreamIndex { get; set; }

        /// <summary>
        /// Gets or Sets AudioStreamIndex
        /// </summary>
        [DataMember(Name="AudioStreamIndex", EmitDefaultValue=true)]
        public int? AudioStreamIndex { get; set; }

        /// <summary>
        /// Gets or Sets MediaSourceId
        /// </summary>
        [DataMember(Name="MediaSourceId", EmitDefaultValue=true)]
        public string MediaSourceId { get; set; }

        /// <summary>
        /// Gets or Sets StartIndex
        /// </summary>
        [DataMember(Name="StartIndex", EmitDefaultValue=true)]
        public int? StartIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayRequest {\n");
            sb.Append("  ItemIds: ").Append(ItemIds).Append("\n");
            sb.Append("  StartPositionTicks: ").Append(StartPositionTicks).Append("\n");
            sb.Append("  PlayCommand: ").Append(PlayCommand).Append("\n");
            sb.Append("  ControllingUserId: ").Append(ControllingUserId).Append("\n");
            sb.Append("  SubtitleStreamIndex: ").Append(SubtitleStreamIndex).Append("\n");
            sb.Append("  AudioStreamIndex: ").Append(AudioStreamIndex).Append("\n");
            sb.Append("  MediaSourceId: ").Append(MediaSourceId).Append("\n");
            sb.Append("  StartIndex: ").Append(StartIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlayRequest);
        }

        /// <summary>
        /// Returns true if PlayRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PlayRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemIds == input.ItemIds ||
                    this.ItemIds != null &&
                    input.ItemIds != null &&
                    this.ItemIds.SequenceEqual(input.ItemIds)
                ) && 
                (
                    this.StartPositionTicks == input.StartPositionTicks ||
                    (this.StartPositionTicks != null &&
                    this.StartPositionTicks.Equals(input.StartPositionTicks))
                ) && 
                (
                    this.PlayCommand == input.PlayCommand ||
                    (this.PlayCommand != null &&
                    this.PlayCommand.Equals(input.PlayCommand))
                ) && 
                (
                    this.ControllingUserId == input.ControllingUserId ||
                    (this.ControllingUserId != null &&
                    this.ControllingUserId.Equals(input.ControllingUserId))
                ) && 
                (
                    this.SubtitleStreamIndex == input.SubtitleStreamIndex ||
                    (this.SubtitleStreamIndex != null &&
                    this.SubtitleStreamIndex.Equals(input.SubtitleStreamIndex))
                ) && 
                (
                    this.AudioStreamIndex == input.AudioStreamIndex ||
                    (this.AudioStreamIndex != null &&
                    this.AudioStreamIndex.Equals(input.AudioStreamIndex))
                ) && 
                (
                    this.MediaSourceId == input.MediaSourceId ||
                    (this.MediaSourceId != null &&
                    this.MediaSourceId.Equals(input.MediaSourceId))
                ) && 
                (
                    this.StartIndex == input.StartIndex ||
                    (this.StartIndex != null &&
                    this.StartIndex.Equals(input.StartIndex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemIds != null)
                    hashCode = hashCode * 59 + this.ItemIds.GetHashCode();
                if (this.StartPositionTicks != null)
                    hashCode = hashCode * 59 + this.StartPositionTicks.GetHashCode();
                if (this.PlayCommand != null)
                    hashCode = hashCode * 59 + this.PlayCommand.GetHashCode();
                if (this.ControllingUserId != null)
                    hashCode = hashCode * 59 + this.ControllingUserId.GetHashCode();
                if (this.SubtitleStreamIndex != null)
                    hashCode = hashCode * 59 + this.SubtitleStreamIndex.GetHashCode();
                if (this.AudioStreamIndex != null)
                    hashCode = hashCode * 59 + this.AudioStreamIndex.GetHashCode();
                if (this.MediaSourceId != null)
                    hashCode = hashCode * 59 + this.MediaSourceId.GetHashCode();
                if (this.StartIndex != null)
                    hashCode = hashCode * 59 + this.StartIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
