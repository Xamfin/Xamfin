/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// DeviceIdentification
    /// </summary>
    [DataContract]
    public partial class DeviceIdentification :  IEquatable<DeviceIdentification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceIdentification" /> class.
        /// </summary>
        /// <param name="friendlyName">Gets or sets the name of the friendly..</param>
        /// <param name="modelNumber">Gets or sets the model number..</param>
        /// <param name="serialNumber">Gets or sets the serial number..</param>
        /// <param name="modelName">Gets or sets the name of the model..</param>
        /// <param name="modelDescription">Gets or sets the model description..</param>
        /// <param name="modelUrl">Gets or sets the model URL..</param>
        /// <param name="manufacturer">Gets or sets the manufacturer..</param>
        /// <param name="manufacturerUrl">Gets or sets the manufacturer URL..</param>
        /// <param name="headers">Gets or sets the headers..</param>
        public DeviceIdentification(string friendlyName = default(string), string modelNumber = default(string), string serialNumber = default(string), string modelName = default(string), string modelDescription = default(string), string modelUrl = default(string), string manufacturer = default(string), string manufacturerUrl = default(string), List<HttpHeaderInfo> headers = default(List<HttpHeaderInfo>))
        {
            this.FriendlyName = friendlyName;
            this.ModelNumber = modelNumber;
            this.SerialNumber = serialNumber;
            this.ModelName = modelName;
            this.ModelDescription = modelDescription;
            this.ModelUrl = modelUrl;
            this.Manufacturer = manufacturer;
            this.ManufacturerUrl = manufacturerUrl;
            this.Headers = headers;
            this.FriendlyName = friendlyName;
            this.ModelNumber = modelNumber;
            this.SerialNumber = serialNumber;
            this.ModelName = modelName;
            this.ModelDescription = modelDescription;
            this.ModelUrl = modelUrl;
            this.Manufacturer = manufacturer;
            this.ManufacturerUrl = manufacturerUrl;
            this.Headers = headers;
        }

        /// <summary>
        /// Gets or sets the name of the friendly.
        /// </summary>
        /// <value>Gets or sets the name of the friendly.</value>
        [DataMember(Name="FriendlyName", EmitDefaultValue=true)]
        public string FriendlyName { get; set; }

        /// <summary>
        /// Gets or sets the model number.
        /// </summary>
        /// <value>Gets or sets the model number.</value>
        [DataMember(Name="ModelNumber", EmitDefaultValue=true)]
        public string ModelNumber { get; set; }

        /// <summary>
        /// Gets or sets the serial number.
        /// </summary>
        /// <value>Gets or sets the serial number.</value>
        [DataMember(Name="SerialNumber", EmitDefaultValue=true)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or sets the name of the model.
        /// </summary>
        /// <value>Gets or sets the name of the model.</value>
        [DataMember(Name="ModelName", EmitDefaultValue=true)]
        public string ModelName { get; set; }

        /// <summary>
        /// Gets or sets the model description.
        /// </summary>
        /// <value>Gets or sets the model description.</value>
        [DataMember(Name="ModelDescription", EmitDefaultValue=true)]
        public string ModelDescription { get; set; }

        /// <summary>
        /// Gets or sets the model URL.
        /// </summary>
        /// <value>Gets or sets the model URL.</value>
        [DataMember(Name="ModelUrl", EmitDefaultValue=true)]
        public string ModelUrl { get; set; }

        /// <summary>
        /// Gets or sets the manufacturer.
        /// </summary>
        /// <value>Gets or sets the manufacturer.</value>
        [DataMember(Name="Manufacturer", EmitDefaultValue=true)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Gets or sets the manufacturer URL.
        /// </summary>
        /// <value>Gets or sets the manufacturer URL.</value>
        [DataMember(Name="ManufacturerUrl", EmitDefaultValue=true)]
        public string ManufacturerUrl { get; set; }

        /// <summary>
        /// Gets or sets the headers.
        /// </summary>
        /// <value>Gets or sets the headers.</value>
        [DataMember(Name="Headers", EmitDefaultValue=true)]
        public List<HttpHeaderInfo> Headers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceIdentification {\n");
            sb.Append("  FriendlyName: ").Append(FriendlyName).Append("\n");
            sb.Append("  ModelNumber: ").Append(ModelNumber).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  ModelName: ").Append(ModelName).Append("\n");
            sb.Append("  ModelDescription: ").Append(ModelDescription).Append("\n");
            sb.Append("  ModelUrl: ").Append(ModelUrl).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  ManufacturerUrl: ").Append(ManufacturerUrl).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceIdentification);
        }

        /// <summary>
        /// Returns true if DeviceIdentification instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceIdentification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceIdentification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FriendlyName == input.FriendlyName ||
                    (this.FriendlyName != null &&
                    this.FriendlyName.Equals(input.FriendlyName))
                ) && 
                (
                    this.ModelNumber == input.ModelNumber ||
                    (this.ModelNumber != null &&
                    this.ModelNumber.Equals(input.ModelNumber))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.ModelName == input.ModelName ||
                    (this.ModelName != null &&
                    this.ModelName.Equals(input.ModelName))
                ) && 
                (
                    this.ModelDescription == input.ModelDescription ||
                    (this.ModelDescription != null &&
                    this.ModelDescription.Equals(input.ModelDescription))
                ) && 
                (
                    this.ModelUrl == input.ModelUrl ||
                    (this.ModelUrl != null &&
                    this.ModelUrl.Equals(input.ModelUrl))
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.ManufacturerUrl == input.ManufacturerUrl ||
                    (this.ManufacturerUrl != null &&
                    this.ManufacturerUrl.Equals(input.ManufacturerUrl))
                ) && 
                (
                    this.Headers == input.Headers ||
                    this.Headers != null &&
                    input.Headers != null &&
                    this.Headers.SequenceEqual(input.Headers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FriendlyName != null)
                    hashCode = hashCode * 59 + this.FriendlyName.GetHashCode();
                if (this.ModelNumber != null)
                    hashCode = hashCode * 59 + this.ModelNumber.GetHashCode();
                if (this.SerialNumber != null)
                    hashCode = hashCode * 59 + this.SerialNumber.GetHashCode();
                if (this.ModelName != null)
                    hashCode = hashCode * 59 + this.ModelName.GetHashCode();
                if (this.ModelDescription != null)
                    hashCode = hashCode * 59 + this.ModelDescription.GetHashCode();
                if (this.ModelUrl != null)
                    hashCode = hashCode * 59 + this.ModelUrl.GetHashCode();
                if (this.Manufacturer != null)
                    hashCode = hashCode * 59 + this.Manufacturer.GetHashCode();
                if (this.ManufacturerUrl != null)
                    hashCode = hashCode * 59 + this.ManufacturerUrl.GetHashCode();
                if (this.Headers != null)
                    hashCode = hashCode * 59 + this.Headers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
