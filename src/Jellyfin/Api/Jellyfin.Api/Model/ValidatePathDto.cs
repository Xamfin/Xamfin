/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Validate path object.
    /// </summary>
    [DataContract]
    public partial class ValidatePathDto :  IEquatable<ValidatePathDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidatePathDto" /> class.
        /// </summary>
        /// <param name="validateWritable">Gets or sets a value indicating whether validate if path is writable..</param>
        /// <param name="path">Gets or sets the path..</param>
        /// <param name="isFile">Gets or sets is path file..</param>
        public ValidatePathDto(bool validateWritable = default(bool), string path = default(string), bool? isFile = default(bool?))
        {
            this.Path = path;
            this.IsFile = isFile;
            this.ValidateWritable = validateWritable;
            this.Path = path;
            this.IsFile = isFile;
        }

        /// <summary>
        /// Gets or sets a value indicating whether validate if path is writable.
        /// </summary>
        /// <value>Gets or sets a value indicating whether validate if path is writable.</value>
        [DataMember(Name="ValidateWritable", EmitDefaultValue=false)]
        public bool ValidateWritable { get; set; }

        /// <summary>
        /// Gets or sets the path.
        /// </summary>
        /// <value>Gets or sets the path.</value>
        [DataMember(Name="Path", EmitDefaultValue=true)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or sets is path file.
        /// </summary>
        /// <value>Gets or sets is path file.</value>
        [DataMember(Name="IsFile", EmitDefaultValue=true)]
        public bool? IsFile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValidatePathDto {\n");
            sb.Append("  ValidateWritable: ").Append(ValidateWritable).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  IsFile: ").Append(IsFile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValidatePathDto);
        }

        /// <summary>
        /// Returns true if ValidatePathDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ValidatePathDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidatePathDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ValidateWritable == input.ValidateWritable ||
                    (this.ValidateWritable != null &&
                    this.ValidateWritable.Equals(input.ValidateWritable))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.IsFile == input.IsFile ||
                    (this.IsFile != null &&
                    this.IsFile.Equals(input.IsFile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ValidateWritable != null)
                    hashCode = hashCode * 59 + this.ValidateWritable.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.IsFile != null)
                    hashCode = hashCode * 59 + this.IsFile.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
