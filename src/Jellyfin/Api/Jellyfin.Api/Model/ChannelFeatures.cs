/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// ChannelFeatures
    /// </summary>
    [DataContract]
    public partial class ChannelFeatures :  IEquatable<ChannelFeatures>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelFeatures" /> class.
        /// </summary>
        /// <param name="name">Gets or sets the name..</param>
        /// <param name="id">Gets or sets the identifier..</param>
        /// <param name="canSearch">Gets or sets a value indicating whether this instance can search..</param>
        /// <param name="mediaTypes">Gets or sets the media types..</param>
        /// <param name="contentTypes">Gets or sets the content types..</param>
        /// <param name="maxPageSize">Represents the maximum number of records the channel allows retrieving at a time..</param>
        /// <param name="autoRefreshLevels">Gets or sets the automatic refresh levels..</param>
        /// <param name="defaultSortFields">Gets or sets the default sort orders..</param>
        /// <param name="supportsSortOrderToggle">Indicates if a sort ascending/descending toggle is supported or not..</param>
        /// <param name="supportsLatestMedia">Gets or sets a value indicating whether [supports latest media]..</param>
        /// <param name="canFilter">Gets or sets a value indicating whether this instance can filter..</param>
        /// <param name="supportsContentDownloading">Gets or sets a value indicating whether [supports content downloading]..</param>
        public ChannelFeatures(string name = default(string), string id = default(string), bool canSearch = default(bool), List<ChannelMediaType> mediaTypes = default(List<ChannelMediaType>), List<ChannelMediaContentType> contentTypes = default(List<ChannelMediaContentType>), int? maxPageSize = default(int?), int? autoRefreshLevels = default(int?), List<ChannelItemSortField> defaultSortFields = default(List<ChannelItemSortField>), bool supportsSortOrderToggle = default(bool), bool supportsLatestMedia = default(bool), bool canFilter = default(bool), bool supportsContentDownloading = default(bool))
        {
            this.Name = name;
            this.Id = id;
            this.MediaTypes = mediaTypes;
            this.ContentTypes = contentTypes;
            this.MaxPageSize = maxPageSize;
            this.AutoRefreshLevels = autoRefreshLevels;
            this.DefaultSortFields = defaultSortFields;
            this.Name = name;
            this.Id = id;
            this.CanSearch = canSearch;
            this.MediaTypes = mediaTypes;
            this.ContentTypes = contentTypes;
            this.MaxPageSize = maxPageSize;
            this.AutoRefreshLevels = autoRefreshLevels;
            this.DefaultSortFields = defaultSortFields;
            this.SupportsSortOrderToggle = supportsSortOrderToggle;
            this.SupportsLatestMedia = supportsLatestMedia;
            this.CanFilter = canFilter;
            this.SupportsContentDownloading = supportsContentDownloading;
        }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>Gets or sets the name.</value>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the identifier.
        /// </summary>
        /// <value>Gets or sets the identifier.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance can search.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance can search.</value>
        [DataMember(Name="CanSearch", EmitDefaultValue=false)]
        public bool CanSearch { get; set; }

        /// <summary>
        /// Gets or sets the media types.
        /// </summary>
        /// <value>Gets or sets the media types.</value>
        [DataMember(Name="MediaTypes", EmitDefaultValue=true)]
        public List<ChannelMediaType> MediaTypes { get; set; }

        /// <summary>
        /// Gets or sets the content types.
        /// </summary>
        /// <value>Gets or sets the content types.</value>
        [DataMember(Name="ContentTypes", EmitDefaultValue=true)]
        public List<ChannelMediaContentType> ContentTypes { get; set; }

        /// <summary>
        /// Represents the maximum number of records the channel allows retrieving at a time.
        /// </summary>
        /// <value>Represents the maximum number of records the channel allows retrieving at a time.</value>
        [DataMember(Name="MaxPageSize", EmitDefaultValue=true)]
        public int? MaxPageSize { get; set; }

        /// <summary>
        /// Gets or sets the automatic refresh levels.
        /// </summary>
        /// <value>Gets or sets the automatic refresh levels.</value>
        [DataMember(Name="AutoRefreshLevels", EmitDefaultValue=true)]
        public int? AutoRefreshLevels { get; set; }

        /// <summary>
        /// Gets or sets the default sort orders.
        /// </summary>
        /// <value>Gets or sets the default sort orders.</value>
        [DataMember(Name="DefaultSortFields", EmitDefaultValue=true)]
        public List<ChannelItemSortField> DefaultSortFields { get; set; }

        /// <summary>
        /// Indicates if a sort ascending/descending toggle is supported or not.
        /// </summary>
        /// <value>Indicates if a sort ascending/descending toggle is supported or not.</value>
        [DataMember(Name="SupportsSortOrderToggle", EmitDefaultValue=false)]
        public bool SupportsSortOrderToggle { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [supports latest media].
        /// </summary>
        /// <value>Gets or sets a value indicating whether [supports latest media].</value>
        [DataMember(Name="SupportsLatestMedia", EmitDefaultValue=false)]
        public bool SupportsLatestMedia { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance can filter.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance can filter.</value>
        [DataMember(Name="CanFilter", EmitDefaultValue=false)]
        public bool CanFilter { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [supports content downloading].
        /// </summary>
        /// <value>Gets or sets a value indicating whether [supports content downloading].</value>
        [DataMember(Name="SupportsContentDownloading", EmitDefaultValue=false)]
        public bool SupportsContentDownloading { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelFeatures {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CanSearch: ").Append(CanSearch).Append("\n");
            sb.Append("  MediaTypes: ").Append(MediaTypes).Append("\n");
            sb.Append("  ContentTypes: ").Append(ContentTypes).Append("\n");
            sb.Append("  MaxPageSize: ").Append(MaxPageSize).Append("\n");
            sb.Append("  AutoRefreshLevels: ").Append(AutoRefreshLevels).Append("\n");
            sb.Append("  DefaultSortFields: ").Append(DefaultSortFields).Append("\n");
            sb.Append("  SupportsSortOrderToggle: ").Append(SupportsSortOrderToggle).Append("\n");
            sb.Append("  SupportsLatestMedia: ").Append(SupportsLatestMedia).Append("\n");
            sb.Append("  CanFilter: ").Append(CanFilter).Append("\n");
            sb.Append("  SupportsContentDownloading: ").Append(SupportsContentDownloading).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChannelFeatures);
        }

        /// <summary>
        /// Returns true if ChannelFeatures instances are equal
        /// </summary>
        /// <param name="input">Instance of ChannelFeatures to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelFeatures input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CanSearch == input.CanSearch ||
                    (this.CanSearch != null &&
                    this.CanSearch.Equals(input.CanSearch))
                ) && 
                (
                    this.MediaTypes == input.MediaTypes ||
                    this.MediaTypes != null &&
                    input.MediaTypes != null &&
                    this.MediaTypes.SequenceEqual(input.MediaTypes)
                ) && 
                (
                    this.ContentTypes == input.ContentTypes ||
                    this.ContentTypes != null &&
                    input.ContentTypes != null &&
                    this.ContentTypes.SequenceEqual(input.ContentTypes)
                ) && 
                (
                    this.MaxPageSize == input.MaxPageSize ||
                    (this.MaxPageSize != null &&
                    this.MaxPageSize.Equals(input.MaxPageSize))
                ) && 
                (
                    this.AutoRefreshLevels == input.AutoRefreshLevels ||
                    (this.AutoRefreshLevels != null &&
                    this.AutoRefreshLevels.Equals(input.AutoRefreshLevels))
                ) && 
                (
                    this.DefaultSortFields == input.DefaultSortFields ||
                    this.DefaultSortFields != null &&
                    input.DefaultSortFields != null &&
                    this.DefaultSortFields.SequenceEqual(input.DefaultSortFields)
                ) && 
                (
                    this.SupportsSortOrderToggle == input.SupportsSortOrderToggle ||
                    (this.SupportsSortOrderToggle != null &&
                    this.SupportsSortOrderToggle.Equals(input.SupportsSortOrderToggle))
                ) && 
                (
                    this.SupportsLatestMedia == input.SupportsLatestMedia ||
                    (this.SupportsLatestMedia != null &&
                    this.SupportsLatestMedia.Equals(input.SupportsLatestMedia))
                ) && 
                (
                    this.CanFilter == input.CanFilter ||
                    (this.CanFilter != null &&
                    this.CanFilter.Equals(input.CanFilter))
                ) && 
                (
                    this.SupportsContentDownloading == input.SupportsContentDownloading ||
                    (this.SupportsContentDownloading != null &&
                    this.SupportsContentDownloading.Equals(input.SupportsContentDownloading))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CanSearch != null)
                    hashCode = hashCode * 59 + this.CanSearch.GetHashCode();
                if (this.MediaTypes != null)
                    hashCode = hashCode * 59 + this.MediaTypes.GetHashCode();
                if (this.ContentTypes != null)
                    hashCode = hashCode * 59 + this.ContentTypes.GetHashCode();
                if (this.MaxPageSize != null)
                    hashCode = hashCode * 59 + this.MaxPageSize.GetHashCode();
                if (this.AutoRefreshLevels != null)
                    hashCode = hashCode * 59 + this.AutoRefreshLevels.GetHashCode();
                if (this.DefaultSortFields != null)
                    hashCode = hashCode * 59 + this.DefaultSortFields.GetHashCode();
                if (this.SupportsSortOrderToggle != null)
                    hashCode = hashCode * 59 + this.SupportsSortOrderToggle.GetHashCode();
                if (this.SupportsLatestMedia != null)
                    hashCode = hashCode * 59 + this.SupportsLatestMedia.GetHashCode();
                if (this.CanFilter != null)
                    hashCode = hashCode * 59 + this.CanFilter.GetHashCode();
                if (this.SupportsContentDownloading != null)
                    hashCode = hashCode * 59 + this.SupportsContentDownloading.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
