/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Gets or sets the blurhashes for the image tags.  Maps image type to dictionary mapping image tag to blurhash value.
    /// </summary>
    [DataContract]
    public partial class BaseItemDtoImageBlurHashes :  IEquatable<BaseItemDtoImageBlurHashes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseItemDtoImageBlurHashes" /> class.
        /// </summary>
        /// <param name="primary">primary.</param>
        /// <param name="art">art.</param>
        /// <param name="backdrop">backdrop.</param>
        /// <param name="banner">banner.</param>
        /// <param name="logo">logo.</param>
        /// <param name="thumb">thumb.</param>
        /// <param name="disc">disc.</param>
        /// <param name="box">box.</param>
        /// <param name="screenshot">screenshot.</param>
        /// <param name="menu">menu.</param>
        /// <param name="chapter">chapter.</param>
        /// <param name="boxRear">boxRear.</param>
        /// <param name="profile">profile.</param>
        public BaseItemDtoImageBlurHashes(Dictionary<string, string> primary = default(Dictionary<string, string>), Dictionary<string, string> art = default(Dictionary<string, string>), Dictionary<string, string> backdrop = default(Dictionary<string, string>), Dictionary<string, string> banner = default(Dictionary<string, string>), Dictionary<string, string> logo = default(Dictionary<string, string>), Dictionary<string, string> thumb = default(Dictionary<string, string>), Dictionary<string, string> disc = default(Dictionary<string, string>), Dictionary<string, string> box = default(Dictionary<string, string>), Dictionary<string, string> screenshot = default(Dictionary<string, string>), Dictionary<string, string> menu = default(Dictionary<string, string>), Dictionary<string, string> chapter = default(Dictionary<string, string>), Dictionary<string, string> boxRear = default(Dictionary<string, string>), Dictionary<string, string> profile = default(Dictionary<string, string>))
        {
            this.Primary = primary;
            this.Art = art;
            this.Backdrop = backdrop;
            this.Banner = banner;
            this.Logo = logo;
            this.Thumb = thumb;
            this.Disc = disc;
            this.Box = box;
            this.Screenshot = screenshot;
            this.Menu = menu;
            this.Chapter = chapter;
            this.BoxRear = boxRear;
            this.Profile = profile;
        }

        /// <summary>
        /// Gets or Sets Primary
        /// </summary>
        [DataMember(Name="Primary", EmitDefaultValue=false)]
        public Dictionary<string, string> Primary { get; set; }

        /// <summary>
        /// Gets or Sets Art
        /// </summary>
        [DataMember(Name="Art", EmitDefaultValue=false)]
        public Dictionary<string, string> Art { get; set; }

        /// <summary>
        /// Gets or Sets Backdrop
        /// </summary>
        [DataMember(Name="Backdrop", EmitDefaultValue=false)]
        public Dictionary<string, string> Backdrop { get; set; }

        /// <summary>
        /// Gets or Sets Banner
        /// </summary>
        [DataMember(Name="Banner", EmitDefaultValue=false)]
        public Dictionary<string, string> Banner { get; set; }

        /// <summary>
        /// Gets or Sets Logo
        /// </summary>
        [DataMember(Name="Logo", EmitDefaultValue=false)]
        public Dictionary<string, string> Logo { get; set; }

        /// <summary>
        /// Gets or Sets Thumb
        /// </summary>
        [DataMember(Name="Thumb", EmitDefaultValue=false)]
        public Dictionary<string, string> Thumb { get; set; }

        /// <summary>
        /// Gets or Sets Disc
        /// </summary>
        [DataMember(Name="Disc", EmitDefaultValue=false)]
        public Dictionary<string, string> Disc { get; set; }

        /// <summary>
        /// Gets or Sets Box
        /// </summary>
        [DataMember(Name="Box", EmitDefaultValue=false)]
        public Dictionary<string, string> Box { get; set; }

        /// <summary>
        /// Gets or Sets Screenshot
        /// </summary>
        [DataMember(Name="Screenshot", EmitDefaultValue=false)]
        public Dictionary<string, string> Screenshot { get; set; }

        /// <summary>
        /// Gets or Sets Menu
        /// </summary>
        [DataMember(Name="Menu", EmitDefaultValue=false)]
        public Dictionary<string, string> Menu { get; set; }

        /// <summary>
        /// Gets or Sets Chapter
        /// </summary>
        [DataMember(Name="Chapter", EmitDefaultValue=false)]
        public Dictionary<string, string> Chapter { get; set; }

        /// <summary>
        /// Gets or Sets BoxRear
        /// </summary>
        [DataMember(Name="BoxRear", EmitDefaultValue=false)]
        public Dictionary<string, string> BoxRear { get; set; }

        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name="Profile", EmitDefaultValue=false)]
        public Dictionary<string, string> Profile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaseItemDtoImageBlurHashes {\n");
            sb.Append("  Primary: ").Append(Primary).Append("\n");
            sb.Append("  Art: ").Append(Art).Append("\n");
            sb.Append("  Backdrop: ").Append(Backdrop).Append("\n");
            sb.Append("  Banner: ").Append(Banner).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  Thumb: ").Append(Thumb).Append("\n");
            sb.Append("  Disc: ").Append(Disc).Append("\n");
            sb.Append("  Box: ").Append(Box).Append("\n");
            sb.Append("  Screenshot: ").Append(Screenshot).Append("\n");
            sb.Append("  Menu: ").Append(Menu).Append("\n");
            sb.Append("  Chapter: ").Append(Chapter).Append("\n");
            sb.Append("  BoxRear: ").Append(BoxRear).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BaseItemDtoImageBlurHashes);
        }

        /// <summary>
        /// Returns true if BaseItemDtoImageBlurHashes instances are equal
        /// </summary>
        /// <param name="input">Instance of BaseItemDtoImageBlurHashes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaseItemDtoImageBlurHashes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Primary == input.Primary ||
                    this.Primary != null &&
                    input.Primary != null &&
                    this.Primary.SequenceEqual(input.Primary)
                ) && 
                (
                    this.Art == input.Art ||
                    this.Art != null &&
                    input.Art != null &&
                    this.Art.SequenceEqual(input.Art)
                ) && 
                (
                    this.Backdrop == input.Backdrop ||
                    this.Backdrop != null &&
                    input.Backdrop != null &&
                    this.Backdrop.SequenceEqual(input.Backdrop)
                ) && 
                (
                    this.Banner == input.Banner ||
                    this.Banner != null &&
                    input.Banner != null &&
                    this.Banner.SequenceEqual(input.Banner)
                ) && 
                (
                    this.Logo == input.Logo ||
                    this.Logo != null &&
                    input.Logo != null &&
                    this.Logo.SequenceEqual(input.Logo)
                ) && 
                (
                    this.Thumb == input.Thumb ||
                    this.Thumb != null &&
                    input.Thumb != null &&
                    this.Thumb.SequenceEqual(input.Thumb)
                ) && 
                (
                    this.Disc == input.Disc ||
                    this.Disc != null &&
                    input.Disc != null &&
                    this.Disc.SequenceEqual(input.Disc)
                ) && 
                (
                    this.Box == input.Box ||
                    this.Box != null &&
                    input.Box != null &&
                    this.Box.SequenceEqual(input.Box)
                ) && 
                (
                    this.Screenshot == input.Screenshot ||
                    this.Screenshot != null &&
                    input.Screenshot != null &&
                    this.Screenshot.SequenceEqual(input.Screenshot)
                ) && 
                (
                    this.Menu == input.Menu ||
                    this.Menu != null &&
                    input.Menu != null &&
                    this.Menu.SequenceEqual(input.Menu)
                ) && 
                (
                    this.Chapter == input.Chapter ||
                    this.Chapter != null &&
                    input.Chapter != null &&
                    this.Chapter.SequenceEqual(input.Chapter)
                ) && 
                (
                    this.BoxRear == input.BoxRear ||
                    this.BoxRear != null &&
                    input.BoxRear != null &&
                    this.BoxRear.SequenceEqual(input.BoxRear)
                ) && 
                (
                    this.Profile == input.Profile ||
                    this.Profile != null &&
                    input.Profile != null &&
                    this.Profile.SequenceEqual(input.Profile)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Primary != null)
                    hashCode = hashCode * 59 + this.Primary.GetHashCode();
                if (this.Art != null)
                    hashCode = hashCode * 59 + this.Art.GetHashCode();
                if (this.Backdrop != null)
                    hashCode = hashCode * 59 + this.Backdrop.GetHashCode();
                if (this.Banner != null)
                    hashCode = hashCode * 59 + this.Banner.GetHashCode();
                if (this.Logo != null)
                    hashCode = hashCode * 59 + this.Logo.GetHashCode();
                if (this.Thumb != null)
                    hashCode = hashCode * 59 + this.Thumb.GetHashCode();
                if (this.Disc != null)
                    hashCode = hashCode * 59 + this.Disc.GetHashCode();
                if (this.Box != null)
                    hashCode = hashCode * 59 + this.Box.GetHashCode();
                if (this.Screenshot != null)
                    hashCode = hashCode * 59 + this.Screenshot.GetHashCode();
                if (this.Menu != null)
                    hashCode = hashCode * 59 + this.Menu.GetHashCode();
                if (this.Chapter != null)
                    hashCode = hashCode * 59 + this.Chapter.GetHashCode();
                if (this.BoxRear != null)
                    hashCode = hashCode * 59 + this.BoxRear.GetHashCode();
                if (this.Profile != null)
                    hashCode = hashCode * 59 + this.Profile.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
