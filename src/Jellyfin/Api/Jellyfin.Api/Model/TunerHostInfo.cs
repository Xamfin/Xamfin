/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// TunerHostInfo
    /// </summary>
    [DataContract]
    public partial class TunerHostInfo :  IEquatable<TunerHostInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TunerHostInfo" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="url">url.</param>
        /// <param name="type">type.</param>
        /// <param name="deviceId">deviceId.</param>
        /// <param name="friendlyName">friendlyName.</param>
        /// <param name="importFavoritesOnly">importFavoritesOnly.</param>
        /// <param name="allowHWTranscoding">allowHWTranscoding.</param>
        /// <param name="enableStreamLooping">enableStreamLooping.</param>
        /// <param name="source">source.</param>
        /// <param name="tunerCount">tunerCount.</param>
        /// <param name="userAgent">userAgent.</param>
        public TunerHostInfo(string id = default(string), string url = default(string), string type = default(string), string deviceId = default(string), string friendlyName = default(string), bool importFavoritesOnly = default(bool), bool allowHWTranscoding = default(bool), bool enableStreamLooping = default(bool), string source = default(string), int tunerCount = default(int), string userAgent = default(string))
        {
            this.Id = id;
            this.Url = url;
            this.Type = type;
            this.DeviceId = deviceId;
            this.FriendlyName = friendlyName;
            this.Source = source;
            this.UserAgent = userAgent;
            this.Id = id;
            this.Url = url;
            this.Type = type;
            this.DeviceId = deviceId;
            this.FriendlyName = friendlyName;
            this.ImportFavoritesOnly = importFavoritesOnly;
            this.AllowHWTranscoding = allowHWTranscoding;
            this.EnableStreamLooping = enableStreamLooping;
            this.Source = source;
            this.TunerCount = tunerCount;
            this.UserAgent = userAgent;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="Url", EmitDefaultValue=true)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets DeviceId
        /// </summary>
        [DataMember(Name="DeviceId", EmitDefaultValue=true)]
        public string DeviceId { get; set; }

        /// <summary>
        /// Gets or Sets FriendlyName
        /// </summary>
        [DataMember(Name="FriendlyName", EmitDefaultValue=true)]
        public string FriendlyName { get; set; }

        /// <summary>
        /// Gets or Sets ImportFavoritesOnly
        /// </summary>
        [DataMember(Name="ImportFavoritesOnly", EmitDefaultValue=false)]
        public bool ImportFavoritesOnly { get; set; }

        /// <summary>
        /// Gets or Sets AllowHWTranscoding
        /// </summary>
        [DataMember(Name="AllowHWTranscoding", EmitDefaultValue=false)]
        public bool AllowHWTranscoding { get; set; }

        /// <summary>
        /// Gets or Sets EnableStreamLooping
        /// </summary>
        [DataMember(Name="EnableStreamLooping", EmitDefaultValue=false)]
        public bool EnableStreamLooping { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="Source", EmitDefaultValue=true)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets TunerCount
        /// </summary>
        [DataMember(Name="TunerCount", EmitDefaultValue=false)]
        public int TunerCount { get; set; }

        /// <summary>
        /// Gets or Sets UserAgent
        /// </summary>
        [DataMember(Name="UserAgent", EmitDefaultValue=true)]
        public string UserAgent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TunerHostInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  FriendlyName: ").Append(FriendlyName).Append("\n");
            sb.Append("  ImportFavoritesOnly: ").Append(ImportFavoritesOnly).Append("\n");
            sb.Append("  AllowHWTranscoding: ").Append(AllowHWTranscoding).Append("\n");
            sb.Append("  EnableStreamLooping: ").Append(EnableStreamLooping).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  TunerCount: ").Append(TunerCount).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TunerHostInfo);
        }

        /// <summary>
        /// Returns true if TunerHostInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of TunerHostInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TunerHostInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.FriendlyName == input.FriendlyName ||
                    (this.FriendlyName != null &&
                    this.FriendlyName.Equals(input.FriendlyName))
                ) && 
                (
                    this.ImportFavoritesOnly == input.ImportFavoritesOnly ||
                    (this.ImportFavoritesOnly != null &&
                    this.ImportFavoritesOnly.Equals(input.ImportFavoritesOnly))
                ) && 
                (
                    this.AllowHWTranscoding == input.AllowHWTranscoding ||
                    (this.AllowHWTranscoding != null &&
                    this.AllowHWTranscoding.Equals(input.AllowHWTranscoding))
                ) && 
                (
                    this.EnableStreamLooping == input.EnableStreamLooping ||
                    (this.EnableStreamLooping != null &&
                    this.EnableStreamLooping.Equals(input.EnableStreamLooping))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.TunerCount == input.TunerCount ||
                    (this.TunerCount != null &&
                    this.TunerCount.Equals(input.TunerCount))
                ) && 
                (
                    this.UserAgent == input.UserAgent ||
                    (this.UserAgent != null &&
                    this.UserAgent.Equals(input.UserAgent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.DeviceId != null)
                    hashCode = hashCode * 59 + this.DeviceId.GetHashCode();
                if (this.FriendlyName != null)
                    hashCode = hashCode * 59 + this.FriendlyName.GetHashCode();
                if (this.ImportFavoritesOnly != null)
                    hashCode = hashCode * 59 + this.ImportFavoritesOnly.GetHashCode();
                if (this.AllowHWTranscoding != null)
                    hashCode = hashCode * 59 + this.AllowHWTranscoding.GetHashCode();
                if (this.EnableStreamLooping != null)
                    hashCode = hashCode * 59 + this.EnableStreamLooping.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.TunerCount != null)
                    hashCode = hashCode * 59 + this.TunerCount.GetHashCode();
                if (this.UserAgent != null)
                    hashCode = hashCode * 59 + this.UserAgent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
