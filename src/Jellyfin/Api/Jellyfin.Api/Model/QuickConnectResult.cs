/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Stores the result of an incoming quick connect request.
    /// </summary>
    [DataContract]
    public partial class QuickConnectResult :  IEquatable<QuickConnectResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuickConnectResult" /> class.
        /// </summary>
        /// <param name="secret">Gets or sets the secret value used to uniquely identify this request. Can be used to retrieve authentication information..</param>
        /// <param name="code">Gets or sets the user facing code used so the user can quickly differentiate this request from others..</param>
        /// <param name="authentication">Gets or sets the private access token..</param>
        /// <param name="error">Gets or sets an error message..</param>
        /// <param name="dateAdded">Gets or sets the DateTime that this request was created..</param>
        public QuickConnectResult(string secret = default(string), string code = default(string), string authentication = default(string), string error = default(string), DateTime? dateAdded = default(DateTime?))
        {
            this.Secret = secret;
            this.Code = code;
            this.Authentication = authentication;
            this.Error = error;
            this.DateAdded = dateAdded;
            this.Secret = secret;
            this.Code = code;
            this.Authentication = authentication;
            this.Error = error;
            this.DateAdded = dateAdded;
        }

        /// <summary>
        /// Gets a value indicating whether this request is authorized.
        /// </summary>
        /// <value>Gets a value indicating whether this request is authorized.</value>
        [DataMember(Name="Authenticated", EmitDefaultValue=false)]
        public bool Authenticated { get; private set; }

        /// <summary>
        /// Gets or sets the secret value used to uniquely identify this request. Can be used to retrieve authentication information.
        /// </summary>
        /// <value>Gets or sets the secret value used to uniquely identify this request. Can be used to retrieve authentication information.</value>
        [DataMember(Name="Secret", EmitDefaultValue=true)]
        public string Secret { get; set; }

        /// <summary>
        /// Gets or sets the user facing code used so the user can quickly differentiate this request from others.
        /// </summary>
        /// <value>Gets or sets the user facing code used so the user can quickly differentiate this request from others.</value>
        [DataMember(Name="Code", EmitDefaultValue=true)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or sets the private access token.
        /// </summary>
        /// <value>Gets or sets the private access token.</value>
        [DataMember(Name="Authentication", EmitDefaultValue=true)]
        public string Authentication { get; set; }

        /// <summary>
        /// Gets or sets an error message.
        /// </summary>
        /// <value>Gets or sets an error message.</value>
        [DataMember(Name="Error", EmitDefaultValue=true)]
        public string Error { get; set; }

        /// <summary>
        /// Gets or sets the DateTime that this request was created.
        /// </summary>
        /// <value>Gets or sets the DateTime that this request was created.</value>
        [DataMember(Name="DateAdded", EmitDefaultValue=true)]
        public DateTime? DateAdded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuickConnectResult {\n");
            sb.Append("  Authenticated: ").Append(Authenticated).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Authentication: ").Append(Authentication).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  DateAdded: ").Append(DateAdded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuickConnectResult);
        }

        /// <summary>
        /// Returns true if QuickConnectResult instances are equal
        /// </summary>
        /// <param name="input">Instance of QuickConnectResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuickConnectResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Authenticated == input.Authenticated ||
                    (this.Authenticated != null &&
                    this.Authenticated.Equals(input.Authenticated))
                ) && 
                (
                    this.Secret == input.Secret ||
                    (this.Secret != null &&
                    this.Secret.Equals(input.Secret))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Authentication == input.Authentication ||
                    (this.Authentication != null &&
                    this.Authentication.Equals(input.Authentication))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.DateAdded == input.DateAdded ||
                    (this.DateAdded != null &&
                    this.DateAdded.Equals(input.DateAdded))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Authenticated != null)
                    hashCode = hashCode * 59 + this.Authenticated.GetHashCode();
                if (this.Secret != null)
                    hashCode = hashCode * 59 + this.Secret.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Authentication != null)
                    hashCode = hashCode * 59 + this.Authentication.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.DateAdded != null)
                    hashCode = hashCode * 59 + this.DateAdded.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
