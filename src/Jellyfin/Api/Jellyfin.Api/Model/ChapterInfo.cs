/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Class ChapterInfo.
    /// </summary>
    [DataContract]
    public partial class ChapterInfo :  IEquatable<ChapterInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChapterInfo" /> class.
        /// </summary>
        /// <param name="startPositionTicks">Gets or sets the start position ticks..</param>
        /// <param name="name">Gets or sets the name..</param>
        /// <param name="imagePath">Gets or sets the image path..</param>
        /// <param name="imageDateModified">imageDateModified.</param>
        /// <param name="imageTag">imageTag.</param>
        public ChapterInfo(long startPositionTicks = default(long), string name = default(string), string imagePath = default(string), DateTime imageDateModified = default(DateTime), string imageTag = default(string))
        {
            this.Name = name;
            this.ImagePath = imagePath;
            this.ImageTag = imageTag;
            this.StartPositionTicks = startPositionTicks;
            this.Name = name;
            this.ImagePath = imagePath;
            this.ImageDateModified = imageDateModified;
            this.ImageTag = imageTag;
        }

        /// <summary>
        /// Gets or sets the start position ticks.
        /// </summary>
        /// <value>Gets or sets the start position ticks.</value>
        [DataMember(Name="StartPositionTicks", EmitDefaultValue=false)]
        public long StartPositionTicks { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>Gets or sets the name.</value>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the image path.
        /// </summary>
        /// <value>Gets or sets the image path.</value>
        [DataMember(Name="ImagePath", EmitDefaultValue=true)]
        public string ImagePath { get; set; }

        /// <summary>
        /// Gets or Sets ImageDateModified
        /// </summary>
        [DataMember(Name="ImageDateModified", EmitDefaultValue=false)]
        public DateTime ImageDateModified { get; set; }

        /// <summary>
        /// Gets or Sets ImageTag
        /// </summary>
        [DataMember(Name="ImageTag", EmitDefaultValue=true)]
        public string ImageTag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChapterInfo {\n");
            sb.Append("  StartPositionTicks: ").Append(StartPositionTicks).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ImagePath: ").Append(ImagePath).Append("\n");
            sb.Append("  ImageDateModified: ").Append(ImageDateModified).Append("\n");
            sb.Append("  ImageTag: ").Append(ImageTag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChapterInfo);
        }

        /// <summary>
        /// Returns true if ChapterInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ChapterInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChapterInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartPositionTicks == input.StartPositionTicks ||
                    (this.StartPositionTicks != null &&
                    this.StartPositionTicks.Equals(input.StartPositionTicks))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ImagePath == input.ImagePath ||
                    (this.ImagePath != null &&
                    this.ImagePath.Equals(input.ImagePath))
                ) && 
                (
                    this.ImageDateModified == input.ImageDateModified ||
                    (this.ImageDateModified != null &&
                    this.ImageDateModified.Equals(input.ImageDateModified))
                ) && 
                (
                    this.ImageTag == input.ImageTag ||
                    (this.ImageTag != null &&
                    this.ImageTag.Equals(input.ImageTag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartPositionTicks != null)
                    hashCode = hashCode * 59 + this.StartPositionTicks.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ImagePath != null)
                    hashCode = hashCode * 59 + this.ImagePath.GetHashCode();
                if (this.ImageDateModified != null)
                    hashCode = hashCode * 59 + this.ImageDateModified.GetHashCode();
                if (this.ImageTag != null)
                    hashCode = hashCode * 59 + this.ImageTag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
