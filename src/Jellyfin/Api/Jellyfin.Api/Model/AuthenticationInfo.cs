/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// AuthenticationInfo
    /// </summary>
    [DataContract]
    public partial class AuthenticationInfo :  IEquatable<AuthenticationInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationInfo" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the identifier..</param>
        /// <param name="accessToken">Gets or sets the access token..</param>
        /// <param name="deviceId">Gets or sets the device identifier..</param>
        /// <param name="appName">Gets or sets the name of the application..</param>
        /// <param name="appVersion">Gets or sets the application version..</param>
        /// <param name="deviceName">Gets or sets the name of the device..</param>
        /// <param name="userId">Gets or sets the user identifier..</param>
        /// <param name="isActive">Gets or sets a value indicating whether this instance is active..</param>
        /// <param name="dateCreated">Gets or sets the date created..</param>
        /// <param name="dateRevoked">Gets or sets the date revoked..</param>
        /// <param name="dateLastActivity">dateLastActivity.</param>
        /// <param name="userName">userName.</param>
        public AuthenticationInfo(long id = default(long), string accessToken = default(string), string deviceId = default(string), string appName = default(string), string appVersion = default(string), string deviceName = default(string), Guid userId = default(Guid), bool isActive = default(bool), DateTime dateCreated = default(DateTime), DateTime? dateRevoked = default(DateTime?), DateTime dateLastActivity = default(DateTime), string userName = default(string))
        {
            this.AccessToken = accessToken;
            this.DeviceId = deviceId;
            this.AppName = appName;
            this.AppVersion = appVersion;
            this.DeviceName = deviceName;
            this.DateRevoked = dateRevoked;
            this.UserName = userName;
            this.Id = id;
            this.AccessToken = accessToken;
            this.DeviceId = deviceId;
            this.AppName = appName;
            this.AppVersion = appVersion;
            this.DeviceName = deviceName;
            this.UserId = userId;
            this.IsActive = isActive;
            this.DateCreated = dateCreated;
            this.DateRevoked = dateRevoked;
            this.DateLastActivity = dateLastActivity;
            this.UserName = userName;
        }

        /// <summary>
        /// Gets or sets the identifier.
        /// </summary>
        /// <value>Gets or sets the identifier.</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or sets the access token.
        /// </summary>
        /// <value>Gets or sets the access token.</value>
        [DataMember(Name="AccessToken", EmitDefaultValue=true)]
        public string AccessToken { get; set; }

        /// <summary>
        /// Gets or sets the device identifier.
        /// </summary>
        /// <value>Gets or sets the device identifier.</value>
        [DataMember(Name="DeviceId", EmitDefaultValue=true)]
        public string DeviceId { get; set; }

        /// <summary>
        /// Gets or sets the name of the application.
        /// </summary>
        /// <value>Gets or sets the name of the application.</value>
        [DataMember(Name="AppName", EmitDefaultValue=true)]
        public string AppName { get; set; }

        /// <summary>
        /// Gets or sets the application version.
        /// </summary>
        /// <value>Gets or sets the application version.</value>
        [DataMember(Name="AppVersion", EmitDefaultValue=true)]
        public string AppVersion { get; set; }

        /// <summary>
        /// Gets or sets the name of the device.
        /// </summary>
        /// <value>Gets or sets the name of the device.</value>
        [DataMember(Name="DeviceName", EmitDefaultValue=true)]
        public string DeviceName { get; set; }

        /// <summary>
        /// Gets or sets the user identifier.
        /// </summary>
        /// <value>Gets or sets the user identifier.</value>
        [DataMember(Name="UserId", EmitDefaultValue=false)]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is active.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is active.</value>
        [DataMember(Name="IsActive", EmitDefaultValue=false)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or sets the date created.
        /// </summary>
        /// <value>Gets or sets the date created.</value>
        [DataMember(Name="DateCreated", EmitDefaultValue=false)]
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// Gets or sets the date revoked.
        /// </summary>
        /// <value>Gets or sets the date revoked.</value>
        [DataMember(Name="DateRevoked", EmitDefaultValue=true)]
        public DateTime? DateRevoked { get; set; }

        /// <summary>
        /// Gets or Sets DateLastActivity
        /// </summary>
        [DataMember(Name="DateLastActivity", EmitDefaultValue=false)]
        public DateTime DateLastActivity { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="UserName", EmitDefaultValue=true)]
        public string UserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthenticationInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  AppVersion: ").Append(AppVersion).Append("\n");
            sb.Append("  DeviceName: ").Append(DeviceName).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateRevoked: ").Append(DateRevoked).Append("\n");
            sb.Append("  DateLastActivity: ").Append(DateLastActivity).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthenticationInfo);
        }

        /// <summary>
        /// Returns true if AuthenticationInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthenticationInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthenticationInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AccessToken == input.AccessToken ||
                    (this.AccessToken != null &&
                    this.AccessToken.Equals(input.AccessToken))
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.AppName == input.AppName ||
                    (this.AppName != null &&
                    this.AppName.Equals(input.AppName))
                ) && 
                (
                    this.AppVersion == input.AppVersion ||
                    (this.AppVersion != null &&
                    this.AppVersion.Equals(input.AppVersion))
                ) && 
                (
                    this.DeviceName == input.DeviceName ||
                    (this.DeviceName != null &&
                    this.DeviceName.Equals(input.DeviceName))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.DateRevoked == input.DateRevoked ||
                    (this.DateRevoked != null &&
                    this.DateRevoked.Equals(input.DateRevoked))
                ) && 
                (
                    this.DateLastActivity == input.DateLastActivity ||
                    (this.DateLastActivity != null &&
                    this.DateLastActivity.Equals(input.DateLastActivity))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AccessToken != null)
                    hashCode = hashCode * 59 + this.AccessToken.GetHashCode();
                if (this.DeviceId != null)
                    hashCode = hashCode * 59 + this.DeviceId.GetHashCode();
                if (this.AppName != null)
                    hashCode = hashCode * 59 + this.AppName.GetHashCode();
                if (this.AppVersion != null)
                    hashCode = hashCode * 59 + this.AppVersion.GetHashCode();
                if (this.DeviceName != null)
                    hashCode = hashCode * 59 + this.DeviceName.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.DateCreated != null)
                    hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                if (this.DateRevoked != null)
                    hashCode = hashCode * 59 + this.DateRevoked.GetHashCode();
                if (this.DateLastActivity != null)
                    hashCode = hashCode * 59 + this.DateLastActivity.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
