/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Class GroupInfoDto.
    /// </summary>
    [DataContract]
    public partial class GroupInfoDto :  IEquatable<GroupInfoDto>, IValidatableObject
    {
        /// <summary>
        /// Gets the group state.
        /// </summary>
        /// <value>Gets the group state.</value>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public GroupStateType? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupInfoDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public GroupInfoDto()
        {
        }

        /// <summary>
        /// Gets the group identifier.
        /// </summary>
        /// <value>Gets the group identifier.</value>
        [DataMember(Name="GroupId", EmitDefaultValue=false)]
        public Guid GroupId { get; private set; }

        /// <summary>
        /// Gets the group name.
        /// </summary>
        /// <value>Gets the group name.</value>
        [DataMember(Name="GroupName", EmitDefaultValue=true)]
        public string GroupName { get; private set; }


        /// <summary>
        /// Gets the participants.
        /// </summary>
        /// <value>Gets the participants.</value>
        [DataMember(Name="Participants", EmitDefaultValue=true)]
        public List<string> Participants { get; private set; }

        /// <summary>
        /// Gets the date when this DTO has been created.
        /// </summary>
        /// <value>Gets the date when this DTO has been created.</value>
        [DataMember(Name="LastUpdatedAt", EmitDefaultValue=false)]
        public DateTime LastUpdatedAt { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GroupInfoDto {\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Participants: ").Append(Participants).Append("\n");
            sb.Append("  LastUpdatedAt: ").Append(LastUpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupInfoDto);
        }

        /// <summary>
        /// Returns true if GroupInfoDto instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupInfoDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupInfoDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Participants == input.Participants ||
                    this.Participants != null &&
                    input.Participants != null &&
                    this.Participants.SequenceEqual(input.Participants)
                ) && 
                (
                    this.LastUpdatedAt == input.LastUpdatedAt ||
                    (this.LastUpdatedAt != null &&
                    this.LastUpdatedAt.Equals(input.LastUpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.GroupName != null)
                    hashCode = hashCode * 59 + this.GroupName.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Participants != null)
                    hashCode = hashCode * 59 + this.Participants.GetHashCode();
                if (this.LastUpdatedAt != null)
                    hashCode = hashCode * 59 + this.LastUpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
