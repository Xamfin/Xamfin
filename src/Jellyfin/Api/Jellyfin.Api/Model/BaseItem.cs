/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Class BaseItem.
    /// </summary>
    [DataContract]
    public partial class BaseItem :  IEquatable<BaseItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseItem" /> class.
        /// </summary>
        /// <param name="size">size.</param>
        /// <param name="container">container.</param>
        /// <param name="dateLastSaved">dateLastSaved.</param>
        /// <param name="remoteTrailers">Gets or sets the remote trailers..</param>
        /// <param name="isShortcut">isShortcut.</param>
        /// <param name="shortcutPath">shortcutPath.</param>
        /// <param name="width">width.</param>
        /// <param name="height">height.</param>
        /// <param name="extraIds">extraIds.</param>
        public BaseItem(long? size = default(long?), string container = default(string), DateTime dateLastSaved = default(DateTime), List<MediaUrl> remoteTrailers = default(List<MediaUrl>), bool isShortcut = default(bool), string shortcutPath = default(string), int width = default(int), int height = default(int), List<Guid> extraIds = default(List<Guid>))
        {
            this.Size = size;
            this.Container = container;
            this.RemoteTrailers = remoteTrailers;
            this.ShortcutPath = shortcutPath;
            this.ExtraIds = extraIds;
            this.Size = size;
            this.Container = container;
            this.DateLastSaved = dateLastSaved;
            this.RemoteTrailers = remoteTrailers;
            this.IsShortcut = isShortcut;
            this.ShortcutPath = shortcutPath;
            this.Width = width;
            this.Height = height;
            this.ExtraIds = extraIds;
        }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="Size", EmitDefaultValue=true)]
        public long? Size { get; set; }

        /// <summary>
        /// Gets or Sets Container
        /// </summary>
        [DataMember(Name="Container", EmitDefaultValue=true)]
        public string Container { get; set; }

        /// <summary>
        /// Gets or Sets DateLastSaved
        /// </summary>
        [DataMember(Name="DateLastSaved", EmitDefaultValue=false)]
        public DateTime DateLastSaved { get; set; }

        /// <summary>
        /// Gets or sets the remote trailers.
        /// </summary>
        /// <value>Gets or sets the remote trailers.</value>
        [DataMember(Name="RemoteTrailers", EmitDefaultValue=true)]
        public List<MediaUrl> RemoteTrailers { get; set; }

        /// <summary>
        /// Gets or Sets IsHD
        /// </summary>
        [DataMember(Name="IsHD", EmitDefaultValue=false)]
        public bool IsHD { get; private set; }

        /// <summary>
        /// Gets or Sets IsShortcut
        /// </summary>
        [DataMember(Name="IsShortcut", EmitDefaultValue=false)]
        public bool IsShortcut { get; set; }

        /// <summary>
        /// Gets or Sets ShortcutPath
        /// </summary>
        [DataMember(Name="ShortcutPath", EmitDefaultValue=true)]
        public string ShortcutPath { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name="Width", EmitDefaultValue=false)]
        public int Width { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="Height", EmitDefaultValue=false)]
        public int Height { get; set; }

        /// <summary>
        /// Gets or Sets ExtraIds
        /// </summary>
        [DataMember(Name="ExtraIds", EmitDefaultValue=true)]
        public List<Guid> ExtraIds { get; set; }

        /// <summary>
        /// Gets or Sets SupportsExternalTransfer
        /// </summary>
        [DataMember(Name="SupportsExternalTransfer", EmitDefaultValue=false)]
        public bool SupportsExternalTransfer { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaseItem {\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  DateLastSaved: ").Append(DateLastSaved).Append("\n");
            sb.Append("  RemoteTrailers: ").Append(RemoteTrailers).Append("\n");
            sb.Append("  IsHD: ").Append(IsHD).Append("\n");
            sb.Append("  IsShortcut: ").Append(IsShortcut).Append("\n");
            sb.Append("  ShortcutPath: ").Append(ShortcutPath).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  ExtraIds: ").Append(ExtraIds).Append("\n");
            sb.Append("  SupportsExternalTransfer: ").Append(SupportsExternalTransfer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BaseItem);
        }

        /// <summary>
        /// Returns true if BaseItem instances are equal
        /// </summary>
        /// <param name="input">Instance of BaseItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaseItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Container == input.Container ||
                    (this.Container != null &&
                    this.Container.Equals(input.Container))
                ) && 
                (
                    this.DateLastSaved == input.DateLastSaved ||
                    (this.DateLastSaved != null &&
                    this.DateLastSaved.Equals(input.DateLastSaved))
                ) && 
                (
                    this.RemoteTrailers == input.RemoteTrailers ||
                    this.RemoteTrailers != null &&
                    input.RemoteTrailers != null &&
                    this.RemoteTrailers.SequenceEqual(input.RemoteTrailers)
                ) && 
                (
                    this.IsHD == input.IsHD ||
                    (this.IsHD != null &&
                    this.IsHD.Equals(input.IsHD))
                ) && 
                (
                    this.IsShortcut == input.IsShortcut ||
                    (this.IsShortcut != null &&
                    this.IsShortcut.Equals(input.IsShortcut))
                ) && 
                (
                    this.ShortcutPath == input.ShortcutPath ||
                    (this.ShortcutPath != null &&
                    this.ShortcutPath.Equals(input.ShortcutPath))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.ExtraIds == input.ExtraIds ||
                    this.ExtraIds != null &&
                    input.ExtraIds != null &&
                    this.ExtraIds.SequenceEqual(input.ExtraIds)
                ) && 
                (
                    this.SupportsExternalTransfer == input.SupportsExternalTransfer ||
                    (this.SupportsExternalTransfer != null &&
                    this.SupportsExternalTransfer.Equals(input.SupportsExternalTransfer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Container != null)
                    hashCode = hashCode * 59 + this.Container.GetHashCode();
                if (this.DateLastSaved != null)
                    hashCode = hashCode * 59 + this.DateLastSaved.GetHashCode();
                if (this.RemoteTrailers != null)
                    hashCode = hashCode * 59 + this.RemoteTrailers.GetHashCode();
                if (this.IsHD != null)
                    hashCode = hashCode * 59 + this.IsHD.GetHashCode();
                if (this.IsShortcut != null)
                    hashCode = hashCode * 59 + this.IsShortcut.GetHashCode();
                if (this.ShortcutPath != null)
                    hashCode = hashCode * 59 + this.ShortcutPath.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.ExtraIds != null)
                    hashCode = hashCode * 59 + this.ExtraIds.GetHashCode();
                if (this.SupportsExternalTransfer != null)
                    hashCode = hashCode * 59 + this.SupportsExternalTransfer.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
