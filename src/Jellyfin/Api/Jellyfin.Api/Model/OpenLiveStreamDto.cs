/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Open live stream dto.
    /// </summary>
    [DataContract]
    public partial class OpenLiveStreamDto :  IEquatable<OpenLiveStreamDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenLiveStreamDto" /> class.
        /// </summary>
        /// <param name="openToken">Gets or sets the open token..</param>
        /// <param name="userId">Gets or sets the user id..</param>
        /// <param name="playSessionId">Gets or sets the play session id..</param>
        /// <param name="maxStreamingBitrate">Gets or sets the max streaming bitrate..</param>
        /// <param name="startTimeTicks">Gets or sets the start time in ticks..</param>
        /// <param name="audioStreamIndex">Gets or sets the audio stream index..</param>
        /// <param name="subtitleStreamIndex">Gets or sets the subtitle stream index..</param>
        /// <param name="maxAudioChannels">Gets or sets the max audio channels..</param>
        /// <param name="itemId">Gets or sets the item id..</param>
        /// <param name="enableDirectPlay">Gets or sets a value indicating whether to enable direct play..</param>
        /// <param name="enableDirectStream">Gets or sets a value indicating whether to enale direct stream..</param>
        /// <param name="deviceProfile">Gets or sets the device profile..</param>
        /// <param name="directPlayProtocols">Gets or sets the device play protocols..</param>
        public OpenLiveStreamDto(string openToken = default(string), Guid? userId = default(Guid?), string playSessionId = default(string), int? maxStreamingBitrate = default(int?), long? startTimeTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? maxAudioChannels = default(int?), Guid? itemId = default(Guid?), bool? enableDirectPlay = default(bool?), bool? enableDirectStream = default(bool?), DeviceProfile deviceProfile = default(DeviceProfile), List<MediaProtocol> directPlayProtocols = default(List<MediaProtocol>))
        {
            this.OpenToken = openToken;
            this.UserId = userId;
            this.PlaySessionId = playSessionId;
            this.MaxStreamingBitrate = maxStreamingBitrate;
            this.StartTimeTicks = startTimeTicks;
            this.AudioStreamIndex = audioStreamIndex;
            this.SubtitleStreamIndex = subtitleStreamIndex;
            this.MaxAudioChannels = maxAudioChannels;
            this.ItemId = itemId;
            this.EnableDirectPlay = enableDirectPlay;
            this.EnableDirectStream = enableDirectStream;
            this.DeviceProfile = deviceProfile;
            this.DirectPlayProtocols = directPlayProtocols;
            this.OpenToken = openToken;
            this.UserId = userId;
            this.PlaySessionId = playSessionId;
            this.MaxStreamingBitrate = maxStreamingBitrate;
            this.StartTimeTicks = startTimeTicks;
            this.AudioStreamIndex = audioStreamIndex;
            this.SubtitleStreamIndex = subtitleStreamIndex;
            this.MaxAudioChannels = maxAudioChannels;
            this.ItemId = itemId;
            this.EnableDirectPlay = enableDirectPlay;
            this.EnableDirectStream = enableDirectStream;
            this.DeviceProfile = deviceProfile;
            this.DirectPlayProtocols = directPlayProtocols;
        }

        /// <summary>
        /// Gets or sets the open token.
        /// </summary>
        /// <value>Gets or sets the open token.</value>
        [DataMember(Name="OpenToken", EmitDefaultValue=true)]
        public string OpenToken { get; set; }

        /// <summary>
        /// Gets or sets the user id.
        /// </summary>
        /// <value>Gets or sets the user id.</value>
        [DataMember(Name="UserId", EmitDefaultValue=true)]
        public Guid? UserId { get; set; }

        /// <summary>
        /// Gets or sets the play session id.
        /// </summary>
        /// <value>Gets or sets the play session id.</value>
        [DataMember(Name="PlaySessionId", EmitDefaultValue=true)]
        public string PlaySessionId { get; set; }

        /// <summary>
        /// Gets or sets the max streaming bitrate.
        /// </summary>
        /// <value>Gets or sets the max streaming bitrate.</value>
        [DataMember(Name="MaxStreamingBitrate", EmitDefaultValue=true)]
        public int? MaxStreamingBitrate { get; set; }

        /// <summary>
        /// Gets or sets the start time in ticks.
        /// </summary>
        /// <value>Gets or sets the start time in ticks.</value>
        [DataMember(Name="StartTimeTicks", EmitDefaultValue=true)]
        public long? StartTimeTicks { get; set; }

        /// <summary>
        /// Gets or sets the audio stream index.
        /// </summary>
        /// <value>Gets or sets the audio stream index.</value>
        [DataMember(Name="AudioStreamIndex", EmitDefaultValue=true)]
        public int? AudioStreamIndex { get; set; }

        /// <summary>
        /// Gets or sets the subtitle stream index.
        /// </summary>
        /// <value>Gets or sets the subtitle stream index.</value>
        [DataMember(Name="SubtitleStreamIndex", EmitDefaultValue=true)]
        public int? SubtitleStreamIndex { get; set; }

        /// <summary>
        /// Gets or sets the max audio channels.
        /// </summary>
        /// <value>Gets or sets the max audio channels.</value>
        [DataMember(Name="MaxAudioChannels", EmitDefaultValue=true)]
        public int? MaxAudioChannels { get; set; }

        /// <summary>
        /// Gets or sets the item id.
        /// </summary>
        /// <value>Gets or sets the item id.</value>
        [DataMember(Name="ItemId", EmitDefaultValue=true)]
        public Guid? ItemId { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to enable direct play.
        /// </summary>
        /// <value>Gets or sets a value indicating whether to enable direct play.</value>
        [DataMember(Name="EnableDirectPlay", EmitDefaultValue=true)]
        public bool? EnableDirectPlay { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to enale direct stream.
        /// </summary>
        /// <value>Gets or sets a value indicating whether to enale direct stream.</value>
        [DataMember(Name="EnableDirectStream", EmitDefaultValue=true)]
        public bool? EnableDirectStream { get; set; }

        /// <summary>
        /// Gets or sets the device profile.
        /// </summary>
        /// <value>Gets or sets the device profile.</value>
        [DataMember(Name="DeviceProfile", EmitDefaultValue=true)]
        public DeviceProfile DeviceProfile { get; set; }

        /// <summary>
        /// Gets or sets the device play protocols.
        /// </summary>
        /// <value>Gets or sets the device play protocols.</value>
        [DataMember(Name="DirectPlayProtocols", EmitDefaultValue=true)]
        public List<MediaProtocol> DirectPlayProtocols { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OpenLiveStreamDto {\n");
            sb.Append("  OpenToken: ").Append(OpenToken).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  PlaySessionId: ").Append(PlaySessionId).Append("\n");
            sb.Append("  MaxStreamingBitrate: ").Append(MaxStreamingBitrate).Append("\n");
            sb.Append("  StartTimeTicks: ").Append(StartTimeTicks).Append("\n");
            sb.Append("  AudioStreamIndex: ").Append(AudioStreamIndex).Append("\n");
            sb.Append("  SubtitleStreamIndex: ").Append(SubtitleStreamIndex).Append("\n");
            sb.Append("  MaxAudioChannels: ").Append(MaxAudioChannels).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  EnableDirectPlay: ").Append(EnableDirectPlay).Append("\n");
            sb.Append("  EnableDirectStream: ").Append(EnableDirectStream).Append("\n");
            sb.Append("  DeviceProfile: ").Append(DeviceProfile).Append("\n");
            sb.Append("  DirectPlayProtocols: ").Append(DirectPlayProtocols).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OpenLiveStreamDto);
        }

        /// <summary>
        /// Returns true if OpenLiveStreamDto instances are equal
        /// </summary>
        /// <param name="input">Instance of OpenLiveStreamDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpenLiveStreamDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OpenToken == input.OpenToken ||
                    (this.OpenToken != null &&
                    this.OpenToken.Equals(input.OpenToken))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.PlaySessionId == input.PlaySessionId ||
                    (this.PlaySessionId != null &&
                    this.PlaySessionId.Equals(input.PlaySessionId))
                ) && 
                (
                    this.MaxStreamingBitrate == input.MaxStreamingBitrate ||
                    (this.MaxStreamingBitrate != null &&
                    this.MaxStreamingBitrate.Equals(input.MaxStreamingBitrate))
                ) && 
                (
                    this.StartTimeTicks == input.StartTimeTicks ||
                    (this.StartTimeTicks != null &&
                    this.StartTimeTicks.Equals(input.StartTimeTicks))
                ) && 
                (
                    this.AudioStreamIndex == input.AudioStreamIndex ||
                    (this.AudioStreamIndex != null &&
                    this.AudioStreamIndex.Equals(input.AudioStreamIndex))
                ) && 
                (
                    this.SubtitleStreamIndex == input.SubtitleStreamIndex ||
                    (this.SubtitleStreamIndex != null &&
                    this.SubtitleStreamIndex.Equals(input.SubtitleStreamIndex))
                ) && 
                (
                    this.MaxAudioChannels == input.MaxAudioChannels ||
                    (this.MaxAudioChannels != null &&
                    this.MaxAudioChannels.Equals(input.MaxAudioChannels))
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.EnableDirectPlay == input.EnableDirectPlay ||
                    (this.EnableDirectPlay != null &&
                    this.EnableDirectPlay.Equals(input.EnableDirectPlay))
                ) && 
                (
                    this.EnableDirectStream == input.EnableDirectStream ||
                    (this.EnableDirectStream != null &&
                    this.EnableDirectStream.Equals(input.EnableDirectStream))
                ) && 
                (
                    this.DeviceProfile == input.DeviceProfile ||
                    (this.DeviceProfile != null &&
                    this.DeviceProfile.Equals(input.DeviceProfile))
                ) && 
                (
                    this.DirectPlayProtocols == input.DirectPlayProtocols ||
                    this.DirectPlayProtocols != null &&
                    input.DirectPlayProtocols != null &&
                    this.DirectPlayProtocols.SequenceEqual(input.DirectPlayProtocols)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OpenToken != null)
                    hashCode = hashCode * 59 + this.OpenToken.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.PlaySessionId != null)
                    hashCode = hashCode * 59 + this.PlaySessionId.GetHashCode();
                if (this.MaxStreamingBitrate != null)
                    hashCode = hashCode * 59 + this.MaxStreamingBitrate.GetHashCode();
                if (this.StartTimeTicks != null)
                    hashCode = hashCode * 59 + this.StartTimeTicks.GetHashCode();
                if (this.AudioStreamIndex != null)
                    hashCode = hashCode * 59 + this.AudioStreamIndex.GetHashCode();
                if (this.SubtitleStreamIndex != null)
                    hashCode = hashCode * 59 + this.SubtitleStreamIndex.GetHashCode();
                if (this.MaxAudioChannels != null)
                    hashCode = hashCode * 59 + this.MaxAudioChannels.GetHashCode();
                if (this.ItemId != null)
                    hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                if (this.EnableDirectPlay != null)
                    hashCode = hashCode * 59 + this.EnableDirectPlay.GetHashCode();
                if (this.EnableDirectStream != null)
                    hashCode = hashCode * 59 + this.EnableDirectStream.GetHashCode();
                if (this.DeviceProfile != null)
                    hashCode = hashCode * 59 + this.DeviceProfile.GetHashCode();
                if (this.DirectPlayProtocols != null)
                    hashCode = hashCode * 59 + this.DirectPlayProtocols.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
