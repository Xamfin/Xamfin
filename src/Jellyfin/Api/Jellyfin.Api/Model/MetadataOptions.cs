/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Class MetadataOptions.
    /// </summary>
    [DataContract]
    public partial class MetadataOptions :  IEquatable<MetadataOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataOptions" /> class.
        /// </summary>
        /// <param name="itemType">itemType.</param>
        /// <param name="disabledMetadataSavers">disabledMetadataSavers.</param>
        /// <param name="localMetadataReaderOrder">localMetadataReaderOrder.</param>
        /// <param name="disabledMetadataFetchers">disabledMetadataFetchers.</param>
        /// <param name="metadataFetcherOrder">metadataFetcherOrder.</param>
        /// <param name="disabledImageFetchers">disabledImageFetchers.</param>
        /// <param name="imageFetcherOrder">imageFetcherOrder.</param>
        public MetadataOptions(string itemType = default(string), List<string> disabledMetadataSavers = default(List<string>), List<string> localMetadataReaderOrder = default(List<string>), List<string> disabledMetadataFetchers = default(List<string>), List<string> metadataFetcherOrder = default(List<string>), List<string> disabledImageFetchers = default(List<string>), List<string> imageFetcherOrder = default(List<string>))
        {
            this.ItemType = itemType;
            this.DisabledMetadataSavers = disabledMetadataSavers;
            this.LocalMetadataReaderOrder = localMetadataReaderOrder;
            this.DisabledMetadataFetchers = disabledMetadataFetchers;
            this.MetadataFetcherOrder = metadataFetcherOrder;
            this.DisabledImageFetchers = disabledImageFetchers;
            this.ImageFetcherOrder = imageFetcherOrder;
            this.ItemType = itemType;
            this.DisabledMetadataSavers = disabledMetadataSavers;
            this.LocalMetadataReaderOrder = localMetadataReaderOrder;
            this.DisabledMetadataFetchers = disabledMetadataFetchers;
            this.MetadataFetcherOrder = metadataFetcherOrder;
            this.DisabledImageFetchers = disabledImageFetchers;
            this.ImageFetcherOrder = imageFetcherOrder;
        }

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name="ItemType", EmitDefaultValue=true)]
        public string ItemType { get; set; }

        /// <summary>
        /// Gets or Sets DisabledMetadataSavers
        /// </summary>
        [DataMember(Name="DisabledMetadataSavers", EmitDefaultValue=true)]
        public List<string> DisabledMetadataSavers { get; set; }

        /// <summary>
        /// Gets or Sets LocalMetadataReaderOrder
        /// </summary>
        [DataMember(Name="LocalMetadataReaderOrder", EmitDefaultValue=true)]
        public List<string> LocalMetadataReaderOrder { get; set; }

        /// <summary>
        /// Gets or Sets DisabledMetadataFetchers
        /// </summary>
        [DataMember(Name="DisabledMetadataFetchers", EmitDefaultValue=true)]
        public List<string> DisabledMetadataFetchers { get; set; }

        /// <summary>
        /// Gets or Sets MetadataFetcherOrder
        /// </summary>
        [DataMember(Name="MetadataFetcherOrder", EmitDefaultValue=true)]
        public List<string> MetadataFetcherOrder { get; set; }

        /// <summary>
        /// Gets or Sets DisabledImageFetchers
        /// </summary>
        [DataMember(Name="DisabledImageFetchers", EmitDefaultValue=true)]
        public List<string> DisabledImageFetchers { get; set; }

        /// <summary>
        /// Gets or Sets ImageFetcherOrder
        /// </summary>
        [DataMember(Name="ImageFetcherOrder", EmitDefaultValue=true)]
        public List<string> ImageFetcherOrder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MetadataOptions {\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  DisabledMetadataSavers: ").Append(DisabledMetadataSavers).Append("\n");
            sb.Append("  LocalMetadataReaderOrder: ").Append(LocalMetadataReaderOrder).Append("\n");
            sb.Append("  DisabledMetadataFetchers: ").Append(DisabledMetadataFetchers).Append("\n");
            sb.Append("  MetadataFetcherOrder: ").Append(MetadataFetcherOrder).Append("\n");
            sb.Append("  DisabledImageFetchers: ").Append(DisabledImageFetchers).Append("\n");
            sb.Append("  ImageFetcherOrder: ").Append(ImageFetcherOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetadataOptions);
        }

        /// <summary>
        /// Returns true if MetadataOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of MetadataOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetadataOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemType == input.ItemType ||
                    (this.ItemType != null &&
                    this.ItemType.Equals(input.ItemType))
                ) && 
                (
                    this.DisabledMetadataSavers == input.DisabledMetadataSavers ||
                    this.DisabledMetadataSavers != null &&
                    input.DisabledMetadataSavers != null &&
                    this.DisabledMetadataSavers.SequenceEqual(input.DisabledMetadataSavers)
                ) && 
                (
                    this.LocalMetadataReaderOrder == input.LocalMetadataReaderOrder ||
                    this.LocalMetadataReaderOrder != null &&
                    input.LocalMetadataReaderOrder != null &&
                    this.LocalMetadataReaderOrder.SequenceEqual(input.LocalMetadataReaderOrder)
                ) && 
                (
                    this.DisabledMetadataFetchers == input.DisabledMetadataFetchers ||
                    this.DisabledMetadataFetchers != null &&
                    input.DisabledMetadataFetchers != null &&
                    this.DisabledMetadataFetchers.SequenceEqual(input.DisabledMetadataFetchers)
                ) && 
                (
                    this.MetadataFetcherOrder == input.MetadataFetcherOrder ||
                    this.MetadataFetcherOrder != null &&
                    input.MetadataFetcherOrder != null &&
                    this.MetadataFetcherOrder.SequenceEqual(input.MetadataFetcherOrder)
                ) && 
                (
                    this.DisabledImageFetchers == input.DisabledImageFetchers ||
                    this.DisabledImageFetchers != null &&
                    input.DisabledImageFetchers != null &&
                    this.DisabledImageFetchers.SequenceEqual(input.DisabledImageFetchers)
                ) && 
                (
                    this.ImageFetcherOrder == input.ImageFetcherOrder ||
                    this.ImageFetcherOrder != null &&
                    input.ImageFetcherOrder != null &&
                    this.ImageFetcherOrder.SequenceEqual(input.ImageFetcherOrder)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemType != null)
                    hashCode = hashCode * 59 + this.ItemType.GetHashCode();
                if (this.DisabledMetadataSavers != null)
                    hashCode = hashCode * 59 + this.DisabledMetadataSavers.GetHashCode();
                if (this.LocalMetadataReaderOrder != null)
                    hashCode = hashCode * 59 + this.LocalMetadataReaderOrder.GetHashCode();
                if (this.DisabledMetadataFetchers != null)
                    hashCode = hashCode * 59 + this.DisabledMetadataFetchers.GetHashCode();
                if (this.MetadataFetcherOrder != null)
                    hashCode = hashCode * 59 + this.MetadataFetcherOrder.GetHashCode();
                if (this.DisabledImageFetchers != null)
                    hashCode = hashCode * 59 + this.DisabledImageFetchers.GetHashCode();
                if (this.ImageFetcherOrder != null)
                    hashCode = hashCode * 59 + this.ImageFetcherOrder.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
