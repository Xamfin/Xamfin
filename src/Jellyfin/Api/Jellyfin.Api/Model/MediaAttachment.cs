/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Class MediaAttachment.
    /// </summary>
    [DataContract]
    public partial class MediaAttachment :  IEquatable<MediaAttachment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaAttachment" /> class.
        /// </summary>
        /// <param name="codec">Gets or sets the codec..</param>
        /// <param name="codecTag">Gets or sets the codec tag..</param>
        /// <param name="comment">Gets or sets the comment..</param>
        /// <param name="index">Gets or sets the index..</param>
        /// <param name="fileName">Gets or sets the filename..</param>
        /// <param name="mimeType">Gets or sets the MIME type..</param>
        /// <param name="deliveryUrl">Gets or sets the delivery URL..</param>
        public MediaAttachment(string codec = default(string), string codecTag = default(string), string comment = default(string), int index = default(int), string fileName = default(string), string mimeType = default(string), string deliveryUrl = default(string))
        {
            this.Codec = codec;
            this.CodecTag = codecTag;
            this.Comment = comment;
            this.FileName = fileName;
            this.MimeType = mimeType;
            this.DeliveryUrl = deliveryUrl;
            this.Codec = codec;
            this.CodecTag = codecTag;
            this.Comment = comment;
            this.Index = index;
            this.FileName = fileName;
            this.MimeType = mimeType;
            this.DeliveryUrl = deliveryUrl;
        }

        /// <summary>
        /// Gets or sets the codec.
        /// </summary>
        /// <value>Gets or sets the codec.</value>
        [DataMember(Name="Codec", EmitDefaultValue=true)]
        public string Codec { get; set; }

        /// <summary>
        /// Gets or sets the codec tag.
        /// </summary>
        /// <value>Gets or sets the codec tag.</value>
        [DataMember(Name="CodecTag", EmitDefaultValue=true)]
        public string CodecTag { get; set; }

        /// <summary>
        /// Gets or sets the comment.
        /// </summary>
        /// <value>Gets or sets the comment.</value>
        [DataMember(Name="Comment", EmitDefaultValue=true)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or sets the index.
        /// </summary>
        /// <value>Gets or sets the index.</value>
        [DataMember(Name="Index", EmitDefaultValue=false)]
        public int Index { get; set; }

        /// <summary>
        /// Gets or sets the filename.
        /// </summary>
        /// <value>Gets or sets the filename.</value>
        [DataMember(Name="FileName", EmitDefaultValue=true)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or sets the MIME type.
        /// </summary>
        /// <value>Gets or sets the MIME type.</value>
        [DataMember(Name="MimeType", EmitDefaultValue=true)]
        public string MimeType { get; set; }

        /// <summary>
        /// Gets or sets the delivery URL.
        /// </summary>
        /// <value>Gets or sets the delivery URL.</value>
        [DataMember(Name="DeliveryUrl", EmitDefaultValue=true)]
        public string DeliveryUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaAttachment {\n");
            sb.Append("  Codec: ").Append(Codec).Append("\n");
            sb.Append("  CodecTag: ").Append(CodecTag).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  DeliveryUrl: ").Append(DeliveryUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediaAttachment);
        }

        /// <summary>
        /// Returns true if MediaAttachment instances are equal
        /// </summary>
        /// <param name="input">Instance of MediaAttachment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaAttachment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Codec == input.Codec ||
                    (this.Codec != null &&
                    this.Codec.Equals(input.Codec))
                ) && 
                (
                    this.CodecTag == input.CodecTag ||
                    (this.CodecTag != null &&
                    this.CodecTag.Equals(input.CodecTag))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.MimeType == input.MimeType ||
                    (this.MimeType != null &&
                    this.MimeType.Equals(input.MimeType))
                ) && 
                (
                    this.DeliveryUrl == input.DeliveryUrl ||
                    (this.DeliveryUrl != null &&
                    this.DeliveryUrl.Equals(input.DeliveryUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Codec != null)
                    hashCode = hashCode * 59 + this.Codec.GetHashCode();
                if (this.CodecTag != null)
                    hashCode = hashCode * 59 + this.CodecTag.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.MimeType != null)
                    hashCode = hashCode * 59 + this.MimeType.GetHashCode();
                if (this.DeliveryUrl != null)
                    hashCode = hashCode * 59 + this.DeliveryUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
