/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// This is a serializable stub class that is used by the api to provide information about installed plugins.
    /// </summary>
    [DataContract]
    public partial class PluginInfo :  IEquatable<PluginInfo>, IValidatableObject
    {
        /// <summary>
        /// Gets or sets a value indicating the status of the plugin.
        /// </summary>
        /// <value>Gets or sets a value indicating the status of the plugin.</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public PluginStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PluginInfo" /> class.
        /// </summary>
        /// <param name="name">Gets or sets the name..</param>
        /// <param name="version">Gets or sets the version..</param>
        /// <param name="configurationFileName">Gets or sets the name of the configuration file..</param>
        /// <param name="description">Gets or sets the description..</param>
        /// <param name="id">Gets or sets the unique id..</param>
        /// <param name="canUninstall">Gets or sets a value indicating whether the plugin can be uninstalled..</param>
        /// <param name="hasImage">Gets or sets a value indicating whether this plugin has a valid image..</param>
        /// <param name="status">Gets or sets a value indicating the status of the plugin..</param>
        public PluginInfo(string name = default(string), Version version = default(Version), string configurationFileName = default(string), string description = default(string), Guid id = default(Guid), bool canUninstall = default(bool), bool hasImage = default(bool), PluginStatus? status = default(PluginStatus?))
        {
            this.Name = name;
            this.Version = version;
            this.ConfigurationFileName = configurationFileName;
            this.Description = description;
            this.Name = name;
            this.Version = version;
            this.ConfigurationFileName = configurationFileName;
            this.Description = description;
            this.Id = id;
            this.CanUninstall = canUninstall;
            this.HasImage = hasImage;
            this.Status = status;
        }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>Gets or sets the name.</value>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the version.
        /// </summary>
        /// <value>Gets or sets the version.</value>
        [DataMember(Name="Version", EmitDefaultValue=true)]
        public Version Version { get; set; }

        /// <summary>
        /// Gets or sets the name of the configuration file.
        /// </summary>
        /// <value>Gets or sets the name of the configuration file.</value>
        [DataMember(Name="ConfigurationFileName", EmitDefaultValue=true)]
        public string ConfigurationFileName { get; set; }

        /// <summary>
        /// Gets or sets the description.
        /// </summary>
        /// <value>Gets or sets the description.</value>
        [DataMember(Name="Description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the unique id.
        /// </summary>
        /// <value>Gets or sets the unique id.</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the plugin can be uninstalled.
        /// </summary>
        /// <value>Gets or sets a value indicating whether the plugin can be uninstalled.</value>
        [DataMember(Name="CanUninstall", EmitDefaultValue=false)]
        public bool CanUninstall { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this plugin has a valid image.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this plugin has a valid image.</value>
        [DataMember(Name="HasImage", EmitDefaultValue=false)]
        public bool HasImage { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PluginInfo {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  ConfigurationFileName: ").Append(ConfigurationFileName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CanUninstall: ").Append(CanUninstall).Append("\n");
            sb.Append("  HasImage: ").Append(HasImage).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PluginInfo);
        }

        /// <summary>
        /// Returns true if PluginInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of PluginInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PluginInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.ConfigurationFileName == input.ConfigurationFileName ||
                    (this.ConfigurationFileName != null &&
                    this.ConfigurationFileName.Equals(input.ConfigurationFileName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CanUninstall == input.CanUninstall ||
                    (this.CanUninstall != null &&
                    this.CanUninstall.Equals(input.CanUninstall))
                ) && 
                (
                    this.HasImage == input.HasImage ||
                    (this.HasImage != null &&
                    this.HasImage.Equals(input.HasImage))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.ConfigurationFileName != null)
                    hashCode = hashCode * 59 + this.ConfigurationFileName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CanUninstall != null)
                    hashCode = hashCode * 59 + this.CanUninstall.GetHashCode();
                if (this.HasImage != null)
                    hashCode = hashCode * 59 + this.HasImage.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
