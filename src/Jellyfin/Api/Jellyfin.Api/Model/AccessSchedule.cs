/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// An entity representing a user&#39;s access schedule.
    /// </summary>
    [DataContract]
    public partial class AccessSchedule :  IEquatable<AccessSchedule>, IValidatableObject
    {
        /// <summary>
        /// Gets or sets the day of week.
        /// </summary>
        /// <value>Gets or sets the day of week.</value>
        [DataMember(Name="DayOfWeek", EmitDefaultValue=true)]
        public DynamicDayOfWeek DayOfWeek { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessSchedule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccessSchedule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessSchedule" /> class.
        /// </summary>
        /// <param name="dayOfWeek">Gets or sets the day of week. (required).</param>
        /// <param name="startHour">Gets or sets the start hour. (required).</param>
        /// <param name="endHour">Gets or sets the end hour. (required).</param>
        public AccessSchedule(DynamicDayOfWeek dayOfWeek = default(DynamicDayOfWeek), double startHour = default(double), double endHour = default(double))
        {
            // to ensure "dayOfWeek" is required (not null)
            if (dayOfWeek == null)
            {
                throw new InvalidDataException("dayOfWeek is a required property for AccessSchedule and cannot be null");
            }
            else
            {
                this.DayOfWeek = dayOfWeek;
            }

            // to ensure "startHour" is required (not null)
            if (startHour == null)
            {
                throw new InvalidDataException("startHour is a required property for AccessSchedule and cannot be null");
            }
            else
            {
                this.StartHour = startHour;
            }

            // to ensure "endHour" is required (not null)
            if (endHour == null)
            {
                throw new InvalidDataException("endHour is a required property for AccessSchedule and cannot be null");
            }
            else
            {
                this.EndHour = endHour;
            }

        }

        /// <summary>
        /// Gets or sets the id of this instance.
        /// </summary>
        /// <value>Gets or sets the id of this instance.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public int Id { get; private set; }

        /// <summary>
        /// Gets or sets the id of the associated user.
        /// </summary>
        /// <value>Gets or sets the id of the associated user.</value>
        [DataMember(Name="UserId", EmitDefaultValue=true)]
        public Guid UserId { get; private set; }


        /// <summary>
        /// Gets or sets the start hour.
        /// </summary>
        /// <value>Gets or sets the start hour.</value>
        [DataMember(Name="StartHour", EmitDefaultValue=true)]
        public double StartHour { get; set; }

        /// <summary>
        /// Gets or sets the end hour.
        /// </summary>
        /// <value>Gets or sets the end hour.</value>
        [DataMember(Name="EndHour", EmitDefaultValue=true)]
        public double EndHour { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccessSchedule {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  DayOfWeek: ").Append(DayOfWeek).Append("\n");
            sb.Append("  StartHour: ").Append(StartHour).Append("\n");
            sb.Append("  EndHour: ").Append(EndHour).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccessSchedule);
        }

        /// <summary>
        /// Returns true if AccessSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of AccessSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccessSchedule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.DayOfWeek == input.DayOfWeek ||
                    (this.DayOfWeek != null &&
                    this.DayOfWeek.Equals(input.DayOfWeek))
                ) && 
                (
                    this.StartHour == input.StartHour ||
                    (this.StartHour != null &&
                    this.StartHour.Equals(input.StartHour))
                ) && 
                (
                    this.EndHour == input.EndHour ||
                    (this.EndHour != null &&
                    this.EndHour.Equals(input.EndHour))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.DayOfWeek != null)
                    hashCode = hashCode * 59 + this.DayOfWeek.GetHashCode();
                if (this.StartHour != null)
                    hashCode = hashCode * 59 + this.StartHour.GetHashCode();
                if (this.EndHour != null)
                    hashCode = hashCode * 59 + this.EndHour.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
