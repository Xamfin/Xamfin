/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// The startup configuration DTO.
    /// </summary>
    [DataContract]
    public partial class StartupConfigurationDto :  IEquatable<StartupConfigurationDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StartupConfigurationDto" /> class.
        /// </summary>
        /// <param name="uICulture">Gets or sets UI language culture..</param>
        /// <param name="metadataCountryCode">Gets or sets the metadata country code..</param>
        /// <param name="preferredMetadataLanguage">Gets or sets the preferred language for the metadata..</param>
        public StartupConfigurationDto(string uICulture = default(string), string metadataCountryCode = default(string), string preferredMetadataLanguage = default(string))
        {
            this.UICulture = uICulture;
            this.MetadataCountryCode = metadataCountryCode;
            this.PreferredMetadataLanguage = preferredMetadataLanguage;
            this.UICulture = uICulture;
            this.MetadataCountryCode = metadataCountryCode;
            this.PreferredMetadataLanguage = preferredMetadataLanguage;
        }

        /// <summary>
        /// Gets or sets UI language culture.
        /// </summary>
        /// <value>Gets or sets UI language culture.</value>
        [DataMember(Name="UICulture", EmitDefaultValue=true)]
        public string UICulture { get; set; }

        /// <summary>
        /// Gets or sets the metadata country code.
        /// </summary>
        /// <value>Gets or sets the metadata country code.</value>
        [DataMember(Name="MetadataCountryCode", EmitDefaultValue=true)]
        public string MetadataCountryCode { get; set; }

        /// <summary>
        /// Gets or sets the preferred language for the metadata.
        /// </summary>
        /// <value>Gets or sets the preferred language for the metadata.</value>
        [DataMember(Name="PreferredMetadataLanguage", EmitDefaultValue=true)]
        public string PreferredMetadataLanguage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StartupConfigurationDto {\n");
            sb.Append("  UICulture: ").Append(UICulture).Append("\n");
            sb.Append("  MetadataCountryCode: ").Append(MetadataCountryCode).Append("\n");
            sb.Append("  PreferredMetadataLanguage: ").Append(PreferredMetadataLanguage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StartupConfigurationDto);
        }

        /// <summary>
        /// Returns true if StartupConfigurationDto instances are equal
        /// </summary>
        /// <param name="input">Instance of StartupConfigurationDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StartupConfigurationDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UICulture == input.UICulture ||
                    (this.UICulture != null &&
                    this.UICulture.Equals(input.UICulture))
                ) && 
                (
                    this.MetadataCountryCode == input.MetadataCountryCode ||
                    (this.MetadataCountryCode != null &&
                    this.MetadataCountryCode.Equals(input.MetadataCountryCode))
                ) && 
                (
                    this.PreferredMetadataLanguage == input.PreferredMetadataLanguage ||
                    (this.PreferredMetadataLanguage != null &&
                    this.PreferredMetadataLanguage.Equals(input.PreferredMetadataLanguage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UICulture != null)
                    hashCode = hashCode * 59 + this.UICulture.GetHashCode();
                if (this.MetadataCountryCode != null)
                    hashCode = hashCode * 59 + this.MetadataCountryCode.GetHashCode();
                if (this.PreferredMetadataLanguage != null)
                    hashCode = hashCode * 59 + this.PreferredMetadataLanguage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
