/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Represents the external id information for serialization to the client.
    /// </summary>
    [DataContract]
    public partial class ExternalIdInfo :  IEquatable<ExternalIdInfo>, IValidatableObject
    {
        /// <summary>
        /// Gets or sets the specific media type for this id. This is used to distinguish between the different  external id types for providers with multiple ids.  A null value indicates there is no specific media type associated with the external id, or this is the  default id for the external provider so there is no need to specify a type.
        /// </summary>
        /// <value>Gets or sets the specific media type for this id. This is used to distinguish between the different  external id types for providers with multiple ids.  A null value indicates there is no specific media type associated with the external id, or this is the  default id for the external provider so there is no need to specify a type.</value>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public ExternalIdMediaType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalIdInfo" /> class.
        /// </summary>
        /// <param name="name">Gets or sets the display name of the external id provider (IE: IMDB, MusicBrainz, etc)..</param>
        /// <param name="key">Gets or sets the unique key for this id. This key should be unique across all providers..</param>
        /// <param name="type">Gets or sets the specific media type for this id. This is used to distinguish between the different  external id types for providers with multiple ids.  A null value indicates there is no specific media type associated with the external id, or this is the  default id for the external provider so there is no need to specify a type..</param>
        /// <param name="urlFormatString">Gets or sets the URL format string..</param>
        public ExternalIdInfo(string name = default(string), string key = default(string), ExternalIdMediaType? type = default(ExternalIdMediaType?), string urlFormatString = default(string))
        {
            this.Name = name;
            this.Key = key;
            this.Type = type;
            this.UrlFormatString = urlFormatString;
            this.Name = name;
            this.Key = key;
            this.Type = type;
            this.UrlFormatString = urlFormatString;
        }

        /// <summary>
        /// Gets or sets the display name of the external id provider (IE: IMDB, MusicBrainz, etc).
        /// </summary>
        /// <value>Gets or sets the display name of the external id provider (IE: IMDB, MusicBrainz, etc).</value>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the unique key for this id. This key should be unique across all providers.
        /// </summary>
        /// <value>Gets or sets the unique key for this id. This key should be unique across all providers.</value>
        [DataMember(Name="Key", EmitDefaultValue=true)]
        public string Key { get; set; }


        /// <summary>
        /// Gets or sets the URL format string.
        /// </summary>
        /// <value>Gets or sets the URL format string.</value>
        [DataMember(Name="UrlFormatString", EmitDefaultValue=true)]
        public string UrlFormatString { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExternalIdInfo {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UrlFormatString: ").Append(UrlFormatString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExternalIdInfo);
        }

        /// <summary>
        /// Returns true if ExternalIdInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ExternalIdInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalIdInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UrlFormatString == input.UrlFormatString ||
                    (this.UrlFormatString != null &&
                    this.UrlFormatString.Equals(input.UrlFormatString))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UrlFormatString != null)
                    hashCode = hashCode * 59 + this.UrlFormatString.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
