/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Class LibraryUpdateInfo.
    /// </summary>
    [DataContract]
    public partial class LibraryUpdateInfo :  IEquatable<LibraryUpdateInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryUpdateInfo" /> class.
        /// </summary>
        /// <param name="foldersAddedTo">Gets or sets the folders added to..</param>
        /// <param name="foldersRemovedFrom">Gets or sets the folders removed from..</param>
        /// <param name="itemsAdded">Gets or sets the items added..</param>
        /// <param name="itemsRemoved">Gets or sets the items removed..</param>
        /// <param name="itemsUpdated">Gets or sets the items updated..</param>
        /// <param name="collectionFolders">collectionFolders.</param>
        public LibraryUpdateInfo(List<string> foldersAddedTo = default(List<string>), List<string> foldersRemovedFrom = default(List<string>), List<string> itemsAdded = default(List<string>), List<string> itemsRemoved = default(List<string>), List<string> itemsUpdated = default(List<string>), List<string> collectionFolders = default(List<string>))
        {
            this.FoldersAddedTo = foldersAddedTo;
            this.FoldersRemovedFrom = foldersRemovedFrom;
            this.ItemsAdded = itemsAdded;
            this.ItemsRemoved = itemsRemoved;
            this.ItemsUpdated = itemsUpdated;
            this.CollectionFolders = collectionFolders;
            this.FoldersAddedTo = foldersAddedTo;
            this.FoldersRemovedFrom = foldersRemovedFrom;
            this.ItemsAdded = itemsAdded;
            this.ItemsRemoved = itemsRemoved;
            this.ItemsUpdated = itemsUpdated;
            this.CollectionFolders = collectionFolders;
        }

        /// <summary>
        /// Gets or sets the folders added to.
        /// </summary>
        /// <value>Gets or sets the folders added to.</value>
        [DataMember(Name="FoldersAddedTo", EmitDefaultValue=true)]
        public List<string> FoldersAddedTo { get; set; }

        /// <summary>
        /// Gets or sets the folders removed from.
        /// </summary>
        /// <value>Gets or sets the folders removed from.</value>
        [DataMember(Name="FoldersRemovedFrom", EmitDefaultValue=true)]
        public List<string> FoldersRemovedFrom { get; set; }

        /// <summary>
        /// Gets or sets the items added.
        /// </summary>
        /// <value>Gets or sets the items added.</value>
        [DataMember(Name="ItemsAdded", EmitDefaultValue=true)]
        public List<string> ItemsAdded { get; set; }

        /// <summary>
        /// Gets or sets the items removed.
        /// </summary>
        /// <value>Gets or sets the items removed.</value>
        [DataMember(Name="ItemsRemoved", EmitDefaultValue=true)]
        public List<string> ItemsRemoved { get; set; }

        /// <summary>
        /// Gets or sets the items updated.
        /// </summary>
        /// <value>Gets or sets the items updated.</value>
        [DataMember(Name="ItemsUpdated", EmitDefaultValue=true)]
        public List<string> ItemsUpdated { get; set; }

        /// <summary>
        /// Gets or Sets CollectionFolders
        /// </summary>
        [DataMember(Name="CollectionFolders", EmitDefaultValue=true)]
        public List<string> CollectionFolders { get; set; }

        /// <summary>
        /// Gets or Sets IsEmpty
        /// </summary>
        [DataMember(Name="IsEmpty", EmitDefaultValue=false)]
        public bool IsEmpty { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LibraryUpdateInfo {\n");
            sb.Append("  FoldersAddedTo: ").Append(FoldersAddedTo).Append("\n");
            sb.Append("  FoldersRemovedFrom: ").Append(FoldersRemovedFrom).Append("\n");
            sb.Append("  ItemsAdded: ").Append(ItemsAdded).Append("\n");
            sb.Append("  ItemsRemoved: ").Append(ItemsRemoved).Append("\n");
            sb.Append("  ItemsUpdated: ").Append(ItemsUpdated).Append("\n");
            sb.Append("  CollectionFolders: ").Append(CollectionFolders).Append("\n");
            sb.Append("  IsEmpty: ").Append(IsEmpty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LibraryUpdateInfo);
        }

        /// <summary>
        /// Returns true if LibraryUpdateInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of LibraryUpdateInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LibraryUpdateInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FoldersAddedTo == input.FoldersAddedTo ||
                    this.FoldersAddedTo != null &&
                    input.FoldersAddedTo != null &&
                    this.FoldersAddedTo.SequenceEqual(input.FoldersAddedTo)
                ) && 
                (
                    this.FoldersRemovedFrom == input.FoldersRemovedFrom ||
                    this.FoldersRemovedFrom != null &&
                    input.FoldersRemovedFrom != null &&
                    this.FoldersRemovedFrom.SequenceEqual(input.FoldersRemovedFrom)
                ) && 
                (
                    this.ItemsAdded == input.ItemsAdded ||
                    this.ItemsAdded != null &&
                    input.ItemsAdded != null &&
                    this.ItemsAdded.SequenceEqual(input.ItemsAdded)
                ) && 
                (
                    this.ItemsRemoved == input.ItemsRemoved ||
                    this.ItemsRemoved != null &&
                    input.ItemsRemoved != null &&
                    this.ItemsRemoved.SequenceEqual(input.ItemsRemoved)
                ) && 
                (
                    this.ItemsUpdated == input.ItemsUpdated ||
                    this.ItemsUpdated != null &&
                    input.ItemsUpdated != null &&
                    this.ItemsUpdated.SequenceEqual(input.ItemsUpdated)
                ) && 
                (
                    this.CollectionFolders == input.CollectionFolders ||
                    this.CollectionFolders != null &&
                    input.CollectionFolders != null &&
                    this.CollectionFolders.SequenceEqual(input.CollectionFolders)
                ) && 
                (
                    this.IsEmpty == input.IsEmpty ||
                    (this.IsEmpty != null &&
                    this.IsEmpty.Equals(input.IsEmpty))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FoldersAddedTo != null)
                    hashCode = hashCode * 59 + this.FoldersAddedTo.GetHashCode();
                if (this.FoldersRemovedFrom != null)
                    hashCode = hashCode * 59 + this.FoldersRemovedFrom.GetHashCode();
                if (this.ItemsAdded != null)
                    hashCode = hashCode * 59 + this.ItemsAdded.GetHashCode();
                if (this.ItemsRemoved != null)
                    hashCode = hashCode * 59 + this.ItemsRemoved.GetHashCode();
                if (this.ItemsUpdated != null)
                    hashCode = hashCode * 59 + this.ItemsUpdated.GetHashCode();
                if (this.CollectionFolders != null)
                    hashCode = hashCode * 59 + this.CollectionFolders.GetHashCode();
                if (this.IsEmpty != null)
                    hashCode = hashCode * 59 + this.IsEmpty.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
