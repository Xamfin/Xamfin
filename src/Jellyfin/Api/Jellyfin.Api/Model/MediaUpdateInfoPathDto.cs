/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// The media update info path.
    /// </summary>
    [DataContract]
    public partial class MediaUpdateInfoPathDto :  IEquatable<MediaUpdateInfoPathDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaUpdateInfoPathDto" /> class.
        /// </summary>
        /// <param name="path">Gets or sets media path..</param>
        /// <param name="updateType">Gets or sets media update type.  Created, Modified, Deleted..</param>
        public MediaUpdateInfoPathDto(string path = default(string), string updateType = default(string))
        {
            this.Path = path;
            this.UpdateType = updateType;
            this.Path = path;
            this.UpdateType = updateType;
        }

        /// <summary>
        /// Gets or sets media path.
        /// </summary>
        /// <value>Gets or sets media path.</value>
        [DataMember(Name="Path", EmitDefaultValue=true)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or sets media update type.  Created, Modified, Deleted.
        /// </summary>
        /// <value>Gets or sets media update type.  Created, Modified, Deleted.</value>
        [DataMember(Name="UpdateType", EmitDefaultValue=true)]
        public string UpdateType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaUpdateInfoPathDto {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  UpdateType: ").Append(UpdateType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediaUpdateInfoPathDto);
        }

        /// <summary>
        /// Returns true if MediaUpdateInfoPathDto instances are equal
        /// </summary>
        /// <param name="input">Instance of MediaUpdateInfoPathDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaUpdateInfoPathDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.UpdateType == input.UpdateType ||
                    (this.UpdateType != null &&
                    this.UpdateType.Equals(input.UpdateType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.UpdateType != null)
                    hashCode = hashCode * 59 + this.UpdateType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
