/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Defines the MediaBrowser.Model.Dlna.DeviceProfile.
    /// </summary>
    [DataContract]
    public partial class DeviceProfile :  IEquatable<DeviceProfile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceProfile" /> class.
        /// </summary>
        /// <param name="name">Gets or sets the Name..</param>
        /// <param name="id">Gets or sets the Id..</param>
        /// <param name="identification">Gets or sets the Identification..</param>
        /// <param name="friendlyName">Gets or sets the FriendlyName..</param>
        /// <param name="manufacturer">Gets or sets the Manufacturer..</param>
        /// <param name="manufacturerUrl">Gets or sets the ManufacturerUrl..</param>
        /// <param name="modelName">Gets or sets the ModelName..</param>
        /// <param name="modelDescription">Gets or sets the ModelDescription..</param>
        /// <param name="modelNumber">Gets or sets the ModelNumber..</param>
        /// <param name="modelUrl">Gets or sets the ModelUrl..</param>
        /// <param name="serialNumber">Gets or sets the SerialNumber..</param>
        /// <param name="enableAlbumArtInDidl">Gets or sets a value indicating whether EnableAlbumArtInDidl..</param>
        /// <param name="enableSingleAlbumArtLimit">Gets or sets a value indicating whether EnableSingleAlbumArtLimit..</param>
        /// <param name="enableSingleSubtitleLimit">Gets or sets a value indicating whether EnableSingleSubtitleLimit..</param>
        /// <param name="supportedMediaTypes">Gets or sets the SupportedMediaTypes..</param>
        /// <param name="userId">Gets or sets the UserId..</param>
        /// <param name="albumArtPn">Gets or sets the AlbumArtPn..</param>
        /// <param name="maxAlbumArtWidth">Gets or sets the MaxAlbumArtWidth..</param>
        /// <param name="maxAlbumArtHeight">Gets or sets the MaxAlbumArtHeight..</param>
        /// <param name="maxIconWidth">Gets or sets the MaxIconWidth..</param>
        /// <param name="maxIconHeight">Gets or sets the MaxIconHeight..</param>
        /// <param name="maxStreamingBitrate">Gets or sets the MaxStreamingBitrate..</param>
        /// <param name="maxStaticBitrate">Gets or sets the MaxStaticBitrate..</param>
        /// <param name="musicStreamingTranscodingBitrate">Gets or sets the MusicStreamingTranscodingBitrate..</param>
        /// <param name="maxStaticMusicBitrate">Gets or sets the MaxStaticMusicBitrate..</param>
        /// <param name="sonyAggregationFlags">Gets or sets the content of the aggregationFlags element in the urn:schemas-sonycom:av namespace..</param>
        /// <param name="protocolInfo">Gets or sets the ProtocolInfo..</param>
        /// <param name="timelineOffsetSeconds">Gets or sets the TimelineOffsetSeconds..</param>
        /// <param name="requiresPlainVideoItems">Gets or sets a value indicating whether RequiresPlainVideoItems..</param>
        /// <param name="requiresPlainFolders">Gets or sets a value indicating whether RequiresPlainFolders..</param>
        /// <param name="enableMSMediaReceiverRegistrar">Gets or sets a value indicating whether EnableMSMediaReceiverRegistrar..</param>
        /// <param name="ignoreTranscodeByteRangeRequests">Gets or sets a value indicating whether IgnoreTranscodeByteRangeRequests..</param>
        /// <param name="xmlRootAttributes">Gets or sets the XmlRootAttributes..</param>
        /// <param name="directPlayProfiles">Gets or sets the direct play profiles..</param>
        /// <param name="transcodingProfiles">Gets or sets the transcoding profiles..</param>
        /// <param name="containerProfiles">Gets or sets the ContainerProfiles..</param>
        /// <param name="codecProfiles">Gets or sets the CodecProfiles..</param>
        /// <param name="responseProfiles">Gets or sets the ResponseProfiles..</param>
        /// <param name="subtitleProfiles">Gets or sets the SubtitleProfiles..</param>
        public DeviceProfile(string name = default(string), string id = default(string), DeviceIdentification identification = default(DeviceIdentification), string friendlyName = default(string), string manufacturer = default(string), string manufacturerUrl = default(string), string modelName = default(string), string modelDescription = default(string), string modelNumber = default(string), string modelUrl = default(string), string serialNumber = default(string), bool enableAlbumArtInDidl = default(bool), bool enableSingleAlbumArtLimit = default(bool), bool enableSingleSubtitleLimit = default(bool), string supportedMediaTypes = default(string), string userId = default(string), string albumArtPn = default(string), int maxAlbumArtWidth = default(int), int maxAlbumArtHeight = default(int), int? maxIconWidth = default(int?), int? maxIconHeight = default(int?), int? maxStreamingBitrate = default(int?), int? maxStaticBitrate = default(int?), int? musicStreamingTranscodingBitrate = default(int?), int? maxStaticMusicBitrate = default(int?), string sonyAggregationFlags = default(string), string protocolInfo = default(string), int timelineOffsetSeconds = default(int), bool requiresPlainVideoItems = default(bool), bool requiresPlainFolders = default(bool), bool enableMSMediaReceiverRegistrar = default(bool), bool ignoreTranscodeByteRangeRequests = default(bool), List<XmlAttribute> xmlRootAttributes = default(List<XmlAttribute>), List<DirectPlayProfile> directPlayProfiles = default(List<DirectPlayProfile>), List<TranscodingProfile> transcodingProfiles = default(List<TranscodingProfile>), List<ContainerProfile> containerProfiles = default(List<ContainerProfile>), List<CodecProfile> codecProfiles = default(List<CodecProfile>), List<ResponseProfile> responseProfiles = default(List<ResponseProfile>), List<SubtitleProfile> subtitleProfiles = default(List<SubtitleProfile>))
        {
            this.Name = name;
            this.Id = id;
            this.Identification = identification;
            this.FriendlyName = friendlyName;
            this.Manufacturer = manufacturer;
            this.ManufacturerUrl = manufacturerUrl;
            this.ModelName = modelName;
            this.ModelDescription = modelDescription;
            this.ModelNumber = modelNumber;
            this.ModelUrl = modelUrl;
            this.SerialNumber = serialNumber;
            this.SupportedMediaTypes = supportedMediaTypes;
            this.UserId = userId;
            this.AlbumArtPn = albumArtPn;
            this.MaxIconWidth = maxIconWidth;
            this.MaxIconHeight = maxIconHeight;
            this.MaxStreamingBitrate = maxStreamingBitrate;
            this.MaxStaticBitrate = maxStaticBitrate;
            this.MusicStreamingTranscodingBitrate = musicStreamingTranscodingBitrate;
            this.MaxStaticMusicBitrate = maxStaticMusicBitrate;
            this.SonyAggregationFlags = sonyAggregationFlags;
            this.ProtocolInfo = protocolInfo;
            this.XmlRootAttributes = xmlRootAttributes;
            this.DirectPlayProfiles = directPlayProfiles;
            this.TranscodingProfiles = transcodingProfiles;
            this.ContainerProfiles = containerProfiles;
            this.CodecProfiles = codecProfiles;
            this.ResponseProfiles = responseProfiles;
            this.SubtitleProfiles = subtitleProfiles;
            this.Name = name;
            this.Id = id;
            this.Identification = identification;
            this.FriendlyName = friendlyName;
            this.Manufacturer = manufacturer;
            this.ManufacturerUrl = manufacturerUrl;
            this.ModelName = modelName;
            this.ModelDescription = modelDescription;
            this.ModelNumber = modelNumber;
            this.ModelUrl = modelUrl;
            this.SerialNumber = serialNumber;
            this.EnableAlbumArtInDidl = enableAlbumArtInDidl;
            this.EnableSingleAlbumArtLimit = enableSingleAlbumArtLimit;
            this.EnableSingleSubtitleLimit = enableSingleSubtitleLimit;
            this.SupportedMediaTypes = supportedMediaTypes;
            this.UserId = userId;
            this.AlbumArtPn = albumArtPn;
            this.MaxAlbumArtWidth = maxAlbumArtWidth;
            this.MaxAlbumArtHeight = maxAlbumArtHeight;
            this.MaxIconWidth = maxIconWidth;
            this.MaxIconHeight = maxIconHeight;
            this.MaxStreamingBitrate = maxStreamingBitrate;
            this.MaxStaticBitrate = maxStaticBitrate;
            this.MusicStreamingTranscodingBitrate = musicStreamingTranscodingBitrate;
            this.MaxStaticMusicBitrate = maxStaticMusicBitrate;
            this.SonyAggregationFlags = sonyAggregationFlags;
            this.ProtocolInfo = protocolInfo;
            this.TimelineOffsetSeconds = timelineOffsetSeconds;
            this.RequiresPlainVideoItems = requiresPlainVideoItems;
            this.RequiresPlainFolders = requiresPlainFolders;
            this.EnableMSMediaReceiverRegistrar = enableMSMediaReceiverRegistrar;
            this.IgnoreTranscodeByteRangeRequests = ignoreTranscodeByteRangeRequests;
            this.XmlRootAttributes = xmlRootAttributes;
            this.DirectPlayProfiles = directPlayProfiles;
            this.TranscodingProfiles = transcodingProfiles;
            this.ContainerProfiles = containerProfiles;
            this.CodecProfiles = codecProfiles;
            this.ResponseProfiles = responseProfiles;
            this.SubtitleProfiles = subtitleProfiles;
        }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        /// <value>Gets or sets the Name.</value>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        /// <value>Gets or sets the Id.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the Identification.
        /// </summary>
        /// <value>Gets or sets the Identification.</value>
        [DataMember(Name="Identification", EmitDefaultValue=true)]
        public DeviceIdentification Identification { get; set; }

        /// <summary>
        /// Gets or sets the FriendlyName.
        /// </summary>
        /// <value>Gets or sets the FriendlyName.</value>
        [DataMember(Name="FriendlyName", EmitDefaultValue=true)]
        public string FriendlyName { get; set; }

        /// <summary>
        /// Gets or sets the Manufacturer.
        /// </summary>
        /// <value>Gets or sets the Manufacturer.</value>
        [DataMember(Name="Manufacturer", EmitDefaultValue=true)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Gets or sets the ManufacturerUrl.
        /// </summary>
        /// <value>Gets or sets the ManufacturerUrl.</value>
        [DataMember(Name="ManufacturerUrl", EmitDefaultValue=true)]
        public string ManufacturerUrl { get; set; }

        /// <summary>
        /// Gets or sets the ModelName.
        /// </summary>
        /// <value>Gets or sets the ModelName.</value>
        [DataMember(Name="ModelName", EmitDefaultValue=true)]
        public string ModelName { get; set; }

        /// <summary>
        /// Gets or sets the ModelDescription.
        /// </summary>
        /// <value>Gets or sets the ModelDescription.</value>
        [DataMember(Name="ModelDescription", EmitDefaultValue=true)]
        public string ModelDescription { get; set; }

        /// <summary>
        /// Gets or sets the ModelNumber.
        /// </summary>
        /// <value>Gets or sets the ModelNumber.</value>
        [DataMember(Name="ModelNumber", EmitDefaultValue=true)]
        public string ModelNumber { get; set; }

        /// <summary>
        /// Gets or sets the ModelUrl.
        /// </summary>
        /// <value>Gets or sets the ModelUrl.</value>
        [DataMember(Name="ModelUrl", EmitDefaultValue=true)]
        public string ModelUrl { get; set; }

        /// <summary>
        /// Gets or sets the SerialNumber.
        /// </summary>
        /// <value>Gets or sets the SerialNumber.</value>
        [DataMember(Name="SerialNumber", EmitDefaultValue=true)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether EnableAlbumArtInDidl.
        /// </summary>
        /// <value>Gets or sets a value indicating whether EnableAlbumArtInDidl.</value>
        [DataMember(Name="EnableAlbumArtInDidl", EmitDefaultValue=false)]
        public bool EnableAlbumArtInDidl { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether EnableSingleAlbumArtLimit.
        /// </summary>
        /// <value>Gets or sets a value indicating whether EnableSingleAlbumArtLimit.</value>
        [DataMember(Name="EnableSingleAlbumArtLimit", EmitDefaultValue=false)]
        public bool EnableSingleAlbumArtLimit { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether EnableSingleSubtitleLimit.
        /// </summary>
        /// <value>Gets or sets a value indicating whether EnableSingleSubtitleLimit.</value>
        [DataMember(Name="EnableSingleSubtitleLimit", EmitDefaultValue=false)]
        public bool EnableSingleSubtitleLimit { get; set; }

        /// <summary>
        /// Gets or sets the SupportedMediaTypes.
        /// </summary>
        /// <value>Gets or sets the SupportedMediaTypes.</value>
        [DataMember(Name="SupportedMediaTypes", EmitDefaultValue=true)]
        public string SupportedMediaTypes { get; set; }

        /// <summary>
        /// Gets or sets the UserId.
        /// </summary>
        /// <value>Gets or sets the UserId.</value>
        [DataMember(Name="UserId", EmitDefaultValue=true)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or sets the AlbumArtPn.
        /// </summary>
        /// <value>Gets or sets the AlbumArtPn.</value>
        [DataMember(Name="AlbumArtPn", EmitDefaultValue=true)]
        public string AlbumArtPn { get; set; }

        /// <summary>
        /// Gets or sets the MaxAlbumArtWidth.
        /// </summary>
        /// <value>Gets or sets the MaxAlbumArtWidth.</value>
        [DataMember(Name="MaxAlbumArtWidth", EmitDefaultValue=false)]
        public int MaxAlbumArtWidth { get; set; }

        /// <summary>
        /// Gets or sets the MaxAlbumArtHeight.
        /// </summary>
        /// <value>Gets or sets the MaxAlbumArtHeight.</value>
        [DataMember(Name="MaxAlbumArtHeight", EmitDefaultValue=false)]
        public int MaxAlbumArtHeight { get; set; }

        /// <summary>
        /// Gets or sets the MaxIconWidth.
        /// </summary>
        /// <value>Gets or sets the MaxIconWidth.</value>
        [DataMember(Name="MaxIconWidth", EmitDefaultValue=true)]
        public int? MaxIconWidth { get; set; }

        /// <summary>
        /// Gets or sets the MaxIconHeight.
        /// </summary>
        /// <value>Gets or sets the MaxIconHeight.</value>
        [DataMember(Name="MaxIconHeight", EmitDefaultValue=true)]
        public int? MaxIconHeight { get; set; }

        /// <summary>
        /// Gets or sets the MaxStreamingBitrate.
        /// </summary>
        /// <value>Gets or sets the MaxStreamingBitrate.</value>
        [DataMember(Name="MaxStreamingBitrate", EmitDefaultValue=true)]
        public int? MaxStreamingBitrate { get; set; }

        /// <summary>
        /// Gets or sets the MaxStaticBitrate.
        /// </summary>
        /// <value>Gets or sets the MaxStaticBitrate.</value>
        [DataMember(Name="MaxStaticBitrate", EmitDefaultValue=true)]
        public int? MaxStaticBitrate { get; set; }

        /// <summary>
        /// Gets or sets the MusicStreamingTranscodingBitrate.
        /// </summary>
        /// <value>Gets or sets the MusicStreamingTranscodingBitrate.</value>
        [DataMember(Name="MusicStreamingTranscodingBitrate", EmitDefaultValue=true)]
        public int? MusicStreamingTranscodingBitrate { get; set; }

        /// <summary>
        /// Gets or sets the MaxStaticMusicBitrate.
        /// </summary>
        /// <value>Gets or sets the MaxStaticMusicBitrate.</value>
        [DataMember(Name="MaxStaticMusicBitrate", EmitDefaultValue=true)]
        public int? MaxStaticMusicBitrate { get; set; }

        /// <summary>
        /// Gets or sets the content of the aggregationFlags element in the urn:schemas-sonycom:av namespace.
        /// </summary>
        /// <value>Gets or sets the content of the aggregationFlags element in the urn:schemas-sonycom:av namespace.</value>
        [DataMember(Name="SonyAggregationFlags", EmitDefaultValue=true)]
        public string SonyAggregationFlags { get; set; }

        /// <summary>
        /// Gets or sets the ProtocolInfo.
        /// </summary>
        /// <value>Gets or sets the ProtocolInfo.</value>
        [DataMember(Name="ProtocolInfo", EmitDefaultValue=true)]
        public string ProtocolInfo { get; set; }

        /// <summary>
        /// Gets or sets the TimelineOffsetSeconds.
        /// </summary>
        /// <value>Gets or sets the TimelineOffsetSeconds.</value>
        [DataMember(Name="TimelineOffsetSeconds", EmitDefaultValue=false)]
        public int TimelineOffsetSeconds { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether RequiresPlainVideoItems.
        /// </summary>
        /// <value>Gets or sets a value indicating whether RequiresPlainVideoItems.</value>
        [DataMember(Name="RequiresPlainVideoItems", EmitDefaultValue=false)]
        public bool RequiresPlainVideoItems { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether RequiresPlainFolders.
        /// </summary>
        /// <value>Gets or sets a value indicating whether RequiresPlainFolders.</value>
        [DataMember(Name="RequiresPlainFolders", EmitDefaultValue=false)]
        public bool RequiresPlainFolders { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether EnableMSMediaReceiverRegistrar.
        /// </summary>
        /// <value>Gets or sets a value indicating whether EnableMSMediaReceiverRegistrar.</value>
        [DataMember(Name="EnableMSMediaReceiverRegistrar", EmitDefaultValue=false)]
        public bool EnableMSMediaReceiverRegistrar { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether IgnoreTranscodeByteRangeRequests.
        /// </summary>
        /// <value>Gets or sets a value indicating whether IgnoreTranscodeByteRangeRequests.</value>
        [DataMember(Name="IgnoreTranscodeByteRangeRequests", EmitDefaultValue=false)]
        public bool IgnoreTranscodeByteRangeRequests { get; set; }

        /// <summary>
        /// Gets or sets the XmlRootAttributes.
        /// </summary>
        /// <value>Gets or sets the XmlRootAttributes.</value>
        [DataMember(Name="XmlRootAttributes", EmitDefaultValue=true)]
        public List<XmlAttribute> XmlRootAttributes { get; set; }

        /// <summary>
        /// Gets or sets the direct play profiles.
        /// </summary>
        /// <value>Gets or sets the direct play profiles.</value>
        [DataMember(Name="DirectPlayProfiles", EmitDefaultValue=true)]
        public List<DirectPlayProfile> DirectPlayProfiles { get; set; }

        /// <summary>
        /// Gets or sets the transcoding profiles.
        /// </summary>
        /// <value>Gets or sets the transcoding profiles.</value>
        [DataMember(Name="TranscodingProfiles", EmitDefaultValue=true)]
        public List<TranscodingProfile> TranscodingProfiles { get; set; }

        /// <summary>
        /// Gets or sets the ContainerProfiles.
        /// </summary>
        /// <value>Gets or sets the ContainerProfiles.</value>
        [DataMember(Name="ContainerProfiles", EmitDefaultValue=true)]
        public List<ContainerProfile> ContainerProfiles { get; set; }

        /// <summary>
        /// Gets or sets the CodecProfiles.
        /// </summary>
        /// <value>Gets or sets the CodecProfiles.</value>
        [DataMember(Name="CodecProfiles", EmitDefaultValue=true)]
        public List<CodecProfile> CodecProfiles { get; set; }

        /// <summary>
        /// Gets or sets the ResponseProfiles.
        /// </summary>
        /// <value>Gets or sets the ResponseProfiles.</value>
        [DataMember(Name="ResponseProfiles", EmitDefaultValue=true)]
        public List<ResponseProfile> ResponseProfiles { get; set; }

        /// <summary>
        /// Gets or sets the SubtitleProfiles.
        /// </summary>
        /// <value>Gets or sets the SubtitleProfiles.</value>
        [DataMember(Name="SubtitleProfiles", EmitDefaultValue=true)]
        public List<SubtitleProfile> SubtitleProfiles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceProfile {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  FriendlyName: ").Append(FriendlyName).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  ManufacturerUrl: ").Append(ManufacturerUrl).Append("\n");
            sb.Append("  ModelName: ").Append(ModelName).Append("\n");
            sb.Append("  ModelDescription: ").Append(ModelDescription).Append("\n");
            sb.Append("  ModelNumber: ").Append(ModelNumber).Append("\n");
            sb.Append("  ModelUrl: ").Append(ModelUrl).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  EnableAlbumArtInDidl: ").Append(EnableAlbumArtInDidl).Append("\n");
            sb.Append("  EnableSingleAlbumArtLimit: ").Append(EnableSingleAlbumArtLimit).Append("\n");
            sb.Append("  EnableSingleSubtitleLimit: ").Append(EnableSingleSubtitleLimit).Append("\n");
            sb.Append("  SupportedMediaTypes: ").Append(SupportedMediaTypes).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  AlbumArtPn: ").Append(AlbumArtPn).Append("\n");
            sb.Append("  MaxAlbumArtWidth: ").Append(MaxAlbumArtWidth).Append("\n");
            sb.Append("  MaxAlbumArtHeight: ").Append(MaxAlbumArtHeight).Append("\n");
            sb.Append("  MaxIconWidth: ").Append(MaxIconWidth).Append("\n");
            sb.Append("  MaxIconHeight: ").Append(MaxIconHeight).Append("\n");
            sb.Append("  MaxStreamingBitrate: ").Append(MaxStreamingBitrate).Append("\n");
            sb.Append("  MaxStaticBitrate: ").Append(MaxStaticBitrate).Append("\n");
            sb.Append("  MusicStreamingTranscodingBitrate: ").Append(MusicStreamingTranscodingBitrate).Append("\n");
            sb.Append("  MaxStaticMusicBitrate: ").Append(MaxStaticMusicBitrate).Append("\n");
            sb.Append("  SonyAggregationFlags: ").Append(SonyAggregationFlags).Append("\n");
            sb.Append("  ProtocolInfo: ").Append(ProtocolInfo).Append("\n");
            sb.Append("  TimelineOffsetSeconds: ").Append(TimelineOffsetSeconds).Append("\n");
            sb.Append("  RequiresPlainVideoItems: ").Append(RequiresPlainVideoItems).Append("\n");
            sb.Append("  RequiresPlainFolders: ").Append(RequiresPlainFolders).Append("\n");
            sb.Append("  EnableMSMediaReceiverRegistrar: ").Append(EnableMSMediaReceiverRegistrar).Append("\n");
            sb.Append("  IgnoreTranscodeByteRangeRequests: ").Append(IgnoreTranscodeByteRangeRequests).Append("\n");
            sb.Append("  XmlRootAttributes: ").Append(XmlRootAttributes).Append("\n");
            sb.Append("  DirectPlayProfiles: ").Append(DirectPlayProfiles).Append("\n");
            sb.Append("  TranscodingProfiles: ").Append(TranscodingProfiles).Append("\n");
            sb.Append("  ContainerProfiles: ").Append(ContainerProfiles).Append("\n");
            sb.Append("  CodecProfiles: ").Append(CodecProfiles).Append("\n");
            sb.Append("  ResponseProfiles: ").Append(ResponseProfiles).Append("\n");
            sb.Append("  SubtitleProfiles: ").Append(SubtitleProfiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceProfile);
        }

        /// <summary>
        /// Returns true if DeviceProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceProfile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Identification == input.Identification ||
                    (this.Identification != null &&
                    this.Identification.Equals(input.Identification))
                ) && 
                (
                    this.FriendlyName == input.FriendlyName ||
                    (this.FriendlyName != null &&
                    this.FriendlyName.Equals(input.FriendlyName))
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.ManufacturerUrl == input.ManufacturerUrl ||
                    (this.ManufacturerUrl != null &&
                    this.ManufacturerUrl.Equals(input.ManufacturerUrl))
                ) && 
                (
                    this.ModelName == input.ModelName ||
                    (this.ModelName != null &&
                    this.ModelName.Equals(input.ModelName))
                ) && 
                (
                    this.ModelDescription == input.ModelDescription ||
                    (this.ModelDescription != null &&
                    this.ModelDescription.Equals(input.ModelDescription))
                ) && 
                (
                    this.ModelNumber == input.ModelNumber ||
                    (this.ModelNumber != null &&
                    this.ModelNumber.Equals(input.ModelNumber))
                ) && 
                (
                    this.ModelUrl == input.ModelUrl ||
                    (this.ModelUrl != null &&
                    this.ModelUrl.Equals(input.ModelUrl))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.EnableAlbumArtInDidl == input.EnableAlbumArtInDidl ||
                    (this.EnableAlbumArtInDidl != null &&
                    this.EnableAlbumArtInDidl.Equals(input.EnableAlbumArtInDidl))
                ) && 
                (
                    this.EnableSingleAlbumArtLimit == input.EnableSingleAlbumArtLimit ||
                    (this.EnableSingleAlbumArtLimit != null &&
                    this.EnableSingleAlbumArtLimit.Equals(input.EnableSingleAlbumArtLimit))
                ) && 
                (
                    this.EnableSingleSubtitleLimit == input.EnableSingleSubtitleLimit ||
                    (this.EnableSingleSubtitleLimit != null &&
                    this.EnableSingleSubtitleLimit.Equals(input.EnableSingleSubtitleLimit))
                ) && 
                (
                    this.SupportedMediaTypes == input.SupportedMediaTypes ||
                    (this.SupportedMediaTypes != null &&
                    this.SupportedMediaTypes.Equals(input.SupportedMediaTypes))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.AlbumArtPn == input.AlbumArtPn ||
                    (this.AlbumArtPn != null &&
                    this.AlbumArtPn.Equals(input.AlbumArtPn))
                ) && 
                (
                    this.MaxAlbumArtWidth == input.MaxAlbumArtWidth ||
                    (this.MaxAlbumArtWidth != null &&
                    this.MaxAlbumArtWidth.Equals(input.MaxAlbumArtWidth))
                ) && 
                (
                    this.MaxAlbumArtHeight == input.MaxAlbumArtHeight ||
                    (this.MaxAlbumArtHeight != null &&
                    this.MaxAlbumArtHeight.Equals(input.MaxAlbumArtHeight))
                ) && 
                (
                    this.MaxIconWidth == input.MaxIconWidth ||
                    (this.MaxIconWidth != null &&
                    this.MaxIconWidth.Equals(input.MaxIconWidth))
                ) && 
                (
                    this.MaxIconHeight == input.MaxIconHeight ||
                    (this.MaxIconHeight != null &&
                    this.MaxIconHeight.Equals(input.MaxIconHeight))
                ) && 
                (
                    this.MaxStreamingBitrate == input.MaxStreamingBitrate ||
                    (this.MaxStreamingBitrate != null &&
                    this.MaxStreamingBitrate.Equals(input.MaxStreamingBitrate))
                ) && 
                (
                    this.MaxStaticBitrate == input.MaxStaticBitrate ||
                    (this.MaxStaticBitrate != null &&
                    this.MaxStaticBitrate.Equals(input.MaxStaticBitrate))
                ) && 
                (
                    this.MusicStreamingTranscodingBitrate == input.MusicStreamingTranscodingBitrate ||
                    (this.MusicStreamingTranscodingBitrate != null &&
                    this.MusicStreamingTranscodingBitrate.Equals(input.MusicStreamingTranscodingBitrate))
                ) && 
                (
                    this.MaxStaticMusicBitrate == input.MaxStaticMusicBitrate ||
                    (this.MaxStaticMusicBitrate != null &&
                    this.MaxStaticMusicBitrate.Equals(input.MaxStaticMusicBitrate))
                ) && 
                (
                    this.SonyAggregationFlags == input.SonyAggregationFlags ||
                    (this.SonyAggregationFlags != null &&
                    this.SonyAggregationFlags.Equals(input.SonyAggregationFlags))
                ) && 
                (
                    this.ProtocolInfo == input.ProtocolInfo ||
                    (this.ProtocolInfo != null &&
                    this.ProtocolInfo.Equals(input.ProtocolInfo))
                ) && 
                (
                    this.TimelineOffsetSeconds == input.TimelineOffsetSeconds ||
                    (this.TimelineOffsetSeconds != null &&
                    this.TimelineOffsetSeconds.Equals(input.TimelineOffsetSeconds))
                ) && 
                (
                    this.RequiresPlainVideoItems == input.RequiresPlainVideoItems ||
                    (this.RequiresPlainVideoItems != null &&
                    this.RequiresPlainVideoItems.Equals(input.RequiresPlainVideoItems))
                ) && 
                (
                    this.RequiresPlainFolders == input.RequiresPlainFolders ||
                    (this.RequiresPlainFolders != null &&
                    this.RequiresPlainFolders.Equals(input.RequiresPlainFolders))
                ) && 
                (
                    this.EnableMSMediaReceiverRegistrar == input.EnableMSMediaReceiverRegistrar ||
                    (this.EnableMSMediaReceiverRegistrar != null &&
                    this.EnableMSMediaReceiverRegistrar.Equals(input.EnableMSMediaReceiverRegistrar))
                ) && 
                (
                    this.IgnoreTranscodeByteRangeRequests == input.IgnoreTranscodeByteRangeRequests ||
                    (this.IgnoreTranscodeByteRangeRequests != null &&
                    this.IgnoreTranscodeByteRangeRequests.Equals(input.IgnoreTranscodeByteRangeRequests))
                ) && 
                (
                    this.XmlRootAttributes == input.XmlRootAttributes ||
                    this.XmlRootAttributes != null &&
                    input.XmlRootAttributes != null &&
                    this.XmlRootAttributes.SequenceEqual(input.XmlRootAttributes)
                ) && 
                (
                    this.DirectPlayProfiles == input.DirectPlayProfiles ||
                    this.DirectPlayProfiles != null &&
                    input.DirectPlayProfiles != null &&
                    this.DirectPlayProfiles.SequenceEqual(input.DirectPlayProfiles)
                ) && 
                (
                    this.TranscodingProfiles == input.TranscodingProfiles ||
                    this.TranscodingProfiles != null &&
                    input.TranscodingProfiles != null &&
                    this.TranscodingProfiles.SequenceEqual(input.TranscodingProfiles)
                ) && 
                (
                    this.ContainerProfiles == input.ContainerProfiles ||
                    this.ContainerProfiles != null &&
                    input.ContainerProfiles != null &&
                    this.ContainerProfiles.SequenceEqual(input.ContainerProfiles)
                ) && 
                (
                    this.CodecProfiles == input.CodecProfiles ||
                    this.CodecProfiles != null &&
                    input.CodecProfiles != null &&
                    this.CodecProfiles.SequenceEqual(input.CodecProfiles)
                ) && 
                (
                    this.ResponseProfiles == input.ResponseProfiles ||
                    this.ResponseProfiles != null &&
                    input.ResponseProfiles != null &&
                    this.ResponseProfiles.SequenceEqual(input.ResponseProfiles)
                ) && 
                (
                    this.SubtitleProfiles == input.SubtitleProfiles ||
                    this.SubtitleProfiles != null &&
                    input.SubtitleProfiles != null &&
                    this.SubtitleProfiles.SequenceEqual(input.SubtitleProfiles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Identification != null)
                    hashCode = hashCode * 59 + this.Identification.GetHashCode();
                if (this.FriendlyName != null)
                    hashCode = hashCode * 59 + this.FriendlyName.GetHashCode();
                if (this.Manufacturer != null)
                    hashCode = hashCode * 59 + this.Manufacturer.GetHashCode();
                if (this.ManufacturerUrl != null)
                    hashCode = hashCode * 59 + this.ManufacturerUrl.GetHashCode();
                if (this.ModelName != null)
                    hashCode = hashCode * 59 + this.ModelName.GetHashCode();
                if (this.ModelDescription != null)
                    hashCode = hashCode * 59 + this.ModelDescription.GetHashCode();
                if (this.ModelNumber != null)
                    hashCode = hashCode * 59 + this.ModelNumber.GetHashCode();
                if (this.ModelUrl != null)
                    hashCode = hashCode * 59 + this.ModelUrl.GetHashCode();
                if (this.SerialNumber != null)
                    hashCode = hashCode * 59 + this.SerialNumber.GetHashCode();
                if (this.EnableAlbumArtInDidl != null)
                    hashCode = hashCode * 59 + this.EnableAlbumArtInDidl.GetHashCode();
                if (this.EnableSingleAlbumArtLimit != null)
                    hashCode = hashCode * 59 + this.EnableSingleAlbumArtLimit.GetHashCode();
                if (this.EnableSingleSubtitleLimit != null)
                    hashCode = hashCode * 59 + this.EnableSingleSubtitleLimit.GetHashCode();
                if (this.SupportedMediaTypes != null)
                    hashCode = hashCode * 59 + this.SupportedMediaTypes.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.AlbumArtPn != null)
                    hashCode = hashCode * 59 + this.AlbumArtPn.GetHashCode();
                if (this.MaxAlbumArtWidth != null)
                    hashCode = hashCode * 59 + this.MaxAlbumArtWidth.GetHashCode();
                if (this.MaxAlbumArtHeight != null)
                    hashCode = hashCode * 59 + this.MaxAlbumArtHeight.GetHashCode();
                if (this.MaxIconWidth != null)
                    hashCode = hashCode * 59 + this.MaxIconWidth.GetHashCode();
                if (this.MaxIconHeight != null)
                    hashCode = hashCode * 59 + this.MaxIconHeight.GetHashCode();
                if (this.MaxStreamingBitrate != null)
                    hashCode = hashCode * 59 + this.MaxStreamingBitrate.GetHashCode();
                if (this.MaxStaticBitrate != null)
                    hashCode = hashCode * 59 + this.MaxStaticBitrate.GetHashCode();
                if (this.MusicStreamingTranscodingBitrate != null)
                    hashCode = hashCode * 59 + this.MusicStreamingTranscodingBitrate.GetHashCode();
                if (this.MaxStaticMusicBitrate != null)
                    hashCode = hashCode * 59 + this.MaxStaticMusicBitrate.GetHashCode();
                if (this.SonyAggregationFlags != null)
                    hashCode = hashCode * 59 + this.SonyAggregationFlags.GetHashCode();
                if (this.ProtocolInfo != null)
                    hashCode = hashCode * 59 + this.ProtocolInfo.GetHashCode();
                if (this.TimelineOffsetSeconds != null)
                    hashCode = hashCode * 59 + this.TimelineOffsetSeconds.GetHashCode();
                if (this.RequiresPlainVideoItems != null)
                    hashCode = hashCode * 59 + this.RequiresPlainVideoItems.GetHashCode();
                if (this.RequiresPlainFolders != null)
                    hashCode = hashCode * 59 + this.RequiresPlainFolders.GetHashCode();
                if (this.EnableMSMediaReceiverRegistrar != null)
                    hashCode = hashCode * 59 + this.EnableMSMediaReceiverRegistrar.GetHashCode();
                if (this.IgnoreTranscodeByteRangeRequests != null)
                    hashCode = hashCode * 59 + this.IgnoreTranscodeByteRangeRequests.GetHashCode();
                if (this.XmlRootAttributes != null)
                    hashCode = hashCode * 59 + this.XmlRootAttributes.GetHashCode();
                if (this.DirectPlayProfiles != null)
                    hashCode = hashCode * 59 + this.DirectPlayProfiles.GetHashCode();
                if (this.TranscodingProfiles != null)
                    hashCode = hashCode * 59 + this.TranscodingProfiles.GetHashCode();
                if (this.ContainerProfiles != null)
                    hashCode = hashCode * 59 + this.ContainerProfiles.GetHashCode();
                if (this.CodecProfiles != null)
                    hashCode = hashCode * 59 + this.CodecProfiles.GetHashCode();
                if (this.ResponseProfiles != null)
                    hashCode = hashCode * 59 + this.ResponseProfiles.GetHashCode();
                if (this.SubtitleProfiles != null)
                    hashCode = hashCode * 59 + this.SubtitleProfiles.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
