/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Set channel mapping dto.
    /// </summary>
    [DataContract]
    public partial class SetChannelMappingDto :  IEquatable<SetChannelMappingDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetChannelMappingDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SetChannelMappingDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SetChannelMappingDto" /> class.
        /// </summary>
        /// <param name="providerId">Gets or sets the provider id. (required).</param>
        /// <param name="tunerChannelId">Gets or sets the tuner channel id. (required).</param>
        /// <param name="providerChannelId">Gets or sets the provider channel id. (required).</param>
        public SetChannelMappingDto(string providerId = default(string), string tunerChannelId = default(string), string providerChannelId = default(string))
        {
            // to ensure "providerId" is required (not null)
            if (providerId == null)
            {
                throw new InvalidDataException("providerId is a required property for SetChannelMappingDto and cannot be null");
            }
            else
            {
                this.ProviderId = providerId;
            }

            // to ensure "tunerChannelId" is required (not null)
            if (tunerChannelId == null)
            {
                throw new InvalidDataException("tunerChannelId is a required property for SetChannelMappingDto and cannot be null");
            }
            else
            {
                this.TunerChannelId = tunerChannelId;
            }

            // to ensure "providerChannelId" is required (not null)
            if (providerChannelId == null)
            {
                throw new InvalidDataException("providerChannelId is a required property for SetChannelMappingDto and cannot be null");
            }
            else
            {
                this.ProviderChannelId = providerChannelId;
            }

        }

        /// <summary>
        /// Gets or sets the provider id.
        /// </summary>
        /// <value>Gets or sets the provider id.</value>
        [DataMember(Name="ProviderId", EmitDefaultValue=true)]
        public string ProviderId { get; set; }

        /// <summary>
        /// Gets or sets the tuner channel id.
        /// </summary>
        /// <value>Gets or sets the tuner channel id.</value>
        [DataMember(Name="TunerChannelId", EmitDefaultValue=true)]
        public string TunerChannelId { get; set; }

        /// <summary>
        /// Gets or sets the provider channel id.
        /// </summary>
        /// <value>Gets or sets the provider channel id.</value>
        [DataMember(Name="ProviderChannelId", EmitDefaultValue=true)]
        public string ProviderChannelId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetChannelMappingDto {\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  TunerChannelId: ").Append(TunerChannelId).Append("\n");
            sb.Append("  ProviderChannelId: ").Append(ProviderChannelId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetChannelMappingDto);
        }

        /// <summary>
        /// Returns true if SetChannelMappingDto instances are equal
        /// </summary>
        /// <param name="input">Instance of SetChannelMappingDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetChannelMappingDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProviderId == input.ProviderId ||
                    (this.ProviderId != null &&
                    this.ProviderId.Equals(input.ProviderId))
                ) && 
                (
                    this.TunerChannelId == input.TunerChannelId ||
                    (this.TunerChannelId != null &&
                    this.TunerChannelId.Equals(input.TunerChannelId))
                ) && 
                (
                    this.ProviderChannelId == input.ProviderChannelId ||
                    (this.ProviderChannelId != null &&
                    this.ProviderChannelId.Equals(input.ProviderChannelId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProviderId != null)
                    hashCode = hashCode * 59 + this.ProviderId.GetHashCode();
                if (this.TunerChannelId != null)
                    hashCode = hashCode * 59 + this.TunerChannelId.GetHashCode();
                if (this.ProviderChannelId != null)
                    hashCode = hashCode * 59 + this.ProviderChannelId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
