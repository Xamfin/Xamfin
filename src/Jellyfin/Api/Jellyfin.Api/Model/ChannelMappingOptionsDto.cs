/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Channel mapping options dto.
    /// </summary>
    [DataContract]
    public partial class ChannelMappingOptionsDto :  IEquatable<ChannelMappingOptionsDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelMappingOptionsDto" /> class.
        /// </summary>
        /// <param name="tunerChannels">Gets or sets list of tuner channels..</param>
        /// <param name="providerChannels">Gets or sets list of provider channels..</param>
        /// <param name="mappings">Gets or sets list of mappings..</param>
        /// <param name="providerName">Gets or sets provider name..</param>
        public ChannelMappingOptionsDto(List<TunerChannelMapping> tunerChannels = default(List<TunerChannelMapping>), List<NameIdPair> providerChannels = default(List<NameIdPair>), List<NameValuePair> mappings = default(List<NameValuePair>), string providerName = default(string))
        {
            this.TunerChannels = tunerChannels;
            this.ProviderChannels = providerChannels;
            this.Mappings = mappings;
            this.ProviderName = providerName;
            this.TunerChannels = tunerChannels;
            this.ProviderChannels = providerChannels;
            this.Mappings = mappings;
            this.ProviderName = providerName;
        }

        /// <summary>
        /// Gets or sets list of tuner channels.
        /// </summary>
        /// <value>Gets or sets list of tuner channels.</value>
        [DataMember(Name="TunerChannels", EmitDefaultValue=true)]
        public List<TunerChannelMapping> TunerChannels { get; set; }

        /// <summary>
        /// Gets or sets list of provider channels.
        /// </summary>
        /// <value>Gets or sets list of provider channels.</value>
        [DataMember(Name="ProviderChannels", EmitDefaultValue=true)]
        public List<NameIdPair> ProviderChannels { get; set; }

        /// <summary>
        /// Gets or sets list of mappings.
        /// </summary>
        /// <value>Gets or sets list of mappings.</value>
        [DataMember(Name="Mappings", EmitDefaultValue=true)]
        public List<NameValuePair> Mappings { get; set; }

        /// <summary>
        /// Gets or sets provider name.
        /// </summary>
        /// <value>Gets or sets provider name.</value>
        [DataMember(Name="ProviderName", EmitDefaultValue=true)]
        public string ProviderName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelMappingOptionsDto {\n");
            sb.Append("  TunerChannels: ").Append(TunerChannels).Append("\n");
            sb.Append("  ProviderChannels: ").Append(ProviderChannels).Append("\n");
            sb.Append("  Mappings: ").Append(Mappings).Append("\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChannelMappingOptionsDto);
        }

        /// <summary>
        /// Returns true if ChannelMappingOptionsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ChannelMappingOptionsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelMappingOptionsDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TunerChannels == input.TunerChannels ||
                    this.TunerChannels != null &&
                    input.TunerChannels != null &&
                    this.TunerChannels.SequenceEqual(input.TunerChannels)
                ) && 
                (
                    this.ProviderChannels == input.ProviderChannels ||
                    this.ProviderChannels != null &&
                    input.ProviderChannels != null &&
                    this.ProviderChannels.SequenceEqual(input.ProviderChannels)
                ) && 
                (
                    this.Mappings == input.Mappings ||
                    this.Mappings != null &&
                    input.Mappings != null &&
                    this.Mappings.SequenceEqual(input.Mappings)
                ) && 
                (
                    this.ProviderName == input.ProviderName ||
                    (this.ProviderName != null &&
                    this.ProviderName.Equals(input.ProviderName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TunerChannels != null)
                    hashCode = hashCode * 59 + this.TunerChannels.GetHashCode();
                if (this.ProviderChannels != null)
                    hashCode = hashCode * 59 + this.ProviderChannels.GetHashCode();
                if (this.Mappings != null)
                    hashCode = hashCode * 59 + this.Mappings.GetHashCode();
                if (this.ProviderName != null)
                    hashCode = hashCode * 59 + this.ProviderName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
