/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// PublicSystemInfo
    /// </summary>
    [DataContract]
    public partial class PublicSystemInfo :  IEquatable<PublicSystemInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicSystemInfo" /> class.
        /// </summary>
        /// <param name="localAddress">Gets or sets the local address..</param>
        /// <param name="serverName">Gets or sets the name of the server..</param>
        /// <param name="version">Gets or sets the server version..</param>
        /// <param name="productName">Gets or sets the product name. This is the AssemblyProduct name..</param>
        /// <param name="operatingSystem">Gets or sets the operating system..</param>
        /// <param name="id">Gets or sets the id..</param>
        /// <param name="startupWizardCompleted">Gets or sets a value indicating whether the startup wizard is completed..</param>
        public PublicSystemInfo(string localAddress = default(string), string serverName = default(string), string version = default(string), string productName = default(string), string operatingSystem = default(string), string id = default(string), bool? startupWizardCompleted = default(bool?))
        {
            this.LocalAddress = localAddress;
            this.ServerName = serverName;
            this.Version = version;
            this.ProductName = productName;
            this.OperatingSystem = operatingSystem;
            this.Id = id;
            this.StartupWizardCompleted = startupWizardCompleted;
            this.LocalAddress = localAddress;
            this.ServerName = serverName;
            this.Version = version;
            this.ProductName = productName;
            this.OperatingSystem = operatingSystem;
            this.Id = id;
            this.StartupWizardCompleted = startupWizardCompleted;
        }

        /// <summary>
        /// Gets or sets the local address.
        /// </summary>
        /// <value>Gets or sets the local address.</value>
        [DataMember(Name="LocalAddress", EmitDefaultValue=true)]
        public string LocalAddress { get; set; }

        /// <summary>
        /// Gets or sets the name of the server.
        /// </summary>
        /// <value>Gets or sets the name of the server.</value>
        [DataMember(Name="ServerName", EmitDefaultValue=true)]
        public string ServerName { get; set; }

        /// <summary>
        /// Gets or sets the server version.
        /// </summary>
        /// <value>Gets or sets the server version.</value>
        [DataMember(Name="Version", EmitDefaultValue=true)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets the product name. This is the AssemblyProduct name.
        /// </summary>
        /// <value>Gets or sets the product name. This is the AssemblyProduct name.</value>
        [DataMember(Name="ProductName", EmitDefaultValue=true)]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or sets the operating system.
        /// </summary>
        /// <value>Gets or sets the operating system.</value>
        [DataMember(Name="OperatingSystem", EmitDefaultValue=true)]
        public string OperatingSystem { get; set; }

        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        /// <value>Gets or sets the id.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the startup wizard is completed.
        /// </summary>
        /// <value>Gets or sets a value indicating whether the startup wizard is completed.</value>
        [DataMember(Name="StartupWizardCompleted", EmitDefaultValue=true)]
        public bool? StartupWizardCompleted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PublicSystemInfo {\n");
            sb.Append("  LocalAddress: ").Append(LocalAddress).Append("\n");
            sb.Append("  ServerName: ").Append(ServerName).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  OperatingSystem: ").Append(OperatingSystem).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StartupWizardCompleted: ").Append(StartupWizardCompleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublicSystemInfo);
        }

        /// <summary>
        /// Returns true if PublicSystemInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of PublicSystemInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicSystemInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LocalAddress == input.LocalAddress ||
                    (this.LocalAddress != null &&
                    this.LocalAddress.Equals(input.LocalAddress))
                ) && 
                (
                    this.ServerName == input.ServerName ||
                    (this.ServerName != null &&
                    this.ServerName.Equals(input.ServerName))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.ProductName == input.ProductName ||
                    (this.ProductName != null &&
                    this.ProductName.Equals(input.ProductName))
                ) && 
                (
                    this.OperatingSystem == input.OperatingSystem ||
                    (this.OperatingSystem != null &&
                    this.OperatingSystem.Equals(input.OperatingSystem))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.StartupWizardCompleted == input.StartupWizardCompleted ||
                    (this.StartupWizardCompleted != null &&
                    this.StartupWizardCompleted.Equals(input.StartupWizardCompleted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LocalAddress != null)
                    hashCode = hashCode * 59 + this.LocalAddress.GetHashCode();
                if (this.ServerName != null)
                    hashCode = hashCode * 59 + this.ServerName.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.ProductName != null)
                    hashCode = hashCode * 59 + this.ProductName.GetHashCode();
                if (this.OperatingSystem != null)
                    hashCode = hashCode * 59 + this.OperatingSystem.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.StartupWizardCompleted != null)
                    hashCode = hashCode * 59 + this.StartupWizardCompleted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
