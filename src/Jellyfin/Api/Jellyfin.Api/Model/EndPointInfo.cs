/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// EndPointInfo
    /// </summary>
    [DataContract]
    public partial class EndPointInfo :  IEquatable<EndPointInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EndPointInfo" /> class.
        /// </summary>
        /// <param name="isLocal">isLocal.</param>
        /// <param name="isInNetwork">isInNetwork.</param>
        public EndPointInfo(bool isLocal = default(bool), bool isInNetwork = default(bool))
        {
            this.IsLocal = isLocal;
            this.IsInNetwork = isInNetwork;
        }

        /// <summary>
        /// Gets or Sets IsLocal
        /// </summary>
        [DataMember(Name="IsLocal", EmitDefaultValue=false)]
        public bool IsLocal { get; set; }

        /// <summary>
        /// Gets or Sets IsInNetwork
        /// </summary>
        [DataMember(Name="IsInNetwork", EmitDefaultValue=false)]
        public bool IsInNetwork { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EndPointInfo {\n");
            sb.Append("  IsLocal: ").Append(IsLocal).Append("\n");
            sb.Append("  IsInNetwork: ").Append(IsInNetwork).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EndPointInfo);
        }

        /// <summary>
        /// Returns true if EndPointInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of EndPointInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EndPointInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsLocal == input.IsLocal ||
                    (this.IsLocal != null &&
                    this.IsLocal.Equals(input.IsLocal))
                ) && 
                (
                    this.IsInNetwork == input.IsInNetwork ||
                    (this.IsInNetwork != null &&
                    this.IsInNetwork.Equals(input.IsInNetwork))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsLocal != null)
                    hashCode = hashCode * 59 + this.IsLocal.GetHashCode();
                if (this.IsInNetwork != null)
                    hashCode = hashCode * 59 + this.IsInNetwork.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
