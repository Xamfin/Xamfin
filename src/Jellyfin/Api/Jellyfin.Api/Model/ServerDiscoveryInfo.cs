/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// ServerDiscoveryInfo
    /// </summary>
    [DataContract]
    public partial class ServerDiscoveryInfo :  IEquatable<ServerDiscoveryInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerDiscoveryInfo" /> class.
        /// </summary>
        /// <param name="address">Gets or sets the address..</param>
        /// <param name="id">Gets or sets the server identifier..</param>
        /// <param name="name">Gets or sets the name..</param>
        /// <param name="endpointAddress">Gets or sets the endpoint address..</param>
        public ServerDiscoveryInfo(string address = default(string), string id = default(string), string name = default(string), string endpointAddress = default(string))
        {
            this.Address = address;
            this.Id = id;
            this.Name = name;
            this.EndpointAddress = endpointAddress;
            this.Address = address;
            this.Id = id;
            this.Name = name;
            this.EndpointAddress = endpointAddress;
        }

        /// <summary>
        /// Gets or sets the address.
        /// </summary>
        /// <value>Gets or sets the address.</value>
        [DataMember(Name="Address", EmitDefaultValue=true)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or sets the server identifier.
        /// </summary>
        /// <value>Gets or sets the server identifier.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>Gets or sets the name.</value>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the endpoint address.
        /// </summary>
        /// <value>Gets or sets the endpoint address.</value>
        [DataMember(Name="EndpointAddress", EmitDefaultValue=true)]
        public string EndpointAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServerDiscoveryInfo {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EndpointAddress: ").Append(EndpointAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServerDiscoveryInfo);
        }

        /// <summary>
        /// Returns true if ServerDiscoveryInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ServerDiscoveryInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServerDiscoveryInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.EndpointAddress == input.EndpointAddress ||
                    (this.EndpointAddress != null &&
                    this.EndpointAddress.Equals(input.EndpointAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.EndpointAddress != null)
                    hashCode = hashCode * 59 + this.EndpointAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
