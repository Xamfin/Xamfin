/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Class SendCommand.
    /// </summary>
    [DataContract]
    public partial class SendCommand :  IEquatable<SendCommand>, IValidatableObject
    {
        /// <summary>
        /// Gets the command.
        /// </summary>
        /// <value>Gets the command.</value>
        [DataMember(Name="Command", EmitDefaultValue=false)]
        public SendCommandType? Command { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendCommand" /> class.
        /// </summary>
        /// <param name="when">Gets or sets the UTC time when to execute the command..</param>
        public SendCommand(DateTime when = default(DateTime))
        {
            this.When = when;
        }

        /// <summary>
        /// Gets the group identifier.
        /// </summary>
        /// <value>Gets the group identifier.</value>
        [DataMember(Name="GroupId", EmitDefaultValue=false)]
        public Guid GroupId { get; private set; }

        /// <summary>
        /// Gets the playlist identifier of the playing item.
        /// </summary>
        /// <value>Gets the playlist identifier of the playing item.</value>
        [DataMember(Name="PlaylistItemId", EmitDefaultValue=false)]
        public Guid PlaylistItemId { get; private set; }

        /// <summary>
        /// Gets or sets the UTC time when to execute the command.
        /// </summary>
        /// <value>Gets or sets the UTC time when to execute the command.</value>
        [DataMember(Name="When", EmitDefaultValue=false)]
        public DateTime When { get; set; }

        /// <summary>
        /// Gets the position ticks.
        /// </summary>
        /// <value>Gets the position ticks.</value>
        [DataMember(Name="PositionTicks", EmitDefaultValue=true)]
        public long? PositionTicks { get; private set; }


        /// <summary>
        /// Gets the UTC time when this command has been emitted.
        /// </summary>
        /// <value>Gets the UTC time when this command has been emitted.</value>
        [DataMember(Name="EmittedAt", EmitDefaultValue=false)]
        public DateTime EmittedAt { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendCommand {\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  PlaylistItemId: ").Append(PlaylistItemId).Append("\n");
            sb.Append("  When: ").Append(When).Append("\n");
            sb.Append("  PositionTicks: ").Append(PositionTicks).Append("\n");
            sb.Append("  Command: ").Append(Command).Append("\n");
            sb.Append("  EmittedAt: ").Append(EmittedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendCommand);
        }

        /// <summary>
        /// Returns true if SendCommand instances are equal
        /// </summary>
        /// <param name="input">Instance of SendCommand to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendCommand input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.PlaylistItemId == input.PlaylistItemId ||
                    (this.PlaylistItemId != null &&
                    this.PlaylistItemId.Equals(input.PlaylistItemId))
                ) && 
                (
                    this.When == input.When ||
                    (this.When != null &&
                    this.When.Equals(input.When))
                ) && 
                (
                    this.PositionTicks == input.PositionTicks ||
                    (this.PositionTicks != null &&
                    this.PositionTicks.Equals(input.PositionTicks))
                ) && 
                (
                    this.Command == input.Command ||
                    (this.Command != null &&
                    this.Command.Equals(input.Command))
                ) && 
                (
                    this.EmittedAt == input.EmittedAt ||
                    (this.EmittedAt != null &&
                    this.EmittedAt.Equals(input.EmittedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.PlaylistItemId != null)
                    hashCode = hashCode * 59 + this.PlaylistItemId.GetHashCode();
                if (this.When != null)
                    hashCode = hashCode * 59 + this.When.GetHashCode();
                if (this.PositionTicks != null)
                    hashCode = hashCode * 59 + this.PositionTicks.GetHashCode();
                if (this.Command != null)
                    hashCode = hashCode * 59 + this.Command.GetHashCode();
                if (this.EmittedAt != null)
                    hashCode = hashCode * 59 + this.EmittedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
