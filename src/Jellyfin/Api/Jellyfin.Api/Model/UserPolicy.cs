/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// UserPolicy
    /// </summary>
    [DataContract]
    public partial class UserPolicy :  IEquatable<UserPolicy>, IValidatableObject
    {
        /// <summary>
        /// Enum SyncPlayUserAccessType.
        /// </summary>
        /// <value>Enum SyncPlayUserAccessType.</value>
        [DataMember(Name="SyncPlayAccess", EmitDefaultValue=false)]
        public SyncPlayUserAccessType? SyncPlayAccess { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPolicy" /> class.
        /// </summary>
        /// <param name="isAdministrator">Gets or sets a value indicating whether this instance is administrator..</param>
        /// <param name="isHidden">Gets or sets a value indicating whether this instance is hidden..</param>
        /// <param name="isDisabled">Gets or sets a value indicating whether this instance is disabled..</param>
        /// <param name="maxParentalRating">Gets or sets the max parental rating..</param>
        /// <param name="blockedTags">blockedTags.</param>
        /// <param name="enableUserPreferenceAccess">enableUserPreferenceAccess.</param>
        /// <param name="accessSchedules">accessSchedules.</param>
        /// <param name="blockUnratedItems">blockUnratedItems.</param>
        /// <param name="enableRemoteControlOfOtherUsers">enableRemoteControlOfOtherUsers.</param>
        /// <param name="enableSharedDeviceControl">enableSharedDeviceControl.</param>
        /// <param name="enableRemoteAccess">enableRemoteAccess.</param>
        /// <param name="enableLiveTvManagement">enableLiveTvManagement.</param>
        /// <param name="enableLiveTvAccess">enableLiveTvAccess.</param>
        /// <param name="enableMediaPlayback">enableMediaPlayback.</param>
        /// <param name="enableAudioPlaybackTranscoding">enableAudioPlaybackTranscoding.</param>
        /// <param name="enableVideoPlaybackTranscoding">enableVideoPlaybackTranscoding.</param>
        /// <param name="enablePlaybackRemuxing">enablePlaybackRemuxing.</param>
        /// <param name="forceRemoteSourceTranscoding">forceRemoteSourceTranscoding.</param>
        /// <param name="enableContentDeletion">enableContentDeletion.</param>
        /// <param name="enableContentDeletionFromFolders">enableContentDeletionFromFolders.</param>
        /// <param name="enableContentDownloading">enableContentDownloading.</param>
        /// <param name="enableSyncTranscoding">Gets or sets a value indicating whether [enable synchronize]..</param>
        /// <param name="enableMediaConversion">enableMediaConversion.</param>
        /// <param name="enabledDevices">enabledDevices.</param>
        /// <param name="enableAllDevices">enableAllDevices.</param>
        /// <param name="enabledChannels">enabledChannels.</param>
        /// <param name="enableAllChannels">enableAllChannels.</param>
        /// <param name="enabledFolders">enabledFolders.</param>
        /// <param name="enableAllFolders">enableAllFolders.</param>
        /// <param name="invalidLoginAttemptCount">invalidLoginAttemptCount.</param>
        /// <param name="loginAttemptsBeforeLockout">loginAttemptsBeforeLockout.</param>
        /// <param name="maxActiveSessions">maxActiveSessions.</param>
        /// <param name="enablePublicSharing">enablePublicSharing.</param>
        /// <param name="blockedMediaFolders">blockedMediaFolders.</param>
        /// <param name="blockedChannels">blockedChannels.</param>
        /// <param name="remoteClientBitrateLimit">remoteClientBitrateLimit.</param>
        /// <param name="authenticationProviderId">authenticationProviderId.</param>
        /// <param name="passwordResetProviderId">passwordResetProviderId.</param>
        /// <param name="syncPlayAccess">Enum SyncPlayUserAccessType..</param>
        public UserPolicy(bool isAdministrator = default(bool), bool isHidden = default(bool), bool isDisabled = default(bool), int? maxParentalRating = default(int?), List<string> blockedTags = default(List<string>), bool enableUserPreferenceAccess = default(bool), List<AccessSchedule> accessSchedules = default(List<AccessSchedule>), List<UnratedItem> blockUnratedItems = default(List<UnratedItem>), bool enableRemoteControlOfOtherUsers = default(bool), bool enableSharedDeviceControl = default(bool), bool enableRemoteAccess = default(bool), bool enableLiveTvManagement = default(bool), bool enableLiveTvAccess = default(bool), bool enableMediaPlayback = default(bool), bool enableAudioPlaybackTranscoding = default(bool), bool enableVideoPlaybackTranscoding = default(bool), bool enablePlaybackRemuxing = default(bool), bool forceRemoteSourceTranscoding = default(bool), bool enableContentDeletion = default(bool), List<string> enableContentDeletionFromFolders = default(List<string>), bool enableContentDownloading = default(bool), bool enableSyncTranscoding = default(bool), bool enableMediaConversion = default(bool), List<string> enabledDevices = default(List<string>), bool enableAllDevices = default(bool), List<Guid> enabledChannels = default(List<Guid>), bool enableAllChannels = default(bool), List<Guid> enabledFolders = default(List<Guid>), bool enableAllFolders = default(bool), int invalidLoginAttemptCount = default(int), int loginAttemptsBeforeLockout = default(int), int maxActiveSessions = default(int), bool enablePublicSharing = default(bool), List<Guid> blockedMediaFolders = default(List<Guid>), List<Guid> blockedChannels = default(List<Guid>), int remoteClientBitrateLimit = default(int), string authenticationProviderId = default(string), string passwordResetProviderId = default(string), SyncPlayUserAccessType? syncPlayAccess = default(SyncPlayUserAccessType?))
        {
            this.MaxParentalRating = maxParentalRating;
            this.BlockedTags = blockedTags;
            this.AccessSchedules = accessSchedules;
            this.BlockUnratedItems = blockUnratedItems;
            this.EnableContentDeletionFromFolders = enableContentDeletionFromFolders;
            this.EnabledDevices = enabledDevices;
            this.EnabledChannels = enabledChannels;
            this.EnabledFolders = enabledFolders;
            this.BlockedMediaFolders = blockedMediaFolders;
            this.BlockedChannels = blockedChannels;
            this.AuthenticationProviderId = authenticationProviderId;
            this.PasswordResetProviderId = passwordResetProviderId;
            this.IsAdministrator = isAdministrator;
            this.IsHidden = isHidden;
            this.IsDisabled = isDisabled;
            this.MaxParentalRating = maxParentalRating;
            this.BlockedTags = blockedTags;
            this.EnableUserPreferenceAccess = enableUserPreferenceAccess;
            this.AccessSchedules = accessSchedules;
            this.BlockUnratedItems = blockUnratedItems;
            this.EnableRemoteControlOfOtherUsers = enableRemoteControlOfOtherUsers;
            this.EnableSharedDeviceControl = enableSharedDeviceControl;
            this.EnableRemoteAccess = enableRemoteAccess;
            this.EnableLiveTvManagement = enableLiveTvManagement;
            this.EnableLiveTvAccess = enableLiveTvAccess;
            this.EnableMediaPlayback = enableMediaPlayback;
            this.EnableAudioPlaybackTranscoding = enableAudioPlaybackTranscoding;
            this.EnableVideoPlaybackTranscoding = enableVideoPlaybackTranscoding;
            this.EnablePlaybackRemuxing = enablePlaybackRemuxing;
            this.ForceRemoteSourceTranscoding = forceRemoteSourceTranscoding;
            this.EnableContentDeletion = enableContentDeletion;
            this.EnableContentDeletionFromFolders = enableContentDeletionFromFolders;
            this.EnableContentDownloading = enableContentDownloading;
            this.EnableSyncTranscoding = enableSyncTranscoding;
            this.EnableMediaConversion = enableMediaConversion;
            this.EnabledDevices = enabledDevices;
            this.EnableAllDevices = enableAllDevices;
            this.EnabledChannels = enabledChannels;
            this.EnableAllChannels = enableAllChannels;
            this.EnabledFolders = enabledFolders;
            this.EnableAllFolders = enableAllFolders;
            this.InvalidLoginAttemptCount = invalidLoginAttemptCount;
            this.LoginAttemptsBeforeLockout = loginAttemptsBeforeLockout;
            this.MaxActiveSessions = maxActiveSessions;
            this.EnablePublicSharing = enablePublicSharing;
            this.BlockedMediaFolders = blockedMediaFolders;
            this.BlockedChannels = blockedChannels;
            this.RemoteClientBitrateLimit = remoteClientBitrateLimit;
            this.AuthenticationProviderId = authenticationProviderId;
            this.PasswordResetProviderId = passwordResetProviderId;
            this.SyncPlayAccess = syncPlayAccess;
        }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is administrator.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is administrator.</value>
        [DataMember(Name="IsAdministrator", EmitDefaultValue=false)]
        public bool IsAdministrator { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is hidden.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is hidden.</value>
        [DataMember(Name="IsHidden", EmitDefaultValue=false)]
        public bool IsHidden { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is disabled.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is disabled.</value>
        [DataMember(Name="IsDisabled", EmitDefaultValue=false)]
        public bool IsDisabled { get; set; }

        /// <summary>
        /// Gets or sets the max parental rating.
        /// </summary>
        /// <value>Gets or sets the max parental rating.</value>
        [DataMember(Name="MaxParentalRating", EmitDefaultValue=true)]
        public int? MaxParentalRating { get; set; }

        /// <summary>
        /// Gets or Sets BlockedTags
        /// </summary>
        [DataMember(Name="BlockedTags", EmitDefaultValue=true)]
        public List<string> BlockedTags { get; set; }

        /// <summary>
        /// Gets or Sets EnableUserPreferenceAccess
        /// </summary>
        [DataMember(Name="EnableUserPreferenceAccess", EmitDefaultValue=false)]
        public bool EnableUserPreferenceAccess { get; set; }

        /// <summary>
        /// Gets or Sets AccessSchedules
        /// </summary>
        [DataMember(Name="AccessSchedules", EmitDefaultValue=true)]
        public List<AccessSchedule> AccessSchedules { get; set; }

        /// <summary>
        /// Gets or Sets BlockUnratedItems
        /// </summary>
        [DataMember(Name="BlockUnratedItems", EmitDefaultValue=true)]
        public List<UnratedItem> BlockUnratedItems { get; set; }

        /// <summary>
        /// Gets or Sets EnableRemoteControlOfOtherUsers
        /// </summary>
        [DataMember(Name="EnableRemoteControlOfOtherUsers", EmitDefaultValue=false)]
        public bool EnableRemoteControlOfOtherUsers { get; set; }

        /// <summary>
        /// Gets or Sets EnableSharedDeviceControl
        /// </summary>
        [DataMember(Name="EnableSharedDeviceControl", EmitDefaultValue=false)]
        public bool EnableSharedDeviceControl { get; set; }

        /// <summary>
        /// Gets or Sets EnableRemoteAccess
        /// </summary>
        [DataMember(Name="EnableRemoteAccess", EmitDefaultValue=false)]
        public bool EnableRemoteAccess { get; set; }

        /// <summary>
        /// Gets or Sets EnableLiveTvManagement
        /// </summary>
        [DataMember(Name="EnableLiveTvManagement", EmitDefaultValue=false)]
        public bool EnableLiveTvManagement { get; set; }

        /// <summary>
        /// Gets or Sets EnableLiveTvAccess
        /// </summary>
        [DataMember(Name="EnableLiveTvAccess", EmitDefaultValue=false)]
        public bool EnableLiveTvAccess { get; set; }

        /// <summary>
        /// Gets or Sets EnableMediaPlayback
        /// </summary>
        [DataMember(Name="EnableMediaPlayback", EmitDefaultValue=false)]
        public bool EnableMediaPlayback { get; set; }

        /// <summary>
        /// Gets or Sets EnableAudioPlaybackTranscoding
        /// </summary>
        [DataMember(Name="EnableAudioPlaybackTranscoding", EmitDefaultValue=false)]
        public bool EnableAudioPlaybackTranscoding { get; set; }

        /// <summary>
        /// Gets or Sets EnableVideoPlaybackTranscoding
        /// </summary>
        [DataMember(Name="EnableVideoPlaybackTranscoding", EmitDefaultValue=false)]
        public bool EnableVideoPlaybackTranscoding { get; set; }

        /// <summary>
        /// Gets or Sets EnablePlaybackRemuxing
        /// </summary>
        [DataMember(Name="EnablePlaybackRemuxing", EmitDefaultValue=false)]
        public bool EnablePlaybackRemuxing { get; set; }

        /// <summary>
        /// Gets or Sets ForceRemoteSourceTranscoding
        /// </summary>
        [DataMember(Name="ForceRemoteSourceTranscoding", EmitDefaultValue=false)]
        public bool ForceRemoteSourceTranscoding { get; set; }

        /// <summary>
        /// Gets or Sets EnableContentDeletion
        /// </summary>
        [DataMember(Name="EnableContentDeletion", EmitDefaultValue=false)]
        public bool EnableContentDeletion { get; set; }

        /// <summary>
        /// Gets or Sets EnableContentDeletionFromFolders
        /// </summary>
        [DataMember(Name="EnableContentDeletionFromFolders", EmitDefaultValue=true)]
        public List<string> EnableContentDeletionFromFolders { get; set; }

        /// <summary>
        /// Gets or Sets EnableContentDownloading
        /// </summary>
        [DataMember(Name="EnableContentDownloading", EmitDefaultValue=false)]
        public bool EnableContentDownloading { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [enable synchronize].
        /// </summary>
        /// <value>Gets or sets a value indicating whether [enable synchronize].</value>
        [DataMember(Name="EnableSyncTranscoding", EmitDefaultValue=false)]
        public bool EnableSyncTranscoding { get; set; }

        /// <summary>
        /// Gets or Sets EnableMediaConversion
        /// </summary>
        [DataMember(Name="EnableMediaConversion", EmitDefaultValue=false)]
        public bool EnableMediaConversion { get; set; }

        /// <summary>
        /// Gets or Sets EnabledDevices
        /// </summary>
        [DataMember(Name="EnabledDevices", EmitDefaultValue=true)]
        public List<string> EnabledDevices { get; set; }

        /// <summary>
        /// Gets or Sets EnableAllDevices
        /// </summary>
        [DataMember(Name="EnableAllDevices", EmitDefaultValue=false)]
        public bool EnableAllDevices { get; set; }

        /// <summary>
        /// Gets or Sets EnabledChannels
        /// </summary>
        [DataMember(Name="EnabledChannels", EmitDefaultValue=true)]
        public List<Guid> EnabledChannels { get; set; }

        /// <summary>
        /// Gets or Sets EnableAllChannels
        /// </summary>
        [DataMember(Name="EnableAllChannels", EmitDefaultValue=false)]
        public bool EnableAllChannels { get; set; }

        /// <summary>
        /// Gets or Sets EnabledFolders
        /// </summary>
        [DataMember(Name="EnabledFolders", EmitDefaultValue=true)]
        public List<Guid> EnabledFolders { get; set; }

        /// <summary>
        /// Gets or Sets EnableAllFolders
        /// </summary>
        [DataMember(Name="EnableAllFolders", EmitDefaultValue=false)]
        public bool EnableAllFolders { get; set; }

        /// <summary>
        /// Gets or Sets InvalidLoginAttemptCount
        /// </summary>
        [DataMember(Name="InvalidLoginAttemptCount", EmitDefaultValue=false)]
        public int InvalidLoginAttemptCount { get; set; }

        /// <summary>
        /// Gets or Sets LoginAttemptsBeforeLockout
        /// </summary>
        [DataMember(Name="LoginAttemptsBeforeLockout", EmitDefaultValue=false)]
        public int LoginAttemptsBeforeLockout { get; set; }

        /// <summary>
        /// Gets or Sets MaxActiveSessions
        /// </summary>
        [DataMember(Name="MaxActiveSessions", EmitDefaultValue=false)]
        public int MaxActiveSessions { get; set; }

        /// <summary>
        /// Gets or Sets EnablePublicSharing
        /// </summary>
        [DataMember(Name="EnablePublicSharing", EmitDefaultValue=false)]
        public bool EnablePublicSharing { get; set; }

        /// <summary>
        /// Gets or Sets BlockedMediaFolders
        /// </summary>
        [DataMember(Name="BlockedMediaFolders", EmitDefaultValue=true)]
        public List<Guid> BlockedMediaFolders { get; set; }

        /// <summary>
        /// Gets or Sets BlockedChannels
        /// </summary>
        [DataMember(Name="BlockedChannels", EmitDefaultValue=true)]
        public List<Guid> BlockedChannels { get; set; }

        /// <summary>
        /// Gets or Sets RemoteClientBitrateLimit
        /// </summary>
        [DataMember(Name="RemoteClientBitrateLimit", EmitDefaultValue=false)]
        public int RemoteClientBitrateLimit { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationProviderId
        /// </summary>
        [DataMember(Name="AuthenticationProviderId", EmitDefaultValue=true)]
        public string AuthenticationProviderId { get; set; }

        /// <summary>
        /// Gets or Sets PasswordResetProviderId
        /// </summary>
        [DataMember(Name="PasswordResetProviderId", EmitDefaultValue=true)]
        public string PasswordResetProviderId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserPolicy {\n");
            sb.Append("  IsAdministrator: ").Append(IsAdministrator).Append("\n");
            sb.Append("  IsHidden: ").Append(IsHidden).Append("\n");
            sb.Append("  IsDisabled: ").Append(IsDisabled).Append("\n");
            sb.Append("  MaxParentalRating: ").Append(MaxParentalRating).Append("\n");
            sb.Append("  BlockedTags: ").Append(BlockedTags).Append("\n");
            sb.Append("  EnableUserPreferenceAccess: ").Append(EnableUserPreferenceAccess).Append("\n");
            sb.Append("  AccessSchedules: ").Append(AccessSchedules).Append("\n");
            sb.Append("  BlockUnratedItems: ").Append(BlockUnratedItems).Append("\n");
            sb.Append("  EnableRemoteControlOfOtherUsers: ").Append(EnableRemoteControlOfOtherUsers).Append("\n");
            sb.Append("  EnableSharedDeviceControl: ").Append(EnableSharedDeviceControl).Append("\n");
            sb.Append("  EnableRemoteAccess: ").Append(EnableRemoteAccess).Append("\n");
            sb.Append("  EnableLiveTvManagement: ").Append(EnableLiveTvManagement).Append("\n");
            sb.Append("  EnableLiveTvAccess: ").Append(EnableLiveTvAccess).Append("\n");
            sb.Append("  EnableMediaPlayback: ").Append(EnableMediaPlayback).Append("\n");
            sb.Append("  EnableAudioPlaybackTranscoding: ").Append(EnableAudioPlaybackTranscoding).Append("\n");
            sb.Append("  EnableVideoPlaybackTranscoding: ").Append(EnableVideoPlaybackTranscoding).Append("\n");
            sb.Append("  EnablePlaybackRemuxing: ").Append(EnablePlaybackRemuxing).Append("\n");
            sb.Append("  ForceRemoteSourceTranscoding: ").Append(ForceRemoteSourceTranscoding).Append("\n");
            sb.Append("  EnableContentDeletion: ").Append(EnableContentDeletion).Append("\n");
            sb.Append("  EnableContentDeletionFromFolders: ").Append(EnableContentDeletionFromFolders).Append("\n");
            sb.Append("  EnableContentDownloading: ").Append(EnableContentDownloading).Append("\n");
            sb.Append("  EnableSyncTranscoding: ").Append(EnableSyncTranscoding).Append("\n");
            sb.Append("  EnableMediaConversion: ").Append(EnableMediaConversion).Append("\n");
            sb.Append("  EnabledDevices: ").Append(EnabledDevices).Append("\n");
            sb.Append("  EnableAllDevices: ").Append(EnableAllDevices).Append("\n");
            sb.Append("  EnabledChannels: ").Append(EnabledChannels).Append("\n");
            sb.Append("  EnableAllChannels: ").Append(EnableAllChannels).Append("\n");
            sb.Append("  EnabledFolders: ").Append(EnabledFolders).Append("\n");
            sb.Append("  EnableAllFolders: ").Append(EnableAllFolders).Append("\n");
            sb.Append("  InvalidLoginAttemptCount: ").Append(InvalidLoginAttemptCount).Append("\n");
            sb.Append("  LoginAttemptsBeforeLockout: ").Append(LoginAttemptsBeforeLockout).Append("\n");
            sb.Append("  MaxActiveSessions: ").Append(MaxActiveSessions).Append("\n");
            sb.Append("  EnablePublicSharing: ").Append(EnablePublicSharing).Append("\n");
            sb.Append("  BlockedMediaFolders: ").Append(BlockedMediaFolders).Append("\n");
            sb.Append("  BlockedChannels: ").Append(BlockedChannels).Append("\n");
            sb.Append("  RemoteClientBitrateLimit: ").Append(RemoteClientBitrateLimit).Append("\n");
            sb.Append("  AuthenticationProviderId: ").Append(AuthenticationProviderId).Append("\n");
            sb.Append("  PasswordResetProviderId: ").Append(PasswordResetProviderId).Append("\n");
            sb.Append("  SyncPlayAccess: ").Append(SyncPlayAccess).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserPolicy);
        }

        /// <summary>
        /// Returns true if UserPolicy instances are equal
        /// </summary>
        /// <param name="input">Instance of UserPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserPolicy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsAdministrator == input.IsAdministrator ||
                    (this.IsAdministrator != null &&
                    this.IsAdministrator.Equals(input.IsAdministrator))
                ) && 
                (
                    this.IsHidden == input.IsHidden ||
                    (this.IsHidden != null &&
                    this.IsHidden.Equals(input.IsHidden))
                ) && 
                (
                    this.IsDisabled == input.IsDisabled ||
                    (this.IsDisabled != null &&
                    this.IsDisabled.Equals(input.IsDisabled))
                ) && 
                (
                    this.MaxParentalRating == input.MaxParentalRating ||
                    (this.MaxParentalRating != null &&
                    this.MaxParentalRating.Equals(input.MaxParentalRating))
                ) && 
                (
                    this.BlockedTags == input.BlockedTags ||
                    this.BlockedTags != null &&
                    input.BlockedTags != null &&
                    this.BlockedTags.SequenceEqual(input.BlockedTags)
                ) && 
                (
                    this.EnableUserPreferenceAccess == input.EnableUserPreferenceAccess ||
                    (this.EnableUserPreferenceAccess != null &&
                    this.EnableUserPreferenceAccess.Equals(input.EnableUserPreferenceAccess))
                ) && 
                (
                    this.AccessSchedules == input.AccessSchedules ||
                    this.AccessSchedules != null &&
                    input.AccessSchedules != null &&
                    this.AccessSchedules.SequenceEqual(input.AccessSchedules)
                ) && 
                (
                    this.BlockUnratedItems == input.BlockUnratedItems ||
                    this.BlockUnratedItems != null &&
                    input.BlockUnratedItems != null &&
                    this.BlockUnratedItems.SequenceEqual(input.BlockUnratedItems)
                ) && 
                (
                    this.EnableRemoteControlOfOtherUsers == input.EnableRemoteControlOfOtherUsers ||
                    (this.EnableRemoteControlOfOtherUsers != null &&
                    this.EnableRemoteControlOfOtherUsers.Equals(input.EnableRemoteControlOfOtherUsers))
                ) && 
                (
                    this.EnableSharedDeviceControl == input.EnableSharedDeviceControl ||
                    (this.EnableSharedDeviceControl != null &&
                    this.EnableSharedDeviceControl.Equals(input.EnableSharedDeviceControl))
                ) && 
                (
                    this.EnableRemoteAccess == input.EnableRemoteAccess ||
                    (this.EnableRemoteAccess != null &&
                    this.EnableRemoteAccess.Equals(input.EnableRemoteAccess))
                ) && 
                (
                    this.EnableLiveTvManagement == input.EnableLiveTvManagement ||
                    (this.EnableLiveTvManagement != null &&
                    this.EnableLiveTvManagement.Equals(input.EnableLiveTvManagement))
                ) && 
                (
                    this.EnableLiveTvAccess == input.EnableLiveTvAccess ||
                    (this.EnableLiveTvAccess != null &&
                    this.EnableLiveTvAccess.Equals(input.EnableLiveTvAccess))
                ) && 
                (
                    this.EnableMediaPlayback == input.EnableMediaPlayback ||
                    (this.EnableMediaPlayback != null &&
                    this.EnableMediaPlayback.Equals(input.EnableMediaPlayback))
                ) && 
                (
                    this.EnableAudioPlaybackTranscoding == input.EnableAudioPlaybackTranscoding ||
                    (this.EnableAudioPlaybackTranscoding != null &&
                    this.EnableAudioPlaybackTranscoding.Equals(input.EnableAudioPlaybackTranscoding))
                ) && 
                (
                    this.EnableVideoPlaybackTranscoding == input.EnableVideoPlaybackTranscoding ||
                    (this.EnableVideoPlaybackTranscoding != null &&
                    this.EnableVideoPlaybackTranscoding.Equals(input.EnableVideoPlaybackTranscoding))
                ) && 
                (
                    this.EnablePlaybackRemuxing == input.EnablePlaybackRemuxing ||
                    (this.EnablePlaybackRemuxing != null &&
                    this.EnablePlaybackRemuxing.Equals(input.EnablePlaybackRemuxing))
                ) && 
                (
                    this.ForceRemoteSourceTranscoding == input.ForceRemoteSourceTranscoding ||
                    (this.ForceRemoteSourceTranscoding != null &&
                    this.ForceRemoteSourceTranscoding.Equals(input.ForceRemoteSourceTranscoding))
                ) && 
                (
                    this.EnableContentDeletion == input.EnableContentDeletion ||
                    (this.EnableContentDeletion != null &&
                    this.EnableContentDeletion.Equals(input.EnableContentDeletion))
                ) && 
                (
                    this.EnableContentDeletionFromFolders == input.EnableContentDeletionFromFolders ||
                    this.EnableContentDeletionFromFolders != null &&
                    input.EnableContentDeletionFromFolders != null &&
                    this.EnableContentDeletionFromFolders.SequenceEqual(input.EnableContentDeletionFromFolders)
                ) && 
                (
                    this.EnableContentDownloading == input.EnableContentDownloading ||
                    (this.EnableContentDownloading != null &&
                    this.EnableContentDownloading.Equals(input.EnableContentDownloading))
                ) && 
                (
                    this.EnableSyncTranscoding == input.EnableSyncTranscoding ||
                    (this.EnableSyncTranscoding != null &&
                    this.EnableSyncTranscoding.Equals(input.EnableSyncTranscoding))
                ) && 
                (
                    this.EnableMediaConversion == input.EnableMediaConversion ||
                    (this.EnableMediaConversion != null &&
                    this.EnableMediaConversion.Equals(input.EnableMediaConversion))
                ) && 
                (
                    this.EnabledDevices == input.EnabledDevices ||
                    this.EnabledDevices != null &&
                    input.EnabledDevices != null &&
                    this.EnabledDevices.SequenceEqual(input.EnabledDevices)
                ) && 
                (
                    this.EnableAllDevices == input.EnableAllDevices ||
                    (this.EnableAllDevices != null &&
                    this.EnableAllDevices.Equals(input.EnableAllDevices))
                ) && 
                (
                    this.EnabledChannels == input.EnabledChannels ||
                    this.EnabledChannels != null &&
                    input.EnabledChannels != null &&
                    this.EnabledChannels.SequenceEqual(input.EnabledChannels)
                ) && 
                (
                    this.EnableAllChannels == input.EnableAllChannels ||
                    (this.EnableAllChannels != null &&
                    this.EnableAllChannels.Equals(input.EnableAllChannels))
                ) && 
                (
                    this.EnabledFolders == input.EnabledFolders ||
                    this.EnabledFolders != null &&
                    input.EnabledFolders != null &&
                    this.EnabledFolders.SequenceEqual(input.EnabledFolders)
                ) && 
                (
                    this.EnableAllFolders == input.EnableAllFolders ||
                    (this.EnableAllFolders != null &&
                    this.EnableAllFolders.Equals(input.EnableAllFolders))
                ) && 
                (
                    this.InvalidLoginAttemptCount == input.InvalidLoginAttemptCount ||
                    (this.InvalidLoginAttemptCount != null &&
                    this.InvalidLoginAttemptCount.Equals(input.InvalidLoginAttemptCount))
                ) && 
                (
                    this.LoginAttemptsBeforeLockout == input.LoginAttemptsBeforeLockout ||
                    (this.LoginAttemptsBeforeLockout != null &&
                    this.LoginAttemptsBeforeLockout.Equals(input.LoginAttemptsBeforeLockout))
                ) && 
                (
                    this.MaxActiveSessions == input.MaxActiveSessions ||
                    (this.MaxActiveSessions != null &&
                    this.MaxActiveSessions.Equals(input.MaxActiveSessions))
                ) && 
                (
                    this.EnablePublicSharing == input.EnablePublicSharing ||
                    (this.EnablePublicSharing != null &&
                    this.EnablePublicSharing.Equals(input.EnablePublicSharing))
                ) && 
                (
                    this.BlockedMediaFolders == input.BlockedMediaFolders ||
                    this.BlockedMediaFolders != null &&
                    input.BlockedMediaFolders != null &&
                    this.BlockedMediaFolders.SequenceEqual(input.BlockedMediaFolders)
                ) && 
                (
                    this.BlockedChannels == input.BlockedChannels ||
                    this.BlockedChannels != null &&
                    input.BlockedChannels != null &&
                    this.BlockedChannels.SequenceEqual(input.BlockedChannels)
                ) && 
                (
                    this.RemoteClientBitrateLimit == input.RemoteClientBitrateLimit ||
                    (this.RemoteClientBitrateLimit != null &&
                    this.RemoteClientBitrateLimit.Equals(input.RemoteClientBitrateLimit))
                ) && 
                (
                    this.AuthenticationProviderId == input.AuthenticationProviderId ||
                    (this.AuthenticationProviderId != null &&
                    this.AuthenticationProviderId.Equals(input.AuthenticationProviderId))
                ) && 
                (
                    this.PasswordResetProviderId == input.PasswordResetProviderId ||
                    (this.PasswordResetProviderId != null &&
                    this.PasswordResetProviderId.Equals(input.PasswordResetProviderId))
                ) && 
                (
                    this.SyncPlayAccess == input.SyncPlayAccess ||
                    (this.SyncPlayAccess != null &&
                    this.SyncPlayAccess.Equals(input.SyncPlayAccess))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsAdministrator != null)
                    hashCode = hashCode * 59 + this.IsAdministrator.GetHashCode();
                if (this.IsHidden != null)
                    hashCode = hashCode * 59 + this.IsHidden.GetHashCode();
                if (this.IsDisabled != null)
                    hashCode = hashCode * 59 + this.IsDisabled.GetHashCode();
                if (this.MaxParentalRating != null)
                    hashCode = hashCode * 59 + this.MaxParentalRating.GetHashCode();
                if (this.BlockedTags != null)
                    hashCode = hashCode * 59 + this.BlockedTags.GetHashCode();
                if (this.EnableUserPreferenceAccess != null)
                    hashCode = hashCode * 59 + this.EnableUserPreferenceAccess.GetHashCode();
                if (this.AccessSchedules != null)
                    hashCode = hashCode * 59 + this.AccessSchedules.GetHashCode();
                if (this.BlockUnratedItems != null)
                    hashCode = hashCode * 59 + this.BlockUnratedItems.GetHashCode();
                if (this.EnableRemoteControlOfOtherUsers != null)
                    hashCode = hashCode * 59 + this.EnableRemoteControlOfOtherUsers.GetHashCode();
                if (this.EnableSharedDeviceControl != null)
                    hashCode = hashCode * 59 + this.EnableSharedDeviceControl.GetHashCode();
                if (this.EnableRemoteAccess != null)
                    hashCode = hashCode * 59 + this.EnableRemoteAccess.GetHashCode();
                if (this.EnableLiveTvManagement != null)
                    hashCode = hashCode * 59 + this.EnableLiveTvManagement.GetHashCode();
                if (this.EnableLiveTvAccess != null)
                    hashCode = hashCode * 59 + this.EnableLiveTvAccess.GetHashCode();
                if (this.EnableMediaPlayback != null)
                    hashCode = hashCode * 59 + this.EnableMediaPlayback.GetHashCode();
                if (this.EnableAudioPlaybackTranscoding != null)
                    hashCode = hashCode * 59 + this.EnableAudioPlaybackTranscoding.GetHashCode();
                if (this.EnableVideoPlaybackTranscoding != null)
                    hashCode = hashCode * 59 + this.EnableVideoPlaybackTranscoding.GetHashCode();
                if (this.EnablePlaybackRemuxing != null)
                    hashCode = hashCode * 59 + this.EnablePlaybackRemuxing.GetHashCode();
                if (this.ForceRemoteSourceTranscoding != null)
                    hashCode = hashCode * 59 + this.ForceRemoteSourceTranscoding.GetHashCode();
                if (this.EnableContentDeletion != null)
                    hashCode = hashCode * 59 + this.EnableContentDeletion.GetHashCode();
                if (this.EnableContentDeletionFromFolders != null)
                    hashCode = hashCode * 59 + this.EnableContentDeletionFromFolders.GetHashCode();
                if (this.EnableContentDownloading != null)
                    hashCode = hashCode * 59 + this.EnableContentDownloading.GetHashCode();
                if (this.EnableSyncTranscoding != null)
                    hashCode = hashCode * 59 + this.EnableSyncTranscoding.GetHashCode();
                if (this.EnableMediaConversion != null)
                    hashCode = hashCode * 59 + this.EnableMediaConversion.GetHashCode();
                if (this.EnabledDevices != null)
                    hashCode = hashCode * 59 + this.EnabledDevices.GetHashCode();
                if (this.EnableAllDevices != null)
                    hashCode = hashCode * 59 + this.EnableAllDevices.GetHashCode();
                if (this.EnabledChannels != null)
                    hashCode = hashCode * 59 + this.EnabledChannels.GetHashCode();
                if (this.EnableAllChannels != null)
                    hashCode = hashCode * 59 + this.EnableAllChannels.GetHashCode();
                if (this.EnabledFolders != null)
                    hashCode = hashCode * 59 + this.EnabledFolders.GetHashCode();
                if (this.EnableAllFolders != null)
                    hashCode = hashCode * 59 + this.EnableAllFolders.GetHashCode();
                if (this.InvalidLoginAttemptCount != null)
                    hashCode = hashCode * 59 + this.InvalidLoginAttemptCount.GetHashCode();
                if (this.LoginAttemptsBeforeLockout != null)
                    hashCode = hashCode * 59 + this.LoginAttemptsBeforeLockout.GetHashCode();
                if (this.MaxActiveSessions != null)
                    hashCode = hashCode * 59 + this.MaxActiveSessions.GetHashCode();
                if (this.EnablePublicSharing != null)
                    hashCode = hashCode * 59 + this.EnablePublicSharing.GetHashCode();
                if (this.BlockedMediaFolders != null)
                    hashCode = hashCode * 59 + this.BlockedMediaFolders.GetHashCode();
                if (this.BlockedChannels != null)
                    hashCode = hashCode * 59 + this.BlockedChannels.GetHashCode();
                if (this.RemoteClientBitrateLimit != null)
                    hashCode = hashCode * 59 + this.RemoteClientBitrateLimit.GetHashCode();
                if (this.AuthenticationProviderId != null)
                    hashCode = hashCode * 59 + this.AuthenticationProviderId.GetHashCode();
                if (this.PasswordResetProviderId != null)
                    hashCode = hashCode * 59 + this.PasswordResetProviderId.GetHashCode();
                if (this.SyncPlayAccess != null)
                    hashCode = hashCode * 59 + this.SyncPlayAccess.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
