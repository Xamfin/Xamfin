/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// BaseItemDtoQueryResult
    /// </summary>
    [DataContract]
    public partial class BaseItemDtoQueryResult :  IEquatable<BaseItemDtoQueryResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseItemDtoQueryResult" /> class.
        /// </summary>
        /// <param name="items">Gets or sets the items..</param>
        /// <param name="totalRecordCount">The total number of records available..</param>
        /// <param name="startIndex">The index of the first record in Items..</param>
        public BaseItemDtoQueryResult(List<BaseItemDto> items = default(List<BaseItemDto>), int totalRecordCount = default(int), int startIndex = default(int))
        {
            this.Items = items;
            this.Items = items;
            this.TotalRecordCount = totalRecordCount;
            this.StartIndex = startIndex;
        }

        /// <summary>
        /// Gets or sets the items.
        /// </summary>
        /// <value>Gets or sets the items.</value>
        [DataMember(Name="Items", EmitDefaultValue=true)]
        public List<BaseItemDto> Items { get; set; }

        /// <summary>
        /// The total number of records available.
        /// </summary>
        /// <value>The total number of records available.</value>
        [DataMember(Name="TotalRecordCount", EmitDefaultValue=false)]
        public int TotalRecordCount { get; set; }

        /// <summary>
        /// The index of the first record in Items.
        /// </summary>
        /// <value>The index of the first record in Items.</value>
        [DataMember(Name="StartIndex", EmitDefaultValue=false)]
        public int StartIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaseItemDtoQueryResult {\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  TotalRecordCount: ").Append(TotalRecordCount).Append("\n");
            sb.Append("  StartIndex: ").Append(StartIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BaseItemDtoQueryResult);
        }

        /// <summary>
        /// Returns true if BaseItemDtoQueryResult instances are equal
        /// </summary>
        /// <param name="input">Instance of BaseItemDtoQueryResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaseItemDtoQueryResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.TotalRecordCount == input.TotalRecordCount ||
                    (this.TotalRecordCount != null &&
                    this.TotalRecordCount.Equals(input.TotalRecordCount))
                ) && 
                (
                    this.StartIndex == input.StartIndex ||
                    (this.StartIndex != null &&
                    this.StartIndex.Equals(input.StartIndex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.TotalRecordCount != null)
                    hashCode = hashCode * 59 + this.TotalRecordCount.GetHashCode();
                if (this.StartIndex != null)
                    hashCode = hashCode * 59 + this.StartIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
