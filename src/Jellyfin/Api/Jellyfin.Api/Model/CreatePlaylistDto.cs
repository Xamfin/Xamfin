/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Create new playlist dto.
    /// </summary>
    [DataContract]
    public partial class CreatePlaylistDto :  IEquatable<CreatePlaylistDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePlaylistDto" /> class.
        /// </summary>
        /// <param name="name">Gets or sets the name of the new playlist..</param>
        /// <param name="ids">Gets or sets item ids to add to the playlist..</param>
        /// <param name="userId">Gets or sets the user id..</param>
        /// <param name="mediaType">Gets or sets the media type..</param>
        public CreatePlaylistDto(string name = default(string), List<Guid> ids = default(List<Guid>), Guid? userId = default(Guid?), string mediaType = default(string))
        {
            this.Name = name;
            this.Ids = ids;
            this.UserId = userId;
            this.MediaType = mediaType;
            this.Name = name;
            this.Ids = ids;
            this.UserId = userId;
            this.MediaType = mediaType;
        }

        /// <summary>
        /// Gets or sets the name of the new playlist.
        /// </summary>
        /// <value>Gets or sets the name of the new playlist.</value>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets item ids to add to the playlist.
        /// </summary>
        /// <value>Gets or sets item ids to add to the playlist.</value>
        [DataMember(Name="Ids", EmitDefaultValue=true)]
        public List<Guid> Ids { get; set; }

        /// <summary>
        /// Gets or sets the user id.
        /// </summary>
        /// <value>Gets or sets the user id.</value>
        [DataMember(Name="UserId", EmitDefaultValue=true)]
        public Guid? UserId { get; set; }

        /// <summary>
        /// Gets or sets the media type.
        /// </summary>
        /// <value>Gets or sets the media type.</value>
        [DataMember(Name="MediaType", EmitDefaultValue=true)]
        public string MediaType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreatePlaylistDto {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreatePlaylistDto);
        }

        /// <summary>
        /// Returns true if CreatePlaylistDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CreatePlaylistDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreatePlaylistDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Ids == input.Ids ||
                    this.Ids != null &&
                    input.Ids != null &&
                    this.Ids.SequenceEqual(input.Ids)
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.MediaType == input.MediaType ||
                    (this.MediaType != null &&
                    this.MediaType.Equals(input.MediaType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Ids != null)
                    hashCode = hashCode * 59 + this.Ids.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.MediaType != null)
                    hashCode = hashCode * 59 + this.MediaType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
