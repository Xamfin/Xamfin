/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Defines the MediaBrowser.Common.Plugins.IPlugin.
    /// </summary>
    [DataContract]
    public partial class IPlugin :  IEquatable<IPlugin>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IPlugin" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public IPlugin()
        {
        }

        /// <summary>
        /// Gets the name of the plugin.
        /// </summary>
        /// <value>Gets the name of the plugin.</value>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; private set; }

        /// <summary>
        /// Gets the Description.
        /// </summary>
        /// <value>Gets the Description.</value>
        [DataMember(Name="Description", EmitDefaultValue=true)]
        public string Description { get; private set; }

        /// <summary>
        /// Gets the unique id.
        /// </summary>
        /// <value>Gets the unique id.</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public Guid Id { get; private set; }

        /// <summary>
        /// Gets the plugin version.
        /// </summary>
        /// <value>Gets the plugin version.</value>
        [DataMember(Name="Version", EmitDefaultValue=true)]
        public Version Version { get; private set; }

        /// <summary>
        /// Gets the path to the assembly file.
        /// </summary>
        /// <value>Gets the path to the assembly file.</value>
        [DataMember(Name="AssemblyFilePath", EmitDefaultValue=true)]
        public string AssemblyFilePath { get; private set; }

        /// <summary>
        /// Gets a value indicating whether the plugin can be uninstalled.
        /// </summary>
        /// <value>Gets a value indicating whether the plugin can be uninstalled.</value>
        [DataMember(Name="CanUninstall", EmitDefaultValue=false)]
        public bool CanUninstall { get; private set; }

        /// <summary>
        /// Gets the full path to the data folder, where the plugin can store any miscellaneous files needed.
        /// </summary>
        /// <value>Gets the full path to the data folder, where the plugin can store any miscellaneous files needed.</value>
        [DataMember(Name="DataFolderPath", EmitDefaultValue=true)]
        public string DataFolderPath { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IPlugin {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  AssemblyFilePath: ").Append(AssemblyFilePath).Append("\n");
            sb.Append("  CanUninstall: ").Append(CanUninstall).Append("\n");
            sb.Append("  DataFolderPath: ").Append(DataFolderPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IPlugin);
        }

        /// <summary>
        /// Returns true if IPlugin instances are equal
        /// </summary>
        /// <param name="input">Instance of IPlugin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IPlugin input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.AssemblyFilePath == input.AssemblyFilePath ||
                    (this.AssemblyFilePath != null &&
                    this.AssemblyFilePath.Equals(input.AssemblyFilePath))
                ) && 
                (
                    this.CanUninstall == input.CanUninstall ||
                    (this.CanUninstall != null &&
                    this.CanUninstall.Equals(input.CanUninstall))
                ) && 
                (
                    this.DataFolderPath == input.DataFolderPath ||
                    (this.DataFolderPath != null &&
                    this.DataFolderPath.Equals(input.DataFolderPath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.AssemblyFilePath != null)
                    hashCode = hashCode * 59 + this.AssemblyFilePath.GetHashCode();
                if (this.CanUninstall != null)
                    hashCode = hashCode * 59 + this.CanUninstall.GetHashCode();
                if (this.DataFolderPath != null)
                    hashCode = hashCode * 59 + this.DataFolderPath.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
