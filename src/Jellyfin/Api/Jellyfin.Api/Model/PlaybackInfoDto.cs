/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// Plabyback info dto.
    /// </summary>
    [DataContract]
    public partial class PlaybackInfoDto :  IEquatable<PlaybackInfoDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlaybackInfoDto" /> class.
        /// </summary>
        /// <param name="userId">Gets or sets the playback userId..</param>
        /// <param name="maxStreamingBitrate">Gets or sets the max streaming bitrate..</param>
        /// <param name="startTimeTicks">Gets or sets the start time in ticks..</param>
        /// <param name="audioStreamIndex">Gets or sets the audio stream index..</param>
        /// <param name="subtitleStreamIndex">Gets or sets the subtitle stream index..</param>
        /// <param name="maxAudioChannels">Gets or sets the max audio channels..</param>
        /// <param name="mediaSourceId">Gets or sets the media source id..</param>
        /// <param name="liveStreamId">Gets or sets the live stream id..</param>
        /// <param name="deviceProfile">Gets or sets the device profile..</param>
        /// <param name="enableDirectPlay">Gets or sets a value indicating whether to enable direct play..</param>
        /// <param name="enableDirectStream">Gets or sets a value indicating whether to enable direct stream..</param>
        /// <param name="enableTranscoding">Gets or sets a value indicating whether to enable transcoding..</param>
        /// <param name="allowVideoStreamCopy">Gets or sets a value indicating whether to enable video stream copy..</param>
        /// <param name="allowAudioStreamCopy">Gets or sets a value indicating whether to allow audio stream copy..</param>
        /// <param name="autoOpenLiveStream">Gets or sets a value indicating whether to auto open the live stream..</param>
        public PlaybackInfoDto(Guid? userId = default(Guid?), int? maxStreamingBitrate = default(int?), long? startTimeTicks = default(long?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? maxAudioChannels = default(int?), string mediaSourceId = default(string), string liveStreamId = default(string), DeviceProfile deviceProfile = default(DeviceProfile), bool? enableDirectPlay = default(bool?), bool? enableDirectStream = default(bool?), bool? enableTranscoding = default(bool?), bool? allowVideoStreamCopy = default(bool?), bool? allowAudioStreamCopy = default(bool?), bool? autoOpenLiveStream = default(bool?))
        {
            this.UserId = userId;
            this.MaxStreamingBitrate = maxStreamingBitrate;
            this.StartTimeTicks = startTimeTicks;
            this.AudioStreamIndex = audioStreamIndex;
            this.SubtitleStreamIndex = subtitleStreamIndex;
            this.MaxAudioChannels = maxAudioChannels;
            this.MediaSourceId = mediaSourceId;
            this.LiveStreamId = liveStreamId;
            this.DeviceProfile = deviceProfile;
            this.EnableDirectPlay = enableDirectPlay;
            this.EnableDirectStream = enableDirectStream;
            this.EnableTranscoding = enableTranscoding;
            this.AllowVideoStreamCopy = allowVideoStreamCopy;
            this.AllowAudioStreamCopy = allowAudioStreamCopy;
            this.AutoOpenLiveStream = autoOpenLiveStream;
            this.UserId = userId;
            this.MaxStreamingBitrate = maxStreamingBitrate;
            this.StartTimeTicks = startTimeTicks;
            this.AudioStreamIndex = audioStreamIndex;
            this.SubtitleStreamIndex = subtitleStreamIndex;
            this.MaxAudioChannels = maxAudioChannels;
            this.MediaSourceId = mediaSourceId;
            this.LiveStreamId = liveStreamId;
            this.DeviceProfile = deviceProfile;
            this.EnableDirectPlay = enableDirectPlay;
            this.EnableDirectStream = enableDirectStream;
            this.EnableTranscoding = enableTranscoding;
            this.AllowVideoStreamCopy = allowVideoStreamCopy;
            this.AllowAudioStreamCopy = allowAudioStreamCopy;
            this.AutoOpenLiveStream = autoOpenLiveStream;
        }

        /// <summary>
        /// Gets or sets the playback userId.
        /// </summary>
        /// <value>Gets or sets the playback userId.</value>
        [DataMember(Name="UserId", EmitDefaultValue=true)]
        public Guid? UserId { get; set; }

        /// <summary>
        /// Gets or sets the max streaming bitrate.
        /// </summary>
        /// <value>Gets or sets the max streaming bitrate.</value>
        [DataMember(Name="MaxStreamingBitrate", EmitDefaultValue=true)]
        public int? MaxStreamingBitrate { get; set; }

        /// <summary>
        /// Gets or sets the start time in ticks.
        /// </summary>
        /// <value>Gets or sets the start time in ticks.</value>
        [DataMember(Name="StartTimeTicks", EmitDefaultValue=true)]
        public long? StartTimeTicks { get; set; }

        /// <summary>
        /// Gets or sets the audio stream index.
        /// </summary>
        /// <value>Gets or sets the audio stream index.</value>
        [DataMember(Name="AudioStreamIndex", EmitDefaultValue=true)]
        public int? AudioStreamIndex { get; set; }

        /// <summary>
        /// Gets or sets the subtitle stream index.
        /// </summary>
        /// <value>Gets or sets the subtitle stream index.</value>
        [DataMember(Name="SubtitleStreamIndex", EmitDefaultValue=true)]
        public int? SubtitleStreamIndex { get; set; }

        /// <summary>
        /// Gets or sets the max audio channels.
        /// </summary>
        /// <value>Gets or sets the max audio channels.</value>
        [DataMember(Name="MaxAudioChannels", EmitDefaultValue=true)]
        public int? MaxAudioChannels { get; set; }

        /// <summary>
        /// Gets or sets the media source id.
        /// </summary>
        /// <value>Gets or sets the media source id.</value>
        [DataMember(Name="MediaSourceId", EmitDefaultValue=true)]
        public string MediaSourceId { get; set; }

        /// <summary>
        /// Gets or sets the live stream id.
        /// </summary>
        /// <value>Gets or sets the live stream id.</value>
        [DataMember(Name="LiveStreamId", EmitDefaultValue=true)]
        public string LiveStreamId { get; set; }

        /// <summary>
        /// Gets or sets the device profile.
        /// </summary>
        /// <value>Gets or sets the device profile.</value>
        [DataMember(Name="DeviceProfile", EmitDefaultValue=true)]
        public DeviceProfile DeviceProfile { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to enable direct play.
        /// </summary>
        /// <value>Gets or sets a value indicating whether to enable direct play.</value>
        [DataMember(Name="EnableDirectPlay", EmitDefaultValue=true)]
        public bool? EnableDirectPlay { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to enable direct stream.
        /// </summary>
        /// <value>Gets or sets a value indicating whether to enable direct stream.</value>
        [DataMember(Name="EnableDirectStream", EmitDefaultValue=true)]
        public bool? EnableDirectStream { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to enable transcoding.
        /// </summary>
        /// <value>Gets or sets a value indicating whether to enable transcoding.</value>
        [DataMember(Name="EnableTranscoding", EmitDefaultValue=true)]
        public bool? EnableTranscoding { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to enable video stream copy.
        /// </summary>
        /// <value>Gets or sets a value indicating whether to enable video stream copy.</value>
        [DataMember(Name="AllowVideoStreamCopy", EmitDefaultValue=true)]
        public bool? AllowVideoStreamCopy { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to allow audio stream copy.
        /// </summary>
        /// <value>Gets or sets a value indicating whether to allow audio stream copy.</value>
        [DataMember(Name="AllowAudioStreamCopy", EmitDefaultValue=true)]
        public bool? AllowAudioStreamCopy { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to auto open the live stream.
        /// </summary>
        /// <value>Gets or sets a value indicating whether to auto open the live stream.</value>
        [DataMember(Name="AutoOpenLiveStream", EmitDefaultValue=true)]
        public bool? AutoOpenLiveStream { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlaybackInfoDto {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  MaxStreamingBitrate: ").Append(MaxStreamingBitrate).Append("\n");
            sb.Append("  StartTimeTicks: ").Append(StartTimeTicks).Append("\n");
            sb.Append("  AudioStreamIndex: ").Append(AudioStreamIndex).Append("\n");
            sb.Append("  SubtitleStreamIndex: ").Append(SubtitleStreamIndex).Append("\n");
            sb.Append("  MaxAudioChannels: ").Append(MaxAudioChannels).Append("\n");
            sb.Append("  MediaSourceId: ").Append(MediaSourceId).Append("\n");
            sb.Append("  LiveStreamId: ").Append(LiveStreamId).Append("\n");
            sb.Append("  DeviceProfile: ").Append(DeviceProfile).Append("\n");
            sb.Append("  EnableDirectPlay: ").Append(EnableDirectPlay).Append("\n");
            sb.Append("  EnableDirectStream: ").Append(EnableDirectStream).Append("\n");
            sb.Append("  EnableTranscoding: ").Append(EnableTranscoding).Append("\n");
            sb.Append("  AllowVideoStreamCopy: ").Append(AllowVideoStreamCopy).Append("\n");
            sb.Append("  AllowAudioStreamCopy: ").Append(AllowAudioStreamCopy).Append("\n");
            sb.Append("  AutoOpenLiveStream: ").Append(AutoOpenLiveStream).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlaybackInfoDto);
        }

        /// <summary>
        /// Returns true if PlaybackInfoDto instances are equal
        /// </summary>
        /// <param name="input">Instance of PlaybackInfoDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlaybackInfoDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.MaxStreamingBitrate == input.MaxStreamingBitrate ||
                    (this.MaxStreamingBitrate != null &&
                    this.MaxStreamingBitrate.Equals(input.MaxStreamingBitrate))
                ) && 
                (
                    this.StartTimeTicks == input.StartTimeTicks ||
                    (this.StartTimeTicks != null &&
                    this.StartTimeTicks.Equals(input.StartTimeTicks))
                ) && 
                (
                    this.AudioStreamIndex == input.AudioStreamIndex ||
                    (this.AudioStreamIndex != null &&
                    this.AudioStreamIndex.Equals(input.AudioStreamIndex))
                ) && 
                (
                    this.SubtitleStreamIndex == input.SubtitleStreamIndex ||
                    (this.SubtitleStreamIndex != null &&
                    this.SubtitleStreamIndex.Equals(input.SubtitleStreamIndex))
                ) && 
                (
                    this.MaxAudioChannels == input.MaxAudioChannels ||
                    (this.MaxAudioChannels != null &&
                    this.MaxAudioChannels.Equals(input.MaxAudioChannels))
                ) && 
                (
                    this.MediaSourceId == input.MediaSourceId ||
                    (this.MediaSourceId != null &&
                    this.MediaSourceId.Equals(input.MediaSourceId))
                ) && 
                (
                    this.LiveStreamId == input.LiveStreamId ||
                    (this.LiveStreamId != null &&
                    this.LiveStreamId.Equals(input.LiveStreamId))
                ) && 
                (
                    this.DeviceProfile == input.DeviceProfile ||
                    (this.DeviceProfile != null &&
                    this.DeviceProfile.Equals(input.DeviceProfile))
                ) && 
                (
                    this.EnableDirectPlay == input.EnableDirectPlay ||
                    (this.EnableDirectPlay != null &&
                    this.EnableDirectPlay.Equals(input.EnableDirectPlay))
                ) && 
                (
                    this.EnableDirectStream == input.EnableDirectStream ||
                    (this.EnableDirectStream != null &&
                    this.EnableDirectStream.Equals(input.EnableDirectStream))
                ) && 
                (
                    this.EnableTranscoding == input.EnableTranscoding ||
                    (this.EnableTranscoding != null &&
                    this.EnableTranscoding.Equals(input.EnableTranscoding))
                ) && 
                (
                    this.AllowVideoStreamCopy == input.AllowVideoStreamCopy ||
                    (this.AllowVideoStreamCopy != null &&
                    this.AllowVideoStreamCopy.Equals(input.AllowVideoStreamCopy))
                ) && 
                (
                    this.AllowAudioStreamCopy == input.AllowAudioStreamCopy ||
                    (this.AllowAudioStreamCopy != null &&
                    this.AllowAudioStreamCopy.Equals(input.AllowAudioStreamCopy))
                ) && 
                (
                    this.AutoOpenLiveStream == input.AutoOpenLiveStream ||
                    (this.AutoOpenLiveStream != null &&
                    this.AutoOpenLiveStream.Equals(input.AutoOpenLiveStream))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.MaxStreamingBitrate != null)
                    hashCode = hashCode * 59 + this.MaxStreamingBitrate.GetHashCode();
                if (this.StartTimeTicks != null)
                    hashCode = hashCode * 59 + this.StartTimeTicks.GetHashCode();
                if (this.AudioStreamIndex != null)
                    hashCode = hashCode * 59 + this.AudioStreamIndex.GetHashCode();
                if (this.SubtitleStreamIndex != null)
                    hashCode = hashCode * 59 + this.SubtitleStreamIndex.GetHashCode();
                if (this.MaxAudioChannels != null)
                    hashCode = hashCode * 59 + this.MaxAudioChannels.GetHashCode();
                if (this.MediaSourceId != null)
                    hashCode = hashCode * 59 + this.MediaSourceId.GetHashCode();
                if (this.LiveStreamId != null)
                    hashCode = hashCode * 59 + this.LiveStreamId.GetHashCode();
                if (this.DeviceProfile != null)
                    hashCode = hashCode * 59 + this.DeviceProfile.GetHashCode();
                if (this.EnableDirectPlay != null)
                    hashCode = hashCode * 59 + this.EnableDirectPlay.GetHashCode();
                if (this.EnableDirectStream != null)
                    hashCode = hashCode * 59 + this.EnableDirectStream.GetHashCode();
                if (this.EnableTranscoding != null)
                    hashCode = hashCode * 59 + this.EnableTranscoding.GetHashCode();
                if (this.AllowVideoStreamCopy != null)
                    hashCode = hashCode * 59 + this.AllowVideoStreamCopy.GetHashCode();
                if (this.AllowAudioStreamCopy != null)
                    hashCode = hashCode * 59 + this.AllowAudioStreamCopy.GetHashCode();
                if (this.AutoOpenLiveStream != null)
                    hashCode = hashCode * 59 + this.AutoOpenLiveStream.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
