/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// The update user easy password request body.
    /// </summary>
    [DataContract]
    public partial class UpdateUserEasyPassword :  IEquatable<UpdateUserEasyPassword>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateUserEasyPassword" /> class.
        /// </summary>
        /// <param name="newPassword">Gets or sets the new sha1-hashed password..</param>
        /// <param name="newPw">Gets or sets the new password..</param>
        /// <param name="resetPassword">Gets or sets a value indicating whether to reset the password..</param>
        public UpdateUserEasyPassword(string newPassword = default(string), string newPw = default(string), bool resetPassword = default(bool))
        {
            this.NewPassword = newPassword;
            this.NewPw = newPw;
            this.NewPassword = newPassword;
            this.NewPw = newPw;
            this.ResetPassword = resetPassword;
        }

        /// <summary>
        /// Gets or sets the new sha1-hashed password.
        /// </summary>
        /// <value>Gets or sets the new sha1-hashed password.</value>
        [DataMember(Name="NewPassword", EmitDefaultValue=true)]
        public string NewPassword { get; set; }

        /// <summary>
        /// Gets or sets the new password.
        /// </summary>
        /// <value>Gets or sets the new password.</value>
        [DataMember(Name="NewPw", EmitDefaultValue=true)]
        public string NewPw { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to reset the password.
        /// </summary>
        /// <value>Gets or sets a value indicating whether to reset the password.</value>
        [DataMember(Name="ResetPassword", EmitDefaultValue=false)]
        public bool ResetPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateUserEasyPassword {\n");
            sb.Append("  NewPassword: ").Append(NewPassword).Append("\n");
            sb.Append("  NewPw: ").Append(NewPw).Append("\n");
            sb.Append("  ResetPassword: ").Append(ResetPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateUserEasyPassword);
        }

        /// <summary>
        /// Returns true if UpdateUserEasyPassword instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateUserEasyPassword to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateUserEasyPassword input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NewPassword == input.NewPassword ||
                    (this.NewPassword != null &&
                    this.NewPassword.Equals(input.NewPassword))
                ) && 
                (
                    this.NewPw == input.NewPw ||
                    (this.NewPw != null &&
                    this.NewPw.Equals(input.NewPw))
                ) && 
                (
                    this.ResetPassword == input.ResetPassword ||
                    (this.ResetPassword != null &&
                    this.ResetPassword.Equals(input.ResetPassword))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NewPassword != null)
                    hashCode = hashCode * 59 + this.NewPassword.GetHashCode();
                if (this.NewPw != null)
                    hashCode = hashCode * 59 + this.NewPw.GetHashCode();
                if (this.ResetPassword != null)
                    hashCode = hashCode * 59 + this.ResetPassword.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
