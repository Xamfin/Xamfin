/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Jellyfin.Api.Client.OpenAPIDateConverter;

namespace Jellyfin.Api.Model
{
    /// <summary>
    /// LibraryOptions
    /// </summary>
    [DataContract]
    public partial class LibraryOptions :  IEquatable<LibraryOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryOptions" /> class.
        /// </summary>
        /// <param name="enablePhotos">enablePhotos.</param>
        /// <param name="enableRealtimeMonitor">enableRealtimeMonitor.</param>
        /// <param name="enableChapterImageExtraction">enableChapterImageExtraction.</param>
        /// <param name="extractChapterImagesDuringLibraryScan">extractChapterImagesDuringLibraryScan.</param>
        /// <param name="pathInfos">pathInfos.</param>
        /// <param name="saveLocalMetadata">saveLocalMetadata.</param>
        /// <param name="enableInternetProviders">enableInternetProviders.</param>
        /// <param name="enableAutomaticSeriesGrouping">enableAutomaticSeriesGrouping.</param>
        /// <param name="enableEmbeddedTitles">enableEmbeddedTitles.</param>
        /// <param name="enableEmbeddedEpisodeInfos">enableEmbeddedEpisodeInfos.</param>
        /// <param name="automaticRefreshIntervalDays">automaticRefreshIntervalDays.</param>
        /// <param name="preferredMetadataLanguage">Gets or sets the preferred metadata language..</param>
        /// <param name="metadataCountryCode">Gets or sets the metadata country code..</param>
        /// <param name="seasonZeroDisplayName">seasonZeroDisplayName.</param>
        /// <param name="metadataSavers">metadataSavers.</param>
        /// <param name="disabledLocalMetadataReaders">disabledLocalMetadataReaders.</param>
        /// <param name="localMetadataReaderOrder">localMetadataReaderOrder.</param>
        /// <param name="disabledSubtitleFetchers">disabledSubtitleFetchers.</param>
        /// <param name="subtitleFetcherOrder">subtitleFetcherOrder.</param>
        /// <param name="skipSubtitlesIfEmbeddedSubtitlesPresent">skipSubtitlesIfEmbeddedSubtitlesPresent.</param>
        /// <param name="skipSubtitlesIfAudioTrackMatches">skipSubtitlesIfAudioTrackMatches.</param>
        /// <param name="subtitleDownloadLanguages">subtitleDownloadLanguages.</param>
        /// <param name="requirePerfectSubtitleMatch">requirePerfectSubtitleMatch.</param>
        /// <param name="saveSubtitlesWithMedia">saveSubtitlesWithMedia.</param>
        /// <param name="typeOptions">typeOptions.</param>
        public LibraryOptions(bool enablePhotos = default(bool), bool enableRealtimeMonitor = default(bool), bool enableChapterImageExtraction = default(bool), bool extractChapterImagesDuringLibraryScan = default(bool), List<MediaPathInfo> pathInfos = default(List<MediaPathInfo>), bool saveLocalMetadata = default(bool), bool enableInternetProviders = default(bool), bool enableAutomaticSeriesGrouping = default(bool), bool enableEmbeddedTitles = default(bool), bool enableEmbeddedEpisodeInfos = default(bool), int automaticRefreshIntervalDays = default(int), string preferredMetadataLanguage = default(string), string metadataCountryCode = default(string), string seasonZeroDisplayName = default(string), List<string> metadataSavers = default(List<string>), List<string> disabledLocalMetadataReaders = default(List<string>), List<string> localMetadataReaderOrder = default(List<string>), List<string> disabledSubtitleFetchers = default(List<string>), List<string> subtitleFetcherOrder = default(List<string>), bool skipSubtitlesIfEmbeddedSubtitlesPresent = default(bool), bool skipSubtitlesIfAudioTrackMatches = default(bool), List<string> subtitleDownloadLanguages = default(List<string>), bool requirePerfectSubtitleMatch = default(bool), bool saveSubtitlesWithMedia = default(bool), List<TypeOptions> typeOptions = default(List<TypeOptions>))
        {
            this.PathInfos = pathInfos;
            this.PreferredMetadataLanguage = preferredMetadataLanguage;
            this.MetadataCountryCode = metadataCountryCode;
            this.SeasonZeroDisplayName = seasonZeroDisplayName;
            this.MetadataSavers = metadataSavers;
            this.DisabledLocalMetadataReaders = disabledLocalMetadataReaders;
            this.LocalMetadataReaderOrder = localMetadataReaderOrder;
            this.DisabledSubtitleFetchers = disabledSubtitleFetchers;
            this.SubtitleFetcherOrder = subtitleFetcherOrder;
            this.SubtitleDownloadLanguages = subtitleDownloadLanguages;
            this.TypeOptions = typeOptions;
            this.EnablePhotos = enablePhotos;
            this.EnableRealtimeMonitor = enableRealtimeMonitor;
            this.EnableChapterImageExtraction = enableChapterImageExtraction;
            this.ExtractChapterImagesDuringLibraryScan = extractChapterImagesDuringLibraryScan;
            this.PathInfos = pathInfos;
            this.SaveLocalMetadata = saveLocalMetadata;
            this.EnableInternetProviders = enableInternetProviders;
            this.EnableAutomaticSeriesGrouping = enableAutomaticSeriesGrouping;
            this.EnableEmbeddedTitles = enableEmbeddedTitles;
            this.EnableEmbeddedEpisodeInfos = enableEmbeddedEpisodeInfos;
            this.AutomaticRefreshIntervalDays = automaticRefreshIntervalDays;
            this.PreferredMetadataLanguage = preferredMetadataLanguage;
            this.MetadataCountryCode = metadataCountryCode;
            this.SeasonZeroDisplayName = seasonZeroDisplayName;
            this.MetadataSavers = metadataSavers;
            this.DisabledLocalMetadataReaders = disabledLocalMetadataReaders;
            this.LocalMetadataReaderOrder = localMetadataReaderOrder;
            this.DisabledSubtitleFetchers = disabledSubtitleFetchers;
            this.SubtitleFetcherOrder = subtitleFetcherOrder;
            this.SkipSubtitlesIfEmbeddedSubtitlesPresent = skipSubtitlesIfEmbeddedSubtitlesPresent;
            this.SkipSubtitlesIfAudioTrackMatches = skipSubtitlesIfAudioTrackMatches;
            this.SubtitleDownloadLanguages = subtitleDownloadLanguages;
            this.RequirePerfectSubtitleMatch = requirePerfectSubtitleMatch;
            this.SaveSubtitlesWithMedia = saveSubtitlesWithMedia;
            this.TypeOptions = typeOptions;
        }

        /// <summary>
        /// Gets or Sets EnablePhotos
        /// </summary>
        [DataMember(Name="EnablePhotos", EmitDefaultValue=false)]
        public bool EnablePhotos { get; set; }

        /// <summary>
        /// Gets or Sets EnableRealtimeMonitor
        /// </summary>
        [DataMember(Name="EnableRealtimeMonitor", EmitDefaultValue=false)]
        public bool EnableRealtimeMonitor { get; set; }

        /// <summary>
        /// Gets or Sets EnableChapterImageExtraction
        /// </summary>
        [DataMember(Name="EnableChapterImageExtraction", EmitDefaultValue=false)]
        public bool EnableChapterImageExtraction { get; set; }

        /// <summary>
        /// Gets or Sets ExtractChapterImagesDuringLibraryScan
        /// </summary>
        [DataMember(Name="ExtractChapterImagesDuringLibraryScan", EmitDefaultValue=false)]
        public bool ExtractChapterImagesDuringLibraryScan { get; set; }

        /// <summary>
        /// Gets or Sets PathInfos
        /// </summary>
        [DataMember(Name="PathInfos", EmitDefaultValue=true)]
        public List<MediaPathInfo> PathInfos { get; set; }

        /// <summary>
        /// Gets or Sets SaveLocalMetadata
        /// </summary>
        [DataMember(Name="SaveLocalMetadata", EmitDefaultValue=false)]
        public bool SaveLocalMetadata { get; set; }

        /// <summary>
        /// Gets or Sets EnableInternetProviders
        /// </summary>
        [DataMember(Name="EnableInternetProviders", EmitDefaultValue=false)]
        public bool EnableInternetProviders { get; set; }

        /// <summary>
        /// Gets or Sets EnableAutomaticSeriesGrouping
        /// </summary>
        [DataMember(Name="EnableAutomaticSeriesGrouping", EmitDefaultValue=false)]
        public bool EnableAutomaticSeriesGrouping { get; set; }

        /// <summary>
        /// Gets or Sets EnableEmbeddedTitles
        /// </summary>
        [DataMember(Name="EnableEmbeddedTitles", EmitDefaultValue=false)]
        public bool EnableEmbeddedTitles { get; set; }

        /// <summary>
        /// Gets or Sets EnableEmbeddedEpisodeInfos
        /// </summary>
        [DataMember(Name="EnableEmbeddedEpisodeInfos", EmitDefaultValue=false)]
        public bool EnableEmbeddedEpisodeInfos { get; set; }

        /// <summary>
        /// Gets or Sets AutomaticRefreshIntervalDays
        /// </summary>
        [DataMember(Name="AutomaticRefreshIntervalDays", EmitDefaultValue=false)]
        public int AutomaticRefreshIntervalDays { get; set; }

        /// <summary>
        /// Gets or sets the preferred metadata language.
        /// </summary>
        /// <value>Gets or sets the preferred metadata language.</value>
        [DataMember(Name="PreferredMetadataLanguage", EmitDefaultValue=true)]
        public string PreferredMetadataLanguage { get; set; }

        /// <summary>
        /// Gets or sets the metadata country code.
        /// </summary>
        /// <value>Gets or sets the metadata country code.</value>
        [DataMember(Name="MetadataCountryCode", EmitDefaultValue=true)]
        public string MetadataCountryCode { get; set; }

        /// <summary>
        /// Gets or Sets SeasonZeroDisplayName
        /// </summary>
        [DataMember(Name="SeasonZeroDisplayName", EmitDefaultValue=true)]
        public string SeasonZeroDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets MetadataSavers
        /// </summary>
        [DataMember(Name="MetadataSavers", EmitDefaultValue=true)]
        public List<string> MetadataSavers { get; set; }

        /// <summary>
        /// Gets or Sets DisabledLocalMetadataReaders
        /// </summary>
        [DataMember(Name="DisabledLocalMetadataReaders", EmitDefaultValue=true)]
        public List<string> DisabledLocalMetadataReaders { get; set; }

        /// <summary>
        /// Gets or Sets LocalMetadataReaderOrder
        /// </summary>
        [DataMember(Name="LocalMetadataReaderOrder", EmitDefaultValue=true)]
        public List<string> LocalMetadataReaderOrder { get; set; }

        /// <summary>
        /// Gets or Sets DisabledSubtitleFetchers
        /// </summary>
        [DataMember(Name="DisabledSubtitleFetchers", EmitDefaultValue=true)]
        public List<string> DisabledSubtitleFetchers { get; set; }

        /// <summary>
        /// Gets or Sets SubtitleFetcherOrder
        /// </summary>
        [DataMember(Name="SubtitleFetcherOrder", EmitDefaultValue=true)]
        public List<string> SubtitleFetcherOrder { get; set; }

        /// <summary>
        /// Gets or Sets SkipSubtitlesIfEmbeddedSubtitlesPresent
        /// </summary>
        [DataMember(Name="SkipSubtitlesIfEmbeddedSubtitlesPresent", EmitDefaultValue=false)]
        public bool SkipSubtitlesIfEmbeddedSubtitlesPresent { get; set; }

        /// <summary>
        /// Gets or Sets SkipSubtitlesIfAudioTrackMatches
        /// </summary>
        [DataMember(Name="SkipSubtitlesIfAudioTrackMatches", EmitDefaultValue=false)]
        public bool SkipSubtitlesIfAudioTrackMatches { get; set; }

        /// <summary>
        /// Gets or Sets SubtitleDownloadLanguages
        /// </summary>
        [DataMember(Name="SubtitleDownloadLanguages", EmitDefaultValue=true)]
        public List<string> SubtitleDownloadLanguages { get; set; }

        /// <summary>
        /// Gets or Sets RequirePerfectSubtitleMatch
        /// </summary>
        [DataMember(Name="RequirePerfectSubtitleMatch", EmitDefaultValue=false)]
        public bool RequirePerfectSubtitleMatch { get; set; }

        /// <summary>
        /// Gets or Sets SaveSubtitlesWithMedia
        /// </summary>
        [DataMember(Name="SaveSubtitlesWithMedia", EmitDefaultValue=false)]
        public bool SaveSubtitlesWithMedia { get; set; }

        /// <summary>
        /// Gets or Sets TypeOptions
        /// </summary>
        [DataMember(Name="TypeOptions", EmitDefaultValue=true)]
        public List<TypeOptions> TypeOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LibraryOptions {\n");
            sb.Append("  EnablePhotos: ").Append(EnablePhotos).Append("\n");
            sb.Append("  EnableRealtimeMonitor: ").Append(EnableRealtimeMonitor).Append("\n");
            sb.Append("  EnableChapterImageExtraction: ").Append(EnableChapterImageExtraction).Append("\n");
            sb.Append("  ExtractChapterImagesDuringLibraryScan: ").Append(ExtractChapterImagesDuringLibraryScan).Append("\n");
            sb.Append("  PathInfos: ").Append(PathInfos).Append("\n");
            sb.Append("  SaveLocalMetadata: ").Append(SaveLocalMetadata).Append("\n");
            sb.Append("  EnableInternetProviders: ").Append(EnableInternetProviders).Append("\n");
            sb.Append("  EnableAutomaticSeriesGrouping: ").Append(EnableAutomaticSeriesGrouping).Append("\n");
            sb.Append("  EnableEmbeddedTitles: ").Append(EnableEmbeddedTitles).Append("\n");
            sb.Append("  EnableEmbeddedEpisodeInfos: ").Append(EnableEmbeddedEpisodeInfos).Append("\n");
            sb.Append("  AutomaticRefreshIntervalDays: ").Append(AutomaticRefreshIntervalDays).Append("\n");
            sb.Append("  PreferredMetadataLanguage: ").Append(PreferredMetadataLanguage).Append("\n");
            sb.Append("  MetadataCountryCode: ").Append(MetadataCountryCode).Append("\n");
            sb.Append("  SeasonZeroDisplayName: ").Append(SeasonZeroDisplayName).Append("\n");
            sb.Append("  MetadataSavers: ").Append(MetadataSavers).Append("\n");
            sb.Append("  DisabledLocalMetadataReaders: ").Append(DisabledLocalMetadataReaders).Append("\n");
            sb.Append("  LocalMetadataReaderOrder: ").Append(LocalMetadataReaderOrder).Append("\n");
            sb.Append("  DisabledSubtitleFetchers: ").Append(DisabledSubtitleFetchers).Append("\n");
            sb.Append("  SubtitleFetcherOrder: ").Append(SubtitleFetcherOrder).Append("\n");
            sb.Append("  SkipSubtitlesIfEmbeddedSubtitlesPresent: ").Append(SkipSubtitlesIfEmbeddedSubtitlesPresent).Append("\n");
            sb.Append("  SkipSubtitlesIfAudioTrackMatches: ").Append(SkipSubtitlesIfAudioTrackMatches).Append("\n");
            sb.Append("  SubtitleDownloadLanguages: ").Append(SubtitleDownloadLanguages).Append("\n");
            sb.Append("  RequirePerfectSubtitleMatch: ").Append(RequirePerfectSubtitleMatch).Append("\n");
            sb.Append("  SaveSubtitlesWithMedia: ").Append(SaveSubtitlesWithMedia).Append("\n");
            sb.Append("  TypeOptions: ").Append(TypeOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LibraryOptions);
        }

        /// <summary>
        /// Returns true if LibraryOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of LibraryOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LibraryOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnablePhotos == input.EnablePhotos ||
                    (this.EnablePhotos != null &&
                    this.EnablePhotos.Equals(input.EnablePhotos))
                ) && 
                (
                    this.EnableRealtimeMonitor == input.EnableRealtimeMonitor ||
                    (this.EnableRealtimeMonitor != null &&
                    this.EnableRealtimeMonitor.Equals(input.EnableRealtimeMonitor))
                ) && 
                (
                    this.EnableChapterImageExtraction == input.EnableChapterImageExtraction ||
                    (this.EnableChapterImageExtraction != null &&
                    this.EnableChapterImageExtraction.Equals(input.EnableChapterImageExtraction))
                ) && 
                (
                    this.ExtractChapterImagesDuringLibraryScan == input.ExtractChapterImagesDuringLibraryScan ||
                    (this.ExtractChapterImagesDuringLibraryScan != null &&
                    this.ExtractChapterImagesDuringLibraryScan.Equals(input.ExtractChapterImagesDuringLibraryScan))
                ) && 
                (
                    this.PathInfos == input.PathInfos ||
                    this.PathInfos != null &&
                    input.PathInfos != null &&
                    this.PathInfos.SequenceEqual(input.PathInfos)
                ) && 
                (
                    this.SaveLocalMetadata == input.SaveLocalMetadata ||
                    (this.SaveLocalMetadata != null &&
                    this.SaveLocalMetadata.Equals(input.SaveLocalMetadata))
                ) && 
                (
                    this.EnableInternetProviders == input.EnableInternetProviders ||
                    (this.EnableInternetProviders != null &&
                    this.EnableInternetProviders.Equals(input.EnableInternetProviders))
                ) && 
                (
                    this.EnableAutomaticSeriesGrouping == input.EnableAutomaticSeriesGrouping ||
                    (this.EnableAutomaticSeriesGrouping != null &&
                    this.EnableAutomaticSeriesGrouping.Equals(input.EnableAutomaticSeriesGrouping))
                ) && 
                (
                    this.EnableEmbeddedTitles == input.EnableEmbeddedTitles ||
                    (this.EnableEmbeddedTitles != null &&
                    this.EnableEmbeddedTitles.Equals(input.EnableEmbeddedTitles))
                ) && 
                (
                    this.EnableEmbeddedEpisodeInfos == input.EnableEmbeddedEpisodeInfos ||
                    (this.EnableEmbeddedEpisodeInfos != null &&
                    this.EnableEmbeddedEpisodeInfos.Equals(input.EnableEmbeddedEpisodeInfos))
                ) && 
                (
                    this.AutomaticRefreshIntervalDays == input.AutomaticRefreshIntervalDays ||
                    (this.AutomaticRefreshIntervalDays != null &&
                    this.AutomaticRefreshIntervalDays.Equals(input.AutomaticRefreshIntervalDays))
                ) && 
                (
                    this.PreferredMetadataLanguage == input.PreferredMetadataLanguage ||
                    (this.PreferredMetadataLanguage != null &&
                    this.PreferredMetadataLanguage.Equals(input.PreferredMetadataLanguage))
                ) && 
                (
                    this.MetadataCountryCode == input.MetadataCountryCode ||
                    (this.MetadataCountryCode != null &&
                    this.MetadataCountryCode.Equals(input.MetadataCountryCode))
                ) && 
                (
                    this.SeasonZeroDisplayName == input.SeasonZeroDisplayName ||
                    (this.SeasonZeroDisplayName != null &&
                    this.SeasonZeroDisplayName.Equals(input.SeasonZeroDisplayName))
                ) && 
                (
                    this.MetadataSavers == input.MetadataSavers ||
                    this.MetadataSavers != null &&
                    input.MetadataSavers != null &&
                    this.MetadataSavers.SequenceEqual(input.MetadataSavers)
                ) && 
                (
                    this.DisabledLocalMetadataReaders == input.DisabledLocalMetadataReaders ||
                    this.DisabledLocalMetadataReaders != null &&
                    input.DisabledLocalMetadataReaders != null &&
                    this.DisabledLocalMetadataReaders.SequenceEqual(input.DisabledLocalMetadataReaders)
                ) && 
                (
                    this.LocalMetadataReaderOrder == input.LocalMetadataReaderOrder ||
                    this.LocalMetadataReaderOrder != null &&
                    input.LocalMetadataReaderOrder != null &&
                    this.LocalMetadataReaderOrder.SequenceEqual(input.LocalMetadataReaderOrder)
                ) && 
                (
                    this.DisabledSubtitleFetchers == input.DisabledSubtitleFetchers ||
                    this.DisabledSubtitleFetchers != null &&
                    input.DisabledSubtitleFetchers != null &&
                    this.DisabledSubtitleFetchers.SequenceEqual(input.DisabledSubtitleFetchers)
                ) && 
                (
                    this.SubtitleFetcherOrder == input.SubtitleFetcherOrder ||
                    this.SubtitleFetcherOrder != null &&
                    input.SubtitleFetcherOrder != null &&
                    this.SubtitleFetcherOrder.SequenceEqual(input.SubtitleFetcherOrder)
                ) && 
                (
                    this.SkipSubtitlesIfEmbeddedSubtitlesPresent == input.SkipSubtitlesIfEmbeddedSubtitlesPresent ||
                    (this.SkipSubtitlesIfEmbeddedSubtitlesPresent != null &&
                    this.SkipSubtitlesIfEmbeddedSubtitlesPresent.Equals(input.SkipSubtitlesIfEmbeddedSubtitlesPresent))
                ) && 
                (
                    this.SkipSubtitlesIfAudioTrackMatches == input.SkipSubtitlesIfAudioTrackMatches ||
                    (this.SkipSubtitlesIfAudioTrackMatches != null &&
                    this.SkipSubtitlesIfAudioTrackMatches.Equals(input.SkipSubtitlesIfAudioTrackMatches))
                ) && 
                (
                    this.SubtitleDownloadLanguages == input.SubtitleDownloadLanguages ||
                    this.SubtitleDownloadLanguages != null &&
                    input.SubtitleDownloadLanguages != null &&
                    this.SubtitleDownloadLanguages.SequenceEqual(input.SubtitleDownloadLanguages)
                ) && 
                (
                    this.RequirePerfectSubtitleMatch == input.RequirePerfectSubtitleMatch ||
                    (this.RequirePerfectSubtitleMatch != null &&
                    this.RequirePerfectSubtitleMatch.Equals(input.RequirePerfectSubtitleMatch))
                ) && 
                (
                    this.SaveSubtitlesWithMedia == input.SaveSubtitlesWithMedia ||
                    (this.SaveSubtitlesWithMedia != null &&
                    this.SaveSubtitlesWithMedia.Equals(input.SaveSubtitlesWithMedia))
                ) && 
                (
                    this.TypeOptions == input.TypeOptions ||
                    this.TypeOptions != null &&
                    input.TypeOptions != null &&
                    this.TypeOptions.SequenceEqual(input.TypeOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnablePhotos != null)
                    hashCode = hashCode * 59 + this.EnablePhotos.GetHashCode();
                if (this.EnableRealtimeMonitor != null)
                    hashCode = hashCode * 59 + this.EnableRealtimeMonitor.GetHashCode();
                if (this.EnableChapterImageExtraction != null)
                    hashCode = hashCode * 59 + this.EnableChapterImageExtraction.GetHashCode();
                if (this.ExtractChapterImagesDuringLibraryScan != null)
                    hashCode = hashCode * 59 + this.ExtractChapterImagesDuringLibraryScan.GetHashCode();
                if (this.PathInfos != null)
                    hashCode = hashCode * 59 + this.PathInfos.GetHashCode();
                if (this.SaveLocalMetadata != null)
                    hashCode = hashCode * 59 + this.SaveLocalMetadata.GetHashCode();
                if (this.EnableInternetProviders != null)
                    hashCode = hashCode * 59 + this.EnableInternetProviders.GetHashCode();
                if (this.EnableAutomaticSeriesGrouping != null)
                    hashCode = hashCode * 59 + this.EnableAutomaticSeriesGrouping.GetHashCode();
                if (this.EnableEmbeddedTitles != null)
                    hashCode = hashCode * 59 + this.EnableEmbeddedTitles.GetHashCode();
                if (this.EnableEmbeddedEpisodeInfos != null)
                    hashCode = hashCode * 59 + this.EnableEmbeddedEpisodeInfos.GetHashCode();
                if (this.AutomaticRefreshIntervalDays != null)
                    hashCode = hashCode * 59 + this.AutomaticRefreshIntervalDays.GetHashCode();
                if (this.PreferredMetadataLanguage != null)
                    hashCode = hashCode * 59 + this.PreferredMetadataLanguage.GetHashCode();
                if (this.MetadataCountryCode != null)
                    hashCode = hashCode * 59 + this.MetadataCountryCode.GetHashCode();
                if (this.SeasonZeroDisplayName != null)
                    hashCode = hashCode * 59 + this.SeasonZeroDisplayName.GetHashCode();
                if (this.MetadataSavers != null)
                    hashCode = hashCode * 59 + this.MetadataSavers.GetHashCode();
                if (this.DisabledLocalMetadataReaders != null)
                    hashCode = hashCode * 59 + this.DisabledLocalMetadataReaders.GetHashCode();
                if (this.LocalMetadataReaderOrder != null)
                    hashCode = hashCode * 59 + this.LocalMetadataReaderOrder.GetHashCode();
                if (this.DisabledSubtitleFetchers != null)
                    hashCode = hashCode * 59 + this.DisabledSubtitleFetchers.GetHashCode();
                if (this.SubtitleFetcherOrder != null)
                    hashCode = hashCode * 59 + this.SubtitleFetcherOrder.GetHashCode();
                if (this.SkipSubtitlesIfEmbeddedSubtitlesPresent != null)
                    hashCode = hashCode * 59 + this.SkipSubtitlesIfEmbeddedSubtitlesPresent.GetHashCode();
                if (this.SkipSubtitlesIfAudioTrackMatches != null)
                    hashCode = hashCode * 59 + this.SkipSubtitlesIfAudioTrackMatches.GetHashCode();
                if (this.SubtitleDownloadLanguages != null)
                    hashCode = hashCode * 59 + this.SubtitleDownloadLanguages.GetHashCode();
                if (this.RequirePerfectSubtitleMatch != null)
                    hashCode = hashCode * 59 + this.RequirePerfectSubtitleMatch.GetHashCode();
                if (this.SaveSubtitlesWithMedia != null)
                    hashCode = hashCode * 59 + this.SaveSubtitlesWithMedia.GetHashCode();
                if (this.TypeOptions != null)
                    hashCode = hashCode * 59 + this.TypeOptions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
